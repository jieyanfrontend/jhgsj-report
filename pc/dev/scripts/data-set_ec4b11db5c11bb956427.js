(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["data-set"],{

/***/ "./data-set.js":
/*!*********************!*\
  !*** ./data-set.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t, n) {
  "object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module)) ? module.exports = n() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}("undefined" != typeof self ? self : undefined, function () {
  return function (t) {
    function n(r) {
      if (e[r]) return e[r].exports;var o = e[r] = { i: r, l: !1, exports: {} };return t[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;
    }var e = {};return n.m = t, n.c = e, n.d = function (t, e, r) {
      n.o(t, e) || Object.defineProperty(t, e, { configurable: !1, enumerable: !0, get: r });
    }, n.n = function (t) {
      var e = t && t.__esModule ? function () {
        return t.default;
      } : function () {
        return t;
      };return n.d(e, "a", e), e;
    }, n.o = function (t, n) {
      return Object.prototype.hasOwnProperty.call(t, n);
    }, n.p = "", n(n.s = 271);
  }([function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(145);e.d(n, "geoArea", function () {
      return r.c;
    });var o = e(292);e.d(n, "geoBounds", function () {
      return o.a;
    });var i = e(293);e.d(n, "geoCentroid", function () {
      return i.a;
    });var c = e(146);e.d(n, "geoCircle", function () {
      return c.b;
    });var u = e(85);e.d(n, "geoClipExtent", function () {
      return u.b;
    });var a = e(312);e.d(n, "geoContains", function () {
      return a.a;
    });var f = e(164);e.d(n, "geoDistance", function () {
      return f.a;
    });var s = e(313);e.d(n, "geoGraticule", function () {
      return s.a;
    }), e.d(n, "geoGraticule10", function () {
      return s.b;
    });var l = e(314);e.d(n, "geoInterpolate", function () {
      return l.a;
    });var h = e(165);e.d(n, "geoLength", function () {
      return h.a;
    });var p = e(315);e.d(n, "geoPath", function () {
      return p.a;
    });var b = e(167);e.d(n, "geoAlbers", function () {
      return b.a;
    });var v = e(325);e.d(n, "geoAlbersUsa", function () {
      return v.a;
    });var g = e(326);e.d(n, "geoAzimuthalEqualArea", function () {
      return g.b;
    }), e.d(n, "geoAzimuthalEqualAreaRaw", function () {
      return g.a;
    });var d = e(327);e.d(n, "geoAzimuthalEquidistant", function () {
      return d.b;
    }), e.d(n, "geoAzimuthalEquidistantRaw", function () {
      return d.a;
    });var j = e(328);e.d(n, "geoConicConformal", function () {
      return j.b;
    }), e.d(n, "geoConicConformalRaw", function () {
      return j.a;
    });var O = e(88);e.d(n, "geoConicEqualArea", function () {
      return O.b;
    }), e.d(n, "geoConicEqualAreaRaw", function () {
      return O.a;
    });var y = e(329);e.d(n, "geoConicEquidistant", function () {
      return y.b;
    }), e.d(n, "geoConicEquidistantRaw", function () {
      return y.a;
    });var m = e(169);e.d(n, "geoEquirectangular", function () {
      return m.a;
    }), e.d(n, "geoEquirectangularRaw", function () {
      return m.b;
    });var x = e(330);e.d(n, "geoGnomonic", function () {
      return x.a;
    }), e.d(n, "geoGnomonicRaw", function () {
      return x.b;
    });var _ = e(331);e.d(n, "geoIdentity", function () {
      return _.a;
    });var w = e(16);e.d(n, "geoProjection", function () {
      return w.a;
    }), e.d(n, "geoProjectionMutator", function () {
      return w.b;
    });var E = e(91);e.d(n, "geoMercator", function () {
      return E.a;
    }), e.d(n, "geoMercatorRaw", function () {
      return E.c;
    });var M = e(332);e.d(n, "geoOrthographic", function () {
      return M.a;
    }), e.d(n, "geoOrthographicRaw", function () {
      return M.b;
    });var S = e(333);e.d(n, "geoStereographic", function () {
      return S.a;
    }), e.d(n, "geoStereographicRaw", function () {
      return S.b;
    });var T = e(334);e.d(n, "geoTransverseMercator", function () {
      return T.a;
    }), e.d(n, "geoTransverseMercatorRaw", function () {
      return T.b;
    });var P = e(58);e.d(n, "geoRotation", function () {
      return P.a;
    });var k = e(25);e.d(n, "geoStream", function () {
      return k.a;
    });var A = e(59);e.d(n, "geoTransform", function () {
      return A.a;
    });
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t > 0 ? Math.sqrt(t) : 0;
    }e.d(n, "a", function () {
      return o;
    }), e.d(n, "f", function () {
      return i;
    }), e.d(n, "g", function () {
      return c;
    }), e.d(n, "h", function () {
      return u;
    }), e.d(n, "m", function () {
      return a;
    }), e.d(n, "n", function () {
      return f;
    }), e.d(n, "p", function () {
      return s;
    }), e.d(n, "q", function () {
      return l;
    }), e.d(n, "r", function () {
      return h;
    }), e.d(n, "t", function () {
      return p;
    }), e.d(n, "w", function () {
      return b;
    }), e.d(n, "x", function () {
      return v;
    }), e.d(n, "y", function () {
      return g;
    }), e.d(n, "F", function () {
      return d;
    }), e.d(n, "k", function () {
      return j;
    }), e.d(n, "l", function () {
      return O;
    }), e.d(n, "s", function () {
      return y;
    }), e.d(n, "o", function () {
      return m;
    }), e.d(n, "u", function () {
      return x;
    }), e.d(n, "C", function () {
      return _;
    }), e.d(n, "D", function () {
      return w;
    }), e.d(n, "E", function () {
      return E;
    }), e.d(n, "H", function () {
      return M;
    }), e.d(n, "j", function () {
      return S;
    }), e.d(n, "v", function () {
      return T;
    }), n.z = function (t) {
      return t ? t / Math.sin(t) : 1;
    }, n.e = function (t) {
      return t > 1 ? m : t < -1 ? -m : Math.asin(t);
    }, n.b = function (t) {
      return t > 1 ? 0 : t < -1 ? y : Math.acos(t);
    }, n.B = r, n.G = function (t) {
      return ((t = a(2 * t)) - 1) / (t + 1);
    }, n.A = function (t) {
      return (a(t) - a(-t)) / 2;
    }, n.i = function (t) {
      return (a(t) + a(-t)) / 2;
    }, n.d = function (t) {
      return s(t + r(t * t + 1));
    }, n.c = function (t) {
      return s(t + r(t * t - 1));
    };var o = Math.abs,
        i = Math.atan,
        c = Math.atan2,
        u = (Math.ceil, Math.cos),
        a = Math.exp,
        f = Math.floor,
        s = Math.log,
        l = Math.max,
        h = Math.min,
        p = Math.pow,
        b = Math.round,
        v = Math.sign || function (t) {
      return t > 0 ? 1 : t < 0 ? -1 : 0;
    },
        g = Math.sin,
        d = Math.tan,
        j = 1e-6,
        O = 1e-12,
        y = Math.PI,
        m = y / 2,
        x = y / 4,
        _ = Math.SQRT1_2,
        w = r(2),
        E = r(y),
        M = 2 * y,
        S = 180 / y,
        T = y / 180;
  }, function (t, n, e) {
    var r = e(5),
        o = e(239),
        i = e(12),
        c = e(581),
        u = e(181),
        a = e(42),
        f = e(119),
        s = function (t) {
      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { state: {} };!function (t, n) {
          if (!(t instanceof n)) throw new TypeError("Cannot call a class as a function");
        }(this, n);var o = function (t, n) {
          if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !n || "object" != (typeof n === "undefined" ? "undefined" : _typeof(n)) && "function" != typeof n ? t : n;
        }(this, t.call(this));return r(o, { _onChangeTimer: null, DataSet: n, isDataSet: !0, views: {} }, e), o;
      }return function (t, n) {
        if ("function" != typeof n && null !== n) throw new TypeError("Super expression must either be null or a function, not " + (typeof n === "undefined" ? "undefined" : _typeof(n)));t.prototype = Object.create(n && n.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), n && (Object.setPrototypeOf ? Object.setPrototypeOf(t, n) : t.__proto__ = n);
      }(n, t), n.prototype._getUniqueViewName = function () {
        for (var t = c("view_"); this.views[t];) {
          t = c("view_");
        }return t;
      }, n.prototype.createView = function (t) {
        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            e = this;if (o(t) && (t = e._getUniqueViewName()), i(t) && (n = t, t = e._getUniqueViewName()), e.views[t]) throw new Error("data view exists: " + t);var r = new a(e, n);return e.views[t] = r, r;
      }, n.prototype.getView = function (t) {
        return this.views[t];
      }, n.prototype.setView = function (t, n) {
        this.views[t] = n;
      }, n.prototype.setState = function (t, n) {
        var e = this;e.state[t] = n, e._onChangeTimer && (clearTimeout(e._onChangeTimer), e._onChangeTimer = null), e._onChangeTimer = setTimeout(function () {
          e.emit("statechange", t, n);
        }, 16);
      }, n;
    }(u);r(s, { CONSTANTS: f, DataSet: s, DataView: a, View: a, connectors: {}, transforms: {}, registerConnector: function registerConnector(t, n) {
        s.connectors[t] = n;
      }, getConnector: function getConnector(t) {
        return s.connectors[t] || s.connectors.default;
      }, registerTransform: function registerTransform(t, n) {
        s.transforms[t] = n;
      }, getTransform: function getTransform(t) {
        return s.transforms[t] || s.transforms.default;
      } }, f), a.DataSet = s, r(s.prototype, { view: s.prototype.createView }), t.exports = s;
  }, function (t, n, e) {
    "use strict";
    e.d(n, "i", function () {
      return r;
    }), e.d(n, "j", function () {
      return o;
    }), e.d(n, "o", function () {
      return i;
    }), e.d(n, "l", function () {
      return c;
    }), e.d(n, "q", function () {
      return u;
    }), e.d(n, "w", function () {
      return a;
    }), e.d(n, "h", function () {
      return f;
    }), e.d(n, "r", function () {
      return s;
    }), e.d(n, "a", function () {
      return l;
    }), e.d(n, "d", function () {
      return h;
    }), e.d(n, "e", function () {
      return p;
    }), e.d(n, "g", function () {
      return b;
    }), e.d(n, "f", function () {
      return v;
    }), e.d(n, "k", function () {
      return g;
    }), e.d(n, "n", function () {
      return d;
    }), e.d(n, "p", function () {
      return j;
    }), e.d(n, "t", function () {
      return O;
    }), e.d(n, "s", function () {
      return y;
    }), e.d(n, "u", function () {
      return m;
    }), e.d(n, "v", function () {
      return x;
    }), n.b = function (t) {
      return t > 1 ? 0 : t < -1 ? i : Math.acos(t);
    }, n.c = function (t) {
      return t > 1 ? c : t < -1 ? -c : Math.asin(t);
    }, n.m = function (t) {
      return (t = O(t / 2)) * t;
    };var r = 1e-6,
        o = 1e-12,
        i = Math.PI,
        c = i / 2,
        u = i / 4,
        a = 2 * i,
        f = 180 / i,
        s = i / 180,
        l = Math.abs,
        h = Math.atan,
        p = Math.atan2,
        b = Math.cos,
        v = Math.ceil,
        g = Math.exp,
        d = (Math.floor, Math.log),
        j = Math.pow,
        O = Math.sin,
        y = Math.sign || function (t) {
      return t > 0 ? 1 : t < 0 ? -1 : 0;
    },
        m = Math.sqrt,
        x = Math.tan;
  }, function (t, n, e) {
    "use strict";
    e.d(n, "i", function () {
      return r;
    }), e.d(n, "j", function () {
      return o;
    }), e.d(n, "o", function () {
      return i;
    }), e.d(n, "l", function () {
      return c;
    }), e.d(n, "q", function () {
      return u;
    }), e.d(n, "w", function () {
      return a;
    }), e.d(n, "h", function () {
      return f;
    }), e.d(n, "r", function () {
      return s;
    }), e.d(n, "a", function () {
      return l;
    }), e.d(n, "d", function () {
      return h;
    }), e.d(n, "e", function () {
      return p;
    }), e.d(n, "g", function () {
      return b;
    }), e.d(n, "f", function () {
      return v;
    }), e.d(n, "k", function () {
      return g;
    }), e.d(n, "n", function () {
      return d;
    }), e.d(n, "p", function () {
      return j;
    }), e.d(n, "t", function () {
      return O;
    }), e.d(n, "s", function () {
      return y;
    }), e.d(n, "u", function () {
      return m;
    }), e.d(n, "v", function () {
      return x;
    }), n.b = function (t) {
      return t > 1 ? 0 : t < -1 ? i : Math.acos(t);
    }, n.c = function (t) {
      return t > 1 ? c : t < -1 ? -c : Math.asin(t);
    }, n.m = function (t) {
      return (t = O(t / 2)) * t;
    };var r = 1e-6,
        o = 1e-12,
        i = Math.PI,
        c = i / 2,
        u = i / 4,
        a = 2 * i,
        f = 180 / i,
        s = i / 180,
        l = Math.abs,
        h = Math.atan,
        p = Math.atan2,
        b = Math.cos,
        v = Math.ceil,
        g = Math.exp,
        d = (Math.floor, Math.log),
        j = Math.pow,
        O = Math.sin,
        y = Math.sign || function (t) {
      return t > 0 ? 1 : t < 0 ? -1 : 0;
    },
        m = Math.sqrt,
        x = Math.tan;
  }, function (t, n, e) {
    var r = e(54),
        o = e(36),
        i = e(280),
        c = e(20),
        u = e(57),
        a = e(10),
        f = Object.prototype.hasOwnProperty,
        s = i(function (t, n) {
      if (u(n) || c(n)) o(n, a(n), t);else for (var e in n) {
        f.call(n, e) && r(t, e, n[e]);
      }
    });t.exports = s;
  }, function (t, n, e) {
    var r = e(7),
        o = "Invalid fields: it must be an array!";t.exports = { getField: function getField(t, n) {
        var e = t.field,
            o = t.fields;if (r(e)) return e;if (Array.isArray(e)) return console.warn("Invalid field: it must be a string!"), e[0];if (console.warn("Invalid field: it must be a string! will try to get fields instead."), r(o)) return o;if (Array.isArray(o) && o.length) return o[0];if (n) return n;throw new TypeError("Invalid field: it must be a string!");
      }, getFields: function getFields(t, n) {
        var e = t.field,
            i = t.fields;if (Array.isArray(i)) return i;if (r(i)) return console.warn(o), [i];if (console.warn(o + " will try to get field instead."), r(e)) return console.warn(o), [e];if (Array.isArray(e) && e.length) return console.warn(o), e;if (n) return n;throw new TypeError(o);
      } };
  }, function (t, n, e) {
    var r = e(19),
        o = e(8),
        i = e(15),
        c = "[object String]";t.exports = function (t) {
      return "string" == typeof t || !o(t) && i(t) && r(t) == c;
    };
  }, function (t, n) {
    var e = Array.isArray;t.exports = e;
  }, function (t, n, e) {
    var r = e(19),
        o = e(12),
        i = "[object AsyncFunction]",
        c = "[object Function]",
        u = "[object GeneratorFunction]",
        a = "[object Proxy]";t.exports = function (t) {
      if (!o(t)) return !1;var n = r(t);return n == c || n == u || n == i || n == a;
    };
  }, function (t, n, e) {
    var r = e(142),
        o = e(290),
        i = e(20);t.exports = function (t) {
      return i(t) ? r(t) : o(t);
    };
  }, function (t, n, e) {
    var r = e(203),
        o = e(487),
        i = e(99);t.exports = function (t, n) {
      return null == t ? t : r(t, o(n), i);
    };
  }, function (t, n) {
    var e = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };t.exports = function (t) {
      var n = void 0 === t ? "undefined" : e(t);return null != t && ("object" == n || "function" == n);
    };
  }, function (t, n, e) {
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        o = e(137),
        i = "object" == ("undefined" == typeof self ? "undefined" : r(self)) && self && self.Object === Object && self,
        c = o || i || Function("return this")();t.exports = c;
  }, function (t, n, e) {
    "use strict";
    e(151);var r = e(34);e.d(n, "a", function () {
      return r.a;
    });e(152), e(296), e(297), e(154), e(156), e(298), e(301), e(302), e(160), e(303), e(304), e(305);var o = e(306);e.d(n, "b", function () {
      return o.a;
    });var i = e(161);e.d(n, "c", function () {
      return i.a;
    });e(153), e(307), e(86);var c = e(158);e.d(n, "d", function () {
      return c.a;
    });e(308), e(309);var u = e(310);e.d(n, "e", function () {
      return u.a;
    });e(159), e(162), e(155), e(311);
  }, function (t, n) {
    var e = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };t.exports = function (t) {
      return null != t && "object" == (void 0 === t ? "undefined" : e(t));
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t) {
        return t = O(t[0] * f.r, t[1] * f.r), [t[0] * E + g, d - t[1] * E];
      }function e(t, n) {
        return t = v(t, n), [t[0] * E + g, d - t[1] * E];
      }function r() {
        O = Object(u.a)(j = Object(s.b)(k, A, C), v);var t = v(T, P);return g = M - t[0] * E, d = S + t[1] * E, l();
      }function l() {
        return _ = w = null, n;
      }var v,
          g,
          d,
          j,
          O,
          y,
          m,
          x,
          _,
          w,
          E = 150,
          M = 480,
          S = 250,
          T = 0,
          P = 0,
          k = 0,
          A = 0,
          C = 0,
          B = null,
          R = o.a,
          N = null,
          q = a.a,
          z = .5,
          L = Object(p.a)(e, z);return n.stream = function (t) {
        return _ && w === t ? _ : _ = b(R(j, L(q(w = t))));
      }, n.clipAngle = function (t) {
        return arguments.length ? (R = +t ? Object(i.a)(B = t * f.r, 6 * f.r) : (B = null, o.a), l()) : B * f.h;
      }, n.clipExtent = function (t) {
        return arguments.length ? (q = null == t ? (N = y = m = x = null, a.a) : Object(c.a)(N = +t[0][0], y = +t[0][1], m = +t[1][0], x = +t[1][1]), l()) : null == N ? null : [[N, y], [m, x]];
      }, n.scale = function (t) {
        return arguments.length ? (E = +t, r()) : E;
      }, n.translate = function (t) {
        return arguments.length ? (M = +t[0], S = +t[1], r()) : [M, S];
      }, n.center = function (t) {
        return arguments.length ? (T = t[0] % 360 * f.r, P = t[1] % 360 * f.r, r()) : [T * f.h, P * f.h];
      }, n.rotate = function (t) {
        return arguments.length ? (k = t[0] % 360 * f.r, A = t[1] % 360 * f.r, C = t.length > 2 ? t[2] % 360 * f.r : 0, r()) : [k * f.h, A * f.h, C * f.h];
      }, n.precision = function (t) {
        return arguments.length ? (L = Object(p.a)(e, z = t * t), l()) : Object(f.u)(z);
      }, n.fitExtent = function (t, e) {
        return Object(h.a)(n, t, e);
      }, n.fitSize = function (t, e) {
        return Object(h.b)(n, t, e);
      }, function () {
        return v = t.apply(this, arguments), n.invert = v.invert && function (t) {
          return (t = O.invert((t[0] - g) / E, (d - t[1]) / E)) && [t[0] * f.h, t[1] * f.h];
        }, r();
      };
    }n.a = function (t) {
      return r(function () {
        return t;
      })();
    }, n.b = r;var o = e(321),
        i = e(322),
        c = e(85),
        u = e(147),
        a = e(87),
        f = e(3),
        s = e(58),
        l = e(59),
        h = e(90),
        p = e(323),
        b = Object(l.b)({ point: function point(t, n) {
        this.stream.point(t * f.r, n * f.r);
      } });
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t) {
        return t = O(t[0] * f.r, t[1] * f.r), [t[0] * E + g, d - t[1] * E];
      }function e(t, n) {
        return t = v(t, n), [t[0] * E + g, d - t[1] * E];
      }function r() {
        O = Object(u.a)(j = Object(s.b)(k, A, C), v);var t = v(T, P);return g = M - t[0] * E, d = S + t[1] * E, l();
      }function l() {
        return _ = w = null, n;
      }var v,
          g,
          d,
          j,
          O,
          y,
          m,
          x,
          _,
          w,
          E = 150,
          M = 480,
          S = 250,
          T = 0,
          P = 0,
          k = 0,
          A = 0,
          C = 0,
          B = null,
          R = o.a,
          N = null,
          q = a.a,
          z = .5,
          L = Object(p.a)(e, z);return n.stream = function (t) {
        return _ && w === t ? _ : _ = b(R(j, L(q(w = t))));
      }, n.clipAngle = function (t) {
        return arguments.length ? (R = +t ? Object(i.a)(B = t * f.r, 6 * f.r) : (B = null, o.a), l()) : B * f.h;
      }, n.clipExtent = function (t) {
        return arguments.length ? (q = null == t ? (N = y = m = x = null, a.a) : Object(c.a)(N = +t[0][0], y = +t[0][1], m = +t[1][0], x = +t[1][1]), l()) : null == N ? null : [[N, y], [m, x]];
      }, n.scale = function (t) {
        return arguments.length ? (E = +t, r()) : E;
      }, n.translate = function (t) {
        return arguments.length ? (M = +t[0], S = +t[1], r()) : [M, S];
      }, n.center = function (t) {
        return arguments.length ? (T = t[0] % 360 * f.r, P = t[1] % 360 * f.r, r()) : [T * f.h, P * f.h];
      }, n.rotate = function (t) {
        return arguments.length ? (k = t[0] % 360 * f.r, A = t[1] % 360 * f.r, C = t.length > 2 ? t[2] % 360 * f.r : 0, r()) : [k * f.h, A * f.h, C * f.h];
      }, n.precision = function (t) {
        return arguments.length ? (L = Object(p.a)(e, z = t * t), l()) : Object(f.u)(z);
      }, n.fitExtent = Object(h.a)(n), n.fitSize = Object(h.b)(n), function () {
        return v = t.apply(this, arguments), n.invert = v.invert && function (t) {
          return (t = O.invert((t[0] - g) / E, (d - t[1]) / E)) && [t[0] * f.h, t[1] * f.h];
        }, r();
      };
    }n.a = function (t) {
      return r(function () {
        return t;
      })();
    }, n.b = r;var o = e(509),
        i = e(511),
        c = e(209),
        u = e(208),
        a = e(214),
        f = e(4),
        s = e(109),
        l = e(112),
        h = e(218),
        p = e(512),
        b = Object(l.b)({ point: function point(t, n) {
        this.stream.point(t * f.r, n * f.r);
      } });
  }, function (t, n, e) {
    var r = e(9),
        o = e(7),
        i = e(526),
        c = e(532);t.exports = function (t, n) {
      var e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
          u = t;e && e.length && (u = c(t, e));var a = void 0;r(n) ? a = n : Array.isArray(n) ? a = function a(t) {
        return "_" + n.map(function (n) {
          return t[n];
        }).join("-");
      } : o(n) && (a = function a(t) {
        return "_" + t[n];
      });return i(u, a);
    };
  }, function (t, n, e) {
    var r = e(32),
        o = e(275),
        i = e(276),
        c = "[object Null]",
        u = "[object Undefined]",
        a = r ? r.toStringTag : void 0;t.exports = function (t) {
      return null == t ? void 0 === t ? u : c : a && a in Object(t) ? o(t) : i(t);
    };
  }, function (t, n, e) {
    var r = e(9),
        o = e(80);t.exports = function (t) {
      return null != t && o(t.length) && !r(t);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {};
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e,
          r = t * Object(c.y)(n),
          o = 30;do {
        n -= e = (n + Object(c.y)(n) - r) / (1 + Object(c.h)(n));
      } while (Object(c.a)(e) > c.k && --o > 0);return n / 2;
    }function o(t, n, e) {
      function o(o, i) {
        return [t * o * Object(c.h)(i = r(e, i)), n * Object(c.y)(i)];
      }return o.invert = function (r, o) {
        return o = Object(c.e)(o / n), [r / (t * Object(c.h)(o)), Object(c.e)((2 * o + Object(c.y)(2 * o)) / e)];
      }, o;
    }n.c = r, n.b = o, e.d(n, "d", function () {
      return u;
    });var i = e(0),
        c = e(1),
        u = o(c.D / c.o, c.D, c.s);n.a = function () {
      return Object(i.geoProjection)(u).scale(169.529);
    };
  }, function (t, n, e) {
    var r = e(224);t.exports = function (t) {
      if (0 === t.length) throw new Error("mean requires at least one data point");return r(t) / t.length;
    };
  }, function (t, n, e) {
    var r = e(273),
        o = e(279);t.exports = function (t, n) {
      var e = o(t, n);return r(e) ? e : void 0;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      t && u.hasOwnProperty(t.type) && u[t.type](t, n);
    }function o(t, n, e) {
      var r,
          o = -1,
          i = t.length - e;for (n.lineStart(); ++o < i;) {
        r = t[o], n.point(r[0], r[1], r[2]);
      }n.lineEnd();
    }function i(t, n) {
      var e = -1,
          r = t.length;for (n.polygonStart(); ++e < r;) {
        o(t[e], n, 1);
      }n.polygonEnd();
    }var c = { Feature: function Feature(t, n) {
        r(t.geometry, n);
      }, FeatureCollection: function FeatureCollection(t, n) {
        for (var e = t.features, o = -1, i = e.length; ++o < i;) {
          r(e[o].geometry, n);
        }
      } },
        u = { Sphere: function Sphere(t, n) {
        n.sphere();
      }, Point: function Point(t, n) {
        t = t.coordinates, n.point(t[0], t[1], t[2]);
      }, MultiPoint: function MultiPoint(t, n) {
        for (var e = t.coordinates, r = -1, o = e.length; ++r < o;) {
          t = e[r], n.point(t[0], t[1], t[2]);
        }
      }, LineString: function LineString(t, n) {
        o(t.coordinates, n, 0);
      }, MultiLineString: function MultiLineString(t, n) {
        for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {
          o(e[r], n, 0);
        }
      }, Polygon: function Polygon(t, n) {
        i(t.coordinates, n);
      }, MultiPolygon: function MultiPolygon(t, n) {
        for (var e = t.coordinates, r = -1, o = e.length; ++r < o;) {
          i(e[r], n);
        }
      }, GeometryCollection: function GeometryCollection(t, n) {
        for (var e = t.geometries, o = -1, i = e.length; ++o < i;) {
          r(e[o], n);
        }
      } };n.a = function (t, n) {
      t && c.hasOwnProperty(t.type) ? c[t.type](t, n) : r(t, n);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return Object(u.a)(t[0] - n[0]) < u.k && Object(u.a)(t[1] - n[1]) < u.k;
    }function o(t, n) {
      for (var e, r, o, i = -1, c = t.length, u = t[0], a = []; ++i < c;) {
        r = ((e = t[i])[0] - u[0]) / n, o = (e[1] - u[1]) / n;for (var f = 0; f < n; ++f) {
          a.push([u[0] + f * r, u[1] + f * o]);
        }u = e;
      }return a.push(e), a;
    }var i = e(14),
        c = e(0),
        u = e(1);n.a = function (t, n) {
      function e(e, r) {
        for (var o = r < 0 ? -1 : 1, i = n[+(r < 0)], c = 0, u = i.length - 1; c < u && e > i[c][2][0]; ++c) {}var a = t(e - i[c][1][0], r);return a[0] += t(i[c][1][0], o * r > o * i[c][0][1] ? i[c][0][1] : r)[0], a;
      }var a = function (t) {
        var n,
            e,
            r,
            c,
            a,
            f,
            s,
            l = [],
            h = t[0].length;for (s = 0; s < h; ++s) {
          e = (n = t[0][s])[0][0], r = n[0][1], c = n[1][1], a = n[2][0], f = n[2][1], l.push(o([[e + u.k, r + u.k], [e + u.k, c - u.k], [a - u.k, c - u.k], [a - u.k, f + u.k]], 30));
        }for (s = t[1].length - 1; s >= 0; --s) {
          e = (n = t[1][s])[0][0], r = n[0][1], c = n[1][1], a = n[2][0], f = n[2][1], l.push(o([[a - u.k, f - u.k], [a - u.k, c + u.k], [e + u.k, c + u.k], [e + u.k, r - u.k]], 30));
        }return { type: "Polygon", coordinates: [Object(i.b)(l)] };
      }(n),
          f = (n = n.map(function (t) {
        return t.map(function (t) {
          return [[t[0][0] * u.v, t[0][1] * u.v], [t[1][0] * u.v, t[1][1] * u.v], [t[2][0] * u.v, t[2][1] * u.v]];
        });
      })).map(function (n) {
        return n.map(function (n) {
          var e,
              r = t(n[0][0], n[0][1])[0],
              o = t(n[2][0], n[2][1])[0],
              i = t(n[1][0], n[0][1])[1],
              c = t(n[1][0], n[1][1])[1];return i > c && (e = i, i = c, c = e), [[r, i], [o, c]];
        });
      });t.invert && (e.invert = function (o, i) {
        for (var c = f[+(i < 0)], u = n[+(i < 0)], a = 0, s = c.length; a < s; ++a) {
          var l = c[a];if (l[0][0] <= o && o < l[1][0] && l[0][1] <= i && i < l[1][1]) {
            var h = t.invert(o - t(u[a][1][0], 0)[0], i);return h[0] += u[a][1][0], r(e(h[0], h[1]), [o, i]) ? h : null;
          }
        }
      });var s = Object(c.geoProjection)(e),
          l = s.stream;return s.stream = function (t) {
        var n = s.rotate(),
            e = l(t),
            r = (s.rotate([0, 0]), l(t));return s.rotate(n), e.sphere = function () {
          Object(c.geoStream)(a, r);
        }, e;
      }, s;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {};
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      t && u.hasOwnProperty(t.type) && u[t.type](t, n);
    }function o(t, n, e) {
      var r,
          o = -1,
          i = t.length - e;for (n.lineStart(); ++o < i;) {
        r = t[o], n.point(r[0], r[1], r[2]);
      }n.lineEnd();
    }function i(t, n) {
      var e = -1,
          r = t.length;for (n.polygonStart(); ++e < r;) {
        o(t[e], n, 1);
      }n.polygonEnd();
    }var c = { Feature: function Feature(t, n) {
        r(t.geometry, n);
      }, FeatureCollection: function FeatureCollection(t, n) {
        for (var e = t.features, o = -1, i = e.length; ++o < i;) {
          r(e[o].geometry, n);
        }
      } },
        u = { Sphere: function Sphere(t, n) {
        n.sphere();
      }, Point: function Point(t, n) {
        t = t.coordinates, n.point(t[0], t[1], t[2]);
      }, MultiPoint: function MultiPoint(t, n) {
        for (var e = t.coordinates, r = -1, o = e.length; ++r < o;) {
          t = e[r], n.point(t[0], t[1], t[2]);
        }
      }, LineString: function LineString(t, n) {
        o(t.coordinates, n, 0);
      }, MultiLineString: function MultiLineString(t, n) {
        for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {
          o(e[r], n, 0);
        }
      }, Polygon: function Polygon(t, n) {
        i(t.coordinates, n);
      }, MultiPolygon: function MultiPolygon(t, n) {
        for (var e = t.coordinates, r = -1, o = e.length; ++r < o;) {
          i(e[r], n);
        }
      }, GeometryCollection: function GeometryCollection(t, n) {
        for (var e = t.geometries, o = -1, i = e.length; ++o < i;) {
          r(e[o], n);
        }
      } };n.a = function (t, n) {
      t && c.hasOwnProperty(t.type) ? c[t.type](t, n) : r(t, n);
    };
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(522);e.d(n, "path", function () {
      return r.a;
    });
  }, function (t, n, e) {
    var r = t.exports = {};r.linearRegression = e(534), r.linearRegressionLine = e(535), r.standardDeviation = e(222), r.rSquared = e(536), r.mode = e(537), r.modeFast = e(538), r.modeSorted = e(226), r.min = e(227), r.max = e(228), r.minSorted = e(539), r.maxSorted = e(540), r.sum = e(224), r.sumSimple = e(541), r.product = e(542), r.quantile = e(116), r.quantileSorted = e(117), r.interquartileRange = r.iqr = e(544), r.medianAbsoluteDeviation = r.mad = e(545), r.chunk = e(546), r.sampleWithReplacement = e(547), r.shuffle = e(230), r.shuffleInPlace = e(231), r.sample = e(548), r.ckmeans = e(549), r.uniqueCountSorted = e(232), r.sumNthPowerDeviations = e(115), r.equalIntervalBreaks = e(550), r.sampleCovariance = e(233), r.sampleCorrelation = e(551), r.sampleVariance = e(118), r.sampleStandardDeviation = e(234), r.sampleSkewness = e(552), r.sampleKurtosis = e(553), r.permutationsHeap = e(554), r.combinations = e(555), r.combinationsReplacement = e(556), r.addToMean = e(557), r.combineMeans = e(235), r.combineVariances = e(558), r.geometricMean = e(559), r.harmonicMean = e(560), r.mean = r.average = e(23), r.median = e(229), r.medianSorted = e(561), r.subtractFromMean = e(562), r.rootMeanSquare = r.rms = e(563), r.variance = e(223), r.tTest = e(564), r.tTestTwoSample = e(565), r.BayesianClassifier = r.bayesian = e(566), r.PerceptronModel = r.perceptron = e(567), r.epsilon = e(72), r.factorial = e(568), r.bernoulliDistribution = e(569), r.binomialDistribution = e(570), r.poissonDistribution = e(571), r.chiSquaredGoodnessOfFit = e(572), r.zScore = e(574), r.cumulativeStdNormalProbability = e(575), r.standardNormalTable = e(236), r.errorFunction = r.erf = e(576), r.inverseErrorFunction = e(237), r.probit = e(577), r.bisect = e(578);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    var r = e(13).Symbol;t.exports = r;
  }, function (t, n, e) {
    "use strict";
    function r() {
      this.reset();
    }function o(t, n, e) {
      var r = t.s = n + e,
          o = r - n,
          i = r - o;t.t = n - i + (e - o);
    }n.a = function () {
      return new r();
    }, r.prototype = { constructor: r, reset: function reset() {
        this.s = this.t = 0;
      }, add: function add(t) {
        o(i, t, this.t), o(this, i.s, this.s), this.s ? this.t += i.t : this.s = i.t;
      }, valueOf: function valueOf() {
        return this.s;
      } };var i = new r();
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      return t < n ? -1 : t > n ? 1 : t >= n ? 0 : NaN;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(0),
        o = e(1);n.a = function (t) {
      var n = 0,
          e = Object(r.geoProjectionMutator)(t),
          i = e(n);return i.parallel = function (t) {
        return arguments.length ? e(n = t * o.v) : n * o.j;
      }, i;
    };
  }, function (t, n, e) {
    var r = e(54),
        o = e(78);t.exports = function (t, n, e, i) {
      var c = !e;e || (e = {});for (var u = -1, a = n.length; ++u < a;) {
        var f = n[u],
            s = i ? i(e[f], t[f], f, e, t) : void 0;void 0 === s && (s = t[f]), c ? o(e, f, s) : r(e, f, s);
      }return e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return t;
    };
  }, function (t, n, e) {
    "use strict";
    n.g = function (t) {
      return [Object(r.e)(t[1], t[0]), Object(r.c)(t[2])];
    }, n.a = function (t) {
      var n = t[0],
          e = t[1],
          o = Object(r.g)(e);return [o * Object(r.g)(n), o * Object(r.t)(n), Object(r.t)(e)];
    }, n.d = function (t, n) {
      return t[0] * n[0] + t[1] * n[1] + t[2] * n[2];
    }, n.c = function (t, n) {
      return [t[1] * n[2] - t[2] * n[1], t[2] * n[0] - t[0] * n[2], t[0] * n[1] - t[1] * n[0]];
    }, n.b = function (t, n) {
      t[0] += n[0], t[1] += n[1], t[2] += n[2];
    }, n.f = function (t, n) {
      return [t[0] * n, t[1] * n, t[2] * n];
    }, n.e = function (t) {
      var n = Object(r.u)(t[0] * t[0] + t[1] * t[1] + t[2] * t[2]);t[0] /= n, t[1] /= n, t[2] /= n;
    };var r = e(3);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return null === t ? NaN : +t;
    };
  }, function (t, n, e) {
    "use strict";
    n.b = function (t) {
      return function (n, e) {
        var o = Object(r.g)(n),
            i = Object(r.g)(e),
            c = t(o * i);return [c * i * Object(r.t)(n), c * Object(r.t)(e)];
      };
    }, n.a = function (t) {
      return function (n, e) {
        var o = Object(r.u)(n * n + e * e),
            i = t(o),
            c = Object(r.t)(i),
            u = Object(r.g)(i);return [Object(r.e)(n * c, o * u), Object(r.c)(o && e * c / o)];
      };
    };var r = e(3);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t * Object(i.h)(n), n];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      return [t / Object(i.h)(n), n];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(152.63);
    };
  }, function (t, n, e) {
    var r = e(181),
        o = e(5),
        i = e(182),
        c = e(463),
        u = e(11),
        a = e(488),
        f = e(12),
        s = e(7),
        l = e(10),
        h = e(70),
        p = e(108),
        b = function (t) {
      function n(e, r) {
        !function (t, n) {
          if (!(t instanceof n)) throw new TypeError("Cannot call a class as a function");
        }(this, n);var i = function (t, n) {
          if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !n || "object" != (typeof n === "undefined" ? "undefined" : _typeof(n)) && "function" != typeof n ? t : n;
        }(this, t.call(this)),
            c = i;if (r = r || {}, (e = e || {}).isDataSet || (r = e, e = null), o(c, { dataSet: e, loose: !e, dataType: "table", isView: !0, isDataView: !0, origin: [], rows: [], transforms: [], watchingStates: null }, r), !c.loose) {
          var u = c.watchingStates;e.on("statechange", function (t) {
            Array.isArray(u) ? u.indexOf(t) > -1 && c._reExecute() : c._reExecute();
          });
        }return i;
      }return function (t, n) {
        if ("function" != typeof n && null !== n) throw new TypeError("Super expression must either be null or a function, not " + (typeof n === "undefined" ? "undefined" : _typeof(n)));t.prototype = Object.create(n && n.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), n && (Object.setPrototypeOf ? Object.setPrototypeOf(t, n) : t.__proto__ = n);
      }(n, t), n.prototype._parseStateExpression = function (t) {
        var n = this.dataSet,
            e = /^\$state\.(\w+)/.exec(t);return e ? n.state[e[1]] : t;
      }, n.prototype._preparseOptions = function (t) {
        var n = this,
            e = i(t);return n.loose ? e : (u(e, function (t, r) {
          s(t) && /^\$state\./.test(t) && (e[r] = n._parseStateExpression(t));
        }), e);
      }, n.prototype._prepareSource = function (t, e) {
        var r = this,
            o = n.DataSet;if (r._source = { source: t, options: e }, e) e = r._preparseOptions(e), r.origin = o.getConnector(e.type)(t, e, r);else if (t instanceof n || s(t)) r.origin = o.getConnector("default")(t, r.dataSet);else if (Array.isArray(t)) r.origin = t;else {
          if (!f(t) || !t.type) throw new TypeError("Invalid source");e = r._preparseOptions(t), r.origin = o.getConnector(e.type)(e, r);
        }return r.rows = p(r.origin), r;
      }, n.prototype.source = function (t, n) {
        return this._prepareSource(t, n), this._reExecuteTransforms(), this.trigger("change"), this;
      }, n.prototype.transform = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return this.transforms.push(t), this._executeTransform(t), this;
      }, n.prototype._executeTransform = function (t) {
        t = this._preparseOptions(t);n.DataSet.getTransform(t.type)(this, t);
      }, n.prototype._reExecuteTransforms = function () {
        var t = this;t.transforms.forEach(function (n) {
          t._executeTransform(n);
        });
      }, n.prototype.addRow = function (t) {
        this.rows.push(t);
      }, n.prototype.removeRow = function (t) {
        this.rows.splice(t, 1);
      }, n.prototype.updateRow = function (t, n) {
        o(this.rows[t], n);
      }, n.prototype.findRows = function (t) {
        return this.rows.filter(function (n) {
          return a(n, t);
        });
      }, n.prototype.findRow = function (t) {
        return c(this.rows, t);
      }, n.prototype.getColumnNames = function () {
        var t = this.rows[0];return t ? l(t) : [];
      }, n.prototype.getColumnName = function (t) {
        return this.getColumnNames()[t];
      }, n.prototype.getColumnIndex = function (t) {
        return this.getColumnNames().indexOf(t);
      }, n.prototype.getColumn = function (t) {
        return this.rows.map(function (n) {
          return n[t];
        });
      }, n.prototype.getColumnData = function (t) {
        return this.getColumn(t);
      }, n.prototype.getSubset = function (t, n, e) {
        for (var r = [], o = t; o <= n; o++) {
          r.push(h(this.rows[o], e));
        }return r;
      }, n.prototype.toString = function (t) {
        return t ? JSON.stringify(this.rows, null, 2) : JSON.stringify(this.rows);
      }, n.prototype._reExecute = function () {
        var t = this._source,
            n = t.source,
            e = t.options;this._prepareSource(n, e), this._reExecuteTransforms(), this.trigger("change");
      }, n;
    }(r);t.exports = b;
  }, function (t, n, e) {
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        o = e(19),
        i = e(15),
        c = "[object Symbol]";t.exports = function (t) {
      return "symbol" == (void 0 === t ? "undefined" : r(t)) || i(t) && o(t) == c;
    };
  }, function (t, n, e) {
    var r = e(43),
        o = 1 / 0;t.exports = function (t) {
      if ("string" == typeof t || r(t)) return t;var n = t + "";return "0" == n && 1 / t == -o ? "-0" : n;
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      this.reset();
    }function o(t, n, e) {
      var r = t.s = n + e,
          o = r - n,
          i = r - o;t.t = n - i + (e - o);
    }n.a = function () {
      return new r();
    }, r.prototype = { constructor: r, reset: function reset() {
        this.s = this.t = 0;
      }, add: function add(t) {
        o(i, t, this.t), o(this, i.s, this.s), this.s ? this.t += i.t : this.s = i.t;
      }, valueOf: function valueOf() {
        return this.s;
      } };var i = new r();
  }, function (t, n, e) {
    "use strict";
    n.g = function (t) {
      return [Object(r.e)(t[1], t[0]), Object(r.c)(t[2])];
    }, n.a = function (t) {
      var n = t[0],
          e = t[1],
          o = Object(r.g)(e);return [o * Object(r.g)(n), o * Object(r.t)(n), Object(r.t)(e)];
    }, n.d = function (t, n) {
      return t[0] * n[0] + t[1] * n[1] + t[2] * n[2];
    }, n.c = function (t, n) {
      return [t[1] * n[2] - t[2] * n[1], t[2] * n[0] - t[0] * n[2], t[0] * n[1] - t[1] * n[0]];
    }, n.b = function (t, n) {
      t[0] += n[0], t[1] += n[1], t[2] += n[2];
    }, n.f = function (t, n) {
      return [t[0] * n, t[1] * n, t[2] * n];
    }, n.e = function (t) {
      var n = Object(r.u)(t[0] * t[0] + t[1] * t[1] + t[2] * t[2]);t[0] /= n, t[1] /= n, t[2] /= n;
    };var r = e(4);
  }, function (t, n, e) {
    "use strict";
    n.b = function (t) {
      return function (n, e) {
        var o = Object(r.g)(n),
            i = Object(r.g)(e),
            c = t(o * i);return [c * i * Object(r.t)(n), c * Object(r.t)(e)];
      };
    }, n.a = function (t) {
      return function (n, e) {
        var o = Object(r.u)(n * n + e * e),
            i = t(o),
            c = Object(r.t)(i),
            u = Object(r.g)(i);return [Object(r.e)(n * c, o * u), Object(r.c)(o && e * c / o)];
      };
    };var r = e(4);
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(592);e.d(n, "cluster", function () {
      return r.a;
    });var o = e(121);e.d(n, "hierarchy", function () {
      return o.c;
    });var i = e(604);e.d(n, "pack", function () {
      return i.a;
    });var c = e(242);e.d(n, "packSiblings", function () {
      return c.a;
    });var u = e(243);e.d(n, "packEnclose", function () {
      return u.a;
    });var a = e(606);e.d(n, "partition", function () {
      return a.a;
    });var f = e(607);e.d(n, "stratify", function () {
      return f.a;
    });var s = e(608);e.d(n, "tree", function () {
      return s.a;
    });var l = e(609);e.d(n, "treemap", function () {
      return l.a;
    });var h = e(610);e.d(n, "treemapBinary", function () {
      return h.a;
    });var p = e(49);e.d(n, "treemapDice", function () {
      return p.a;
    });var b = e(73);e.d(n, "treemapSlice", function () {
      return b.a;
    });var v = e(611);e.d(n, "treemapSliceDice", function () {
      return v.a;
    });var g = e(123);e.d(n, "treemapSquarify", function () {
      return g.a;
    });var d = e(612);e.d(n, "treemapResquarify", function () {
      return d.a;
    });
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e, r, o) {
      for (var i, c = t.children, u = -1, a = c.length, f = t.value && (r - n) / t.value; ++u < a;) {
        (i = c[u]).y0 = e, i.y1 = o, i.x0 = n, i.x1 = n += i.value * f;
      }
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return r;
    }), e.d(n, "d", function () {
      return o;
    }), e.d(n, "e", function () {
      return i;
    }), e.d(n, "h", function () {
      return c;
    }), e.d(n, "i", function () {
      return u;
    }), e.d(n, "k", function () {
      return a;
    }), e.d(n, "l", function () {
      return f;
    }), e.d(n, "f", function () {
      return s;
    }), e.d(n, "j", function () {
      return l;
    }), e.d(n, "g", function () {
      return h;
    }), e.d(n, "m", function () {
      return p;
    }), n.b = function (t) {
      return t > 1 ? 0 : t < -1 ? l : Math.acos(t);
    }, n.c = function (t) {
      return t >= 1 ? h : t <= -1 ? -h : Math.asin(t);
    };var r = Math.abs,
        o = Math.atan2,
        i = Math.cos,
        c = Math.max,
        u = Math.min,
        a = Math.sin,
        f = Math.sqrt,
        s = 1e-12,
        l = Math.PI,
        h = l / 2,
        p = 2 * l;
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      if ((o = t.length) > 1) for (var e, r, o, i = 1, c = t[n[0]], u = c.length; i < o; ++i) {
        for (r = c, c = t[n[i]], e = 0; e < u; ++e) {
          c[e][1] += c[e][0] = isNaN(r[e][1]) ? r[e][0] : r[e][1];
        }
      }
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      for (var n = t.length, e = new Array(n); --n >= 0;) {
        e[n] = n;
      }return e;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      return (t[0] - e[0]) * (n[1] - t[1]) - (t[0] - n[0]) * (e[1] - t[1]);
    }function o(t, n) {
      return n[1] - t[1] || n[0] - t[0];
    }function i(t, n) {
      var e,
          r,
          i,
          v = t.sort(o).pop();for (f = [], u = new Array(t.length), c = new b.b(), a = new b.b();;) {
        if (i = h.c, v && (!i || v[1] < i.y || v[1] === i.y && v[0] < i.x)) v[0] === e && v[1] === r || (Object(s.a)(v), e = v[0], r = v[1]), v = t.pop();else {
          if (!i) break;Object(s.b)(i.arc);
        }
      }if (Object(l.d)(), n) {
        var g = +n[0][0],
            d = +n[0][1],
            j = +n[1][0],
            O = +n[1][1];Object(p.a)(g, d, j, O), Object(l.b)(g, d, j, O);
      }this.edges = f, this.cells = u, c = a = f = u = null;
    }e.d(n, "f", function () {
      return v;
    }), e.d(n, "g", function () {
      return g;
    }), e.d(n, "a", function () {
      return c;
    }), e.d(n, "b", function () {
      return u;
    }), e.d(n, "c", function () {
      return a;
    }), e.d(n, "e", function () {
      return f;
    }), n.d = i;var c,
        u,
        a,
        f,
        s = e(708),
        l = e(268),
        h = e(269),
        p = e(135),
        b = e(134),
        v = 1e-6,
        g = 1e-12;i.prototype = { constructor: i, polygons: function polygons() {
        var t = this.edges;return this.cells.map(function (n) {
          var e = n.halfedges.map(function (e) {
            return Object(l.a)(n, t[e]);
          });return e.data = n.site.data, e;
        });
      }, triangles: function triangles() {
        var t = [],
            n = this.edges;return this.cells.forEach(function (e, o) {
          if (c = (i = e.halfedges).length) for (var i, c, u, a = e.site, f = -1, s = n[i[c - 1]], l = s.left === a ? s.right : s.left; ++f < c;) {
            u = l, l = (s = n[i[f]]).left === a ? s.right : s.left, u && l && o < u.index && o < l.index && r(a, u, l) < 0 && t.push([a.data, u.data, l.data]);
          }
        }), t;
      }, links: function links() {
        return this.edges.filter(function (t) {
          return t.right;
        }).map(function (t) {
          return { source: t.left.data, target: t.right.data };
        });
      }, find: function find(t, n, e) {
        for (var r, o, i = this, c = i._found || 0, u = i.cells.length; !(o = i.cells[c]);) {
          if (++c >= u) return null;
        }var a = t - o.site[0],
            f = n - o.site[1],
            s = a * a + f * f;do {
          o = i.cells[r = c], c = null, o.halfedges.forEach(function (e) {
            var r = i.edges[e],
                u = r.left;if (u !== o.site && u || (u = r.right)) {
              var a = t - u[0],
                  f = n - u[1],
                  l = a * a + f * f;l < s && (s = l, c = u.index);
            }
          });
        } while (null !== c);return i._found = r, null == e || s <= e * e ? o.site : null;
      } };
  }, function (t, n, e) {
    var r = e(78),
        o = e(55),
        i = Object.prototype.hasOwnProperty;t.exports = function (t, n, e) {
      var c = t[n];i.call(t, n) && o(c, e) && (void 0 !== e || n in t) || r(t, n, e);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      return t === n || t != t && n != n;
    };
  }, function (t, n) {
    var e = 9007199254740991,
        r = /^(?:0|[1-9]\d*)$/;t.exports = function (t, n) {
      return !!(n = null == n ? e : n) && ("number" == typeof t || r.test(t)) && t > -1 && t % 1 == 0 && t < n;
    };
  }, function (t, n) {
    var e = Object.prototype;t.exports = function (t) {
      var n = t && t.constructor;return t === ("function" == typeof n && n.prototype || e);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t > f.o ? t - f.w : t < -f.o ? t + f.w : t, n];
    }function o(t, n, e) {
      return (t %= f.w) ? n || e ? Object(a.a)(c(t), u(n, e)) : c(t) : n || e ? u(n, e) : r;
    }function i(t) {
      return function (n, e) {
        return n += t, [n > f.o ? n - f.w : n < -f.o ? n + f.w : n, e];
      };
    }function c(t) {
      var n = i(t);return n.invert = i(-t), n;
    }function u(t, n) {
      function e(t, n) {
        var e = Object(f.g)(n),
            u = Object(f.g)(t) * e,
            a = Object(f.t)(t) * e,
            s = Object(f.t)(n),
            l = s * r + u * o;return [Object(f.e)(a * i - l * c, u * r - s * o), Object(f.c)(l * i + a * c)];
      }var r = Object(f.g)(t),
          o = Object(f.t)(t),
          i = Object(f.g)(n),
          c = Object(f.t)(n);return e.invert = function (t, n) {
        var e = Object(f.g)(n),
            u = Object(f.g)(t) * e,
            a = Object(f.t)(t) * e,
            s = Object(f.t)(n),
            l = s * i - a * c;return [Object(f.e)(a * i + s * c, u * r + l * o), Object(f.c)(l * r - u * o)];
      }, e;
    }n.b = o;var a = e(147),
        f = e(3);r.invert = r, n.a = function (t) {
      function n(n) {
        return n = t(n[0] * f.r, n[1] * f.r), n[0] *= f.h, n[1] *= f.h, n;
      }return t = o(t[0] * f.r, t[1] * f.r, t.length > 2 ? t[2] * f.r : 0), n.invert = function (n) {
        return n = t.invert(n[0] * f.r, n[1] * f.r), n[0] *= f.h, n[1] *= f.h, n;
      }, n;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return function (n) {
        var e = new o();for (var r in t) {
          e[r] = t[r];
        }return e.stream = n, e;
      };
    }function o() {}n.b = r, n.a = function (t) {
      return { stream: r(t) };
    }, o.prototype = { constructor: o, point: function point(t, n) {
        this.stream.point(t, n);
      }, sphere: function sphere() {
        this.stream.sphere();
      }, lineStart: function lineStart() {
        this.stream.lineStart();
      }, lineEnd: function lineEnd() {
        this.stream.lineEnd();
      }, polygonStart: function polygonStart() {
        this.stream.polygonStart();
      }, polygonEnd: function polygonEnd() {
        this.stream.polygonEnd();
      } };
  }, function (t, n, e) {
    "use strict";
    var r = e(1);n.a = function (t, n, e, o, i, c, u, a) {
      function f(f, s) {
        if (!s) return [t * f / r.s, 0];var l = s * s,
            h = t + l * (n + l * (e + l * o)),
            p = s * (i - 1 + l * (c - a + l * u)),
            b = (h * h + p * p) / (2 * p),
            v = f * Object(r.e)(h / b) / r.s;return [b * Object(r.y)(v), s * (1 + l * a) + b * (1 - Object(r.h)(v))];
      }return arguments.length < 8 && (a = 0), f.invert = function (f, s) {
        var l,
            h,
            p = r.s * f / t,
            b = s,
            v = 50;do {
          var g = b * b,
              d = t + g * (n + g * (e + g * o)),
              j = b * (i - 1 + g * (c - a + g * u)),
              O = d * d + j * j,
              y = 2 * j,
              m = O / y,
              x = m * m,
              _ = Object(r.e)(d / m) / r.s,
              w = p * _,
              E = d * d,
              M = (2 * n + g * (4 * e + 6 * g * o)) * b,
              S = i + g * (3 * c + 5 * g * u),
              T = (2 * (d * M + j * (S - 1)) * y - O * (2 * (S - 1))) / (y * y),
              P = Object(r.h)(w),
              k = Object(r.y)(w),
              A = m * P,
              C = m * k,
              B = p / r.s * (1 / Object(r.B)(1 - E / x)) * (M * m - d * T) / x,
              R = C - f,
              N = b * (1 + g * a) + m - A - s,
              q = T * k + A * B,
              z = A * _,
              L = 1 + T - (T * P - C * B),
              F = C * _,
              I = q * F - L * z;if (!I) break;p -= l = (N * q - R * L) / I, b -= h = (R * F - N * z) / I;
        } while ((Object(r.a)(l) > r.k || Object(r.a)(h) > r.k) && --v > 0);return [p, b];
      }, f;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var o,
          i,
          a = n.edges,
          f = a.length,
          s = { type: "MultiPoint", coordinates: n.face },
          l = n.face.filter(function (t) {
        return 90 !== Object(u.a)(t[1]);
      }),
          h = Object(c.geoBounds)({ type: "MultiPoint", coordinates: l }),
          p = !1,
          b = -1,
          v = h[1][0] - h[0][0],
          g = 180 === v || 360 === v ? [(h[0][0] + h[1][0]) / 2, (h[0][1] + h[1][1]) / 2] : Object(c.geoCentroid)(s);if (e) for (; ++b < f && a[b] !== e;) {}++b;for (var d = 0; d < f; ++d) {
        i = a[(d + b) % f], Array.isArray(i) ? (p || (t.point((o = Object(c.geoInterpolate)(i[0], g)(u.k))[0], o[1]), p = !0), t.point((o = Object(c.geoInterpolate)(i[1], g)(u.k))[0], o[1])) : (p = !1, i !== e && r(t, i, n));
      }
    }function o(t, n) {
      return t && n && t[0] === n[0] && t[1] === n[1];
    }function i(t) {
      return t.project.invert || t.children && t.children.some(i);
    }var c = e(0),
        u = e(1),
        a = e(389);n.a = function (t, n, e) {
      function f(t, n) {
        if (t.edges = function (t) {
          for (var n = t.length, e = [], r = t[n - 1], o = 0; o < n; ++o) {
            e.push([r, r = t[o]]);
          }return e;
        }(t.face), n.face) {
          var e = t.shared = function (t, n) {
            for (var e, r, o = t.length, i = null, c = 0; c < o; ++c) {
              e = t[c];for (var u = n.length; --u >= 0;) {
                if (r = n[u], e[0] === r[0] && e[1] === r[1]) {
                  if (i) return [i, e];i = e;
                }
              }
            }
          }(t.face, n.face),
              r = Object(a.a)(e.map(n.project), e.map(t.project));t.transform = n.transform ? Object(a.c)(n.transform, r) : r;for (var i = n.edges, c = 0, u = i.length; c < u; ++c) {
            o(e[0], i[c][1]) && o(e[1], i[c][0]) && (i[c] = t), o(e[0], i[c][0]) && o(e[1], i[c][1]) && (i[c] = t);
          }for (c = 0, u = (i = t.edges).length; c < u; ++c) {
            o(e[0], i[c][0]) && o(e[1], i[c][1]) && (i[c] = n), o(e[0], i[c][1]) && o(e[1], i[c][0]) && (i[c] = n);
          }
        } else t.transform = n.transform;return t.children && t.children.forEach(function (n) {
          f(n, t);
        }), t;
      }function s(t, e) {
        var r,
            o = n(t, e),
            i = o.project([t * u.j, e * u.j]);return (r = o.transform) ? [r[0] * i[0] + r[1] * i[1] + r[2], -(r[3] * i[0] + r[4] * i[1] + r[5])] : (i[1] = -i[1], i);
      }function l(t, e) {
        var r = t.project.invert,
            o = t.transform,
            i = e;if (o && (i = [(o = Object(a.b)(o))[0] * i[0] + o[1] * i[1] + o[2], o[3] * i[0] + o[4] * i[1] + o[5]]), r && t === function (t) {
          return n(t[0] * u.v, t[1] * u.v);
        }(c = r(i))) return c;for (var c, f = t.children, s = 0, h = f && f.length; s < h; ++s) {
          if (c = l(f[s], e)) return c;
        }
      }e = null == e ? -u.s / 6 : e, f(t, { transform: [Object(u.h)(e), Object(u.y)(e), 0, -Object(u.y)(e), Object(u.h)(e), 0] }), i(t) && (s.invert = function (n, e) {
        var r = l(t, [n, -e]);return r && (r[0] *= u.v, r[1] *= u.v, r);
      });var h = Object(c.geoProjection)(s),
          p = h.stream;return h.stream = function (n) {
        var e = h.rotate(),
            o = p(n),
            i = (h.rotate([0, 0]), p(n));return h.rotate(e), o.sphere = function () {
          i.polygonStart(), i.lineStart(), r(i, t), i.lineEnd(), i.polygonEnd();
        }, o;
      }, h;
    };
  }, function (t, n, e) {
    function r(t) {
      var n = -1,
          e = null == t ? 0 : t.length;for (this.clear(); ++n < e;) {
        var r = t[n];this.set(r[0], r[1]);
      }
    }var o = e(415),
        i = e(416),
        c = e(417),
        u = e(418),
        a = e(419);r.prototype.clear = o, r.prototype.delete = i, r.prototype.get = c, r.prototype.has = u, r.prototype.set = a, t.exports = r;
  }, function (t, n, e) {
    var r = e(55);t.exports = function (t, n) {
      for (var e = t.length; e--;) {
        if (r(t[e][0], n)) return e;
      }return -1;
    };
  }, function (t, n, e) {
    var r = e(24)(Object, "create");t.exports = r;
  }, function (t, n, e) {
    var r = e(433);t.exports = function (t, n) {
      var e = t.__data__;return r(n) ? e["string" == typeof n ? "string" : "hash"] : e.map;
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = -1,
          e = Array(t.size);return t.forEach(function (t) {
        e[++n] = t;
      }), e;
    };
  }, function (t, n, e) {
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        o = e(465),
        i = e(472),
        c = e(37),
        u = e(8),
        a = e(479);t.exports = function (t) {
      return "function" == typeof t ? t : null == t ? c : "object" == (void 0 === t ? "undefined" : r(t)) ? u(t) ? i(t[0], t[1]) : o(t) : a(t);
    };
  }, function (t, n, e) {
    var r = e(8),
        o = e(107),
        i = e(474),
        c = e(199);t.exports = function (t, n) {
      return r(t) ? t : o(t, n) ? [t] : i(c(t));
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      for (var e = -1, r = null == t ? 0 : t.length, o = Array(r); ++e < r;) {
        o[e] = n(t[e], e, t);
      }return o;
    };
  }, function (t, n, e) {
    var r = e(489),
        o = e(492)(function (t, n) {
      return null == t ? {} : r(t, n);
    });t.exports = o;
  }, function (t, n, e) {
    function r(t, n, e, c, u) {
      var a = -1,
          f = t.length;for (e || (e = i), u || (u = []); ++a < f;) {
        var s = t[a];n > 0 && e(s) ? n > 1 ? r(s, n - 1, e, c, u) : o(u, s) : c || (u[u.length] = s);
      }return u;
    }var o = e(101),
        i = e(494);t.exports = r;
  }, function (t, n) {
    t.exports = 1e-4;
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e, r, o) {
      for (var i, c = t.children, u = -1, a = c.length, f = t.value && (o - e) / t.value; ++u < a;) {
        (i = c[u]).x0 = n, i.x1 = r, i.y0 = e, i.y1 = e += i.value * f;
      }
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }r.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._point = 0;
      }, lineEnd: function lineEnd() {
        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
            this._point = 2;default:
            this._context.lineTo(t, n);}
      } }, n.a = function (t) {
      return new r(t);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {};
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      t._context.bezierCurveTo((2 * t._x0 + t._x1) / 3, (2 * t._y0 + t._y1) / 3, (t._x0 + 2 * t._x1) / 3, (t._y0 + 2 * t._y1) / 3, (t._x0 + 4 * t._x1 + n) / 6, (t._y0 + 4 * t._y1 + e) / 6);
    }function o(t) {
      this._context = t;
    }e.d(n, "b", function () {
      return r;
    }), n.a = o, o.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 3:
            r(this, this._x1, this._y1);case 2:
            this._context.lineTo(this._x1, this._y1);}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
            this._point = 2;break;case 2:
            this._point = 3, this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);default:
            r(this, t, n);}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      t._context.bezierCurveTo(t._x1 + t._k * (t._x2 - t._x0), t._y1 + t._k * (t._y2 - t._y0), t._x2 + t._k * (t._x1 - n), t._y2 + t._k * (t._y1 - e), t._x2, t._y2);
    }function o(t, n) {
      this._context = t, this._k = (1 - n) / 6;
    }e.d(n, "b", function () {
      return r;
    }), n.a = o, o.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 2:
            this._context.lineTo(this._x2, this._y2);break;case 3:
            r(this, this._x1, this._y1);}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
            this._point = 2, this._x1 = t, this._y1 = n;break;case 2:
            this._point = 3;default:
            r(this, t, n);}this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
      } };(function t(n) {
      function e(t) {
        return new o(t, n);
      }return e.tension = function (n) {
        return t(+n);
      }, e;
    })(0);
  }, function (t, n, e) {
    var r = e(136);t.exports = function (t, n, e) {
      "__proto__" == n && r ? r(t, n, { configurable: !0, enumerable: !0, value: e, writable: !0 }) : t[n] = e;
    };
  }, function (t, n, e) {
    var r = e(37),
        o = e(139),
        i = e(140);t.exports = function (t, n) {
      return i(o(t, n, r), t + "");
    };
  }, function (t, n) {
    var e = 9007199254740991;t.exports = function (t) {
      return "number" == typeof t && t > -1 && t % 1 == 0 && t <= e;
    };
  }, function (t, n, e) {
    var r = e(286),
        o = e(15),
        i = Object.prototype,
        c = i.hasOwnProperty,
        u = i.propertyIsEnumerable,
        a = r(function () {
      return arguments;
    }()) ? r : function (t) {
      return o(t) && c.call(t, "callee") && !u.call(t, "callee");
    };t.exports = a;
  }, function (t, n, e) {
    (function (t) {
      var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
        return typeof t === "undefined" ? "undefined" : _typeof(t);
      } : function (t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
      },
          o = e(13),
          i = e(287),
          c = "object" == r(n) && n && !n.nodeType && n,
          u = c && "object" == r(t) && t && !t.nodeType && t,
          a = u && u.exports === c ? o.Buffer : void 0,
          f = (a ? a.isBuffer : void 0) || i;t.exports = f;
    }).call(n, e(83)(t));
  }, function (t, n) {
    t.exports = function (t) {
      return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", { enumerable: !0, get: function get() {
          return t.l;
        } }), Object.defineProperty(t, "id", { enumerable: !0, get: function get() {
          return t.i;
        } }), t.webpackPolyfill = 1), t;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return function (n) {
        return t(n);
      };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r) {
      function l(o, i) {
        return t <= o && o <= e && n <= i && i <= r;
      }function h(o, i, c, u) {
        var a = 0,
            f = 0;if (null == o || (a = p(o, c)) !== (f = p(i, c)) || v(o, i) < 0 ^ c > 0) do {
          u.point(0 === a || 3 === a ? t : e, a > 1 ? r : n);
        } while ((a = (a + c + 4) % 4) !== f);else u.point(i[0], i[1]);
      }function p(r, i) {
        return Object(o.a)(r[0] - t) < o.i ? i > 0 ? 0 : 3 : Object(o.a)(r[0] - e) < o.i ? i > 0 ? 2 : 1 : Object(o.a)(r[1] - n) < o.i ? i > 0 ? 1 : 0 : i > 0 ? 3 : 2;
      }function b(t, n) {
        return v(t.x, n.x);
      }function v(t, n) {
        var e = p(t, 1),
            r = p(n, 1);return e !== r ? e - r : 0 === e ? n[1] - t[1] : 1 === e ? t[0] - n[0] : 2 === e ? t[1] - n[1] : n[0] - t[0];
      }return function (o) {
        function p(t, n) {
          l(t, n) && S.point(t, n);
        }function v(o, i) {
          var u = l(o, i);if (d && j.push([o, i]), E) O = o, y = i, m = u, E = !1, u && (S.lineStart(), S.point(o, i));else if (u && w) S.point(o, i);else {
            var a = [x = Math.max(s, Math.min(f, x)), _ = Math.max(s, Math.min(f, _))],
                h = [o = Math.max(s, Math.min(f, o)), i = Math.max(s, Math.min(f, i))];Object(c.a)(a, h, t, n, e, r) ? (w || (S.lineStart(), S.point(a[0], a[1])), S.point(h[0], h[1]), u || S.lineEnd(), M = !1) : u && (S.lineStart(), S.point(o, i), M = !1);
          }x = o, _ = i, w = u;
        }var g,
            d,
            j,
            O,
            y,
            m,
            x,
            _,
            w,
            E,
            M,
            S = o,
            T = Object(i.a)(),
            P = { point: p, lineStart: function lineStart() {
            P.point = v, d && d.push(j = []), E = !0, w = !1, x = _ = NaN;
          }, lineEnd: function lineEnd() {
            g && (v(O, y), m && w && T.rejoin(), g.push(T.result())), P.point = p, w && S.lineEnd();
          }, polygonStart: function polygonStart() {
            S = T, g = [], d = [], M = !0;
          }, polygonEnd: function polygonEnd() {
            var n = function () {
              for (var n = 0, e = 0, o = d.length; e < o; ++e) {
                for (var i, c, u = d[e], a = 1, f = u.length, s = u[0], l = s[0], h = s[1]; a < f; ++a) {
                  i = l, c = h, l = (s = u[a])[0], h = s[1], c <= r ? h > r && (l - i) * (r - c) > (h - c) * (t - i) && ++n : h <= r && (l - i) * (r - c) < (h - c) * (t - i) && --n;
                }
              }return n;
            }(),
                e = M && n,
                i = (g = Object(a.b)(g)).length;(e || i) && (o.polygonStart(), e && (o.lineStart(), h(null, null, 1, o), o.lineEnd()), i && Object(u.a)(g, b, n, h, o), o.polygonEnd()), S = o, g = d = j = null;
          } };return P;
      };
    }n.a = r;var o = e(3),
        i = e(148),
        c = e(295),
        u = e(149),
        a = e(14),
        f = 1e9,
        s = -f;n.b = function () {
      var t,
          n,
          e,
          o = 0,
          i = 0,
          c = 960,
          u = 500;return e = { stream: function stream(e) {
          return t && n === e ? t : t = r(o, i, c, u)(n = e);
        }, extent: function extent(r) {
          return arguments.length ? (o = +r[0][0], i = +r[0][1], c = +r[1][0], u = +r[1][1], t = n = null, e) : [[o, i], [c, u]];
        } };
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(39);n.a = function (t, n, e) {
      if (null == e && (e = r.a), o = t.length) {
        if ((n = +n) <= 0 || o < 2) return +e(t[0], 0, t);if (n >= 1) return +e(t[o - 1], o - 1, t);var o,
            i = (o - 1) * n,
            c = Math.floor(i),
            u = +e(t[c], c, t);return u + (+e(t[c + 1], c + 1, t) - u) * (i - c);
      }
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(t, n) {
        var e = Object(o.u)(u - 2 * i * Object(o.t)(n)) / i;return [e * Object(o.t)(t *= i), a - e * Object(o.g)(t)];
      }var r = Object(o.t)(t),
          i = (r + Object(o.t)(n)) / 2;if (Object(o.a)(i) < o.i) return Object(c.a)(t);var u = 1 + r * (2 * i - r),
          a = Object(o.u)(u) / i;return e.invert = function (t, n) {
        var e = a - n;return [Object(o.e)(t, Object(o.a)(e)) / i * Object(o.s)(e), Object(o.c)((u - (t * t + e * e) * i * i) / (2 * i))];
      }, e;
    }n.a = r;var o = e(3),
        i = e(89),
        c = e(324);n.b = function () {
      return Object(i.a)(r).scale(155.424).center([0, 33.6442]);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      var n = 0,
          e = r.o / 3,
          i = Object(o.b)(t),
          c = i(n, e);return c.parallels = function (t) {
        return arguments.length ? i(n = t[0] * r.r, e = t[1] * r.r) : [n * r.h, e * r.h];
      }, c;
    };var r = e(3),
        o = e(16);
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r = n[1][0] - n[0][0],
          c = n[1][1] - n[0][1],
          u = t.clipExtent && t.clipExtent();t.scale(150).translate([0, 0]), null != u && t.clipExtent(null), Object(o.a)(e, t.stream(i.a));var a = i.a.result(),
          f = Math.min(r / (a[1][0] - a[0][0]), c / (a[1][1] - a[0][1])),
          s = +n[0][0] + (r - f * (a[1][0] + a[0][0])) / 2,
          l = +n[0][1] + (c - f * (a[1][1] + a[0][1])) / 2;return null != u && t.clipExtent(u), t.scale(150 * f).translate([s, l]);
    }n.a = r, n.b = function (t, n, e) {
      return r(t, [[0, 0], n], e);
    };var o = e(25),
        i = e(166);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t, Object(i.n)(Object(i.v)((i.l + n) / 2))];
    }function o(t) {
      function n() {
        var n = i.o * l(),
            u = f(Object(c.a)(f.rotate()).invert([0, 0]));return p(null == b ? [[u[0] - n, u[1] - n], [u[0] + n, u[1] + n]] : t === r ? [[Math.max(u[0] - n, b), e], [Math.min(u[0] + n, o), a]] : [[b, Math.max(u[1] - n, e)], [o, Math.min(u[1] + n, a)]]);
      }var e,
          o,
          a,
          f = Object(u.a)(t),
          s = f.center,
          l = f.scale,
          h = f.translate,
          p = f.clipExtent,
          b = null;return f.scale = function (t) {
        return arguments.length ? (l(t), n()) : l();
      }, f.translate = function (t) {
        return arguments.length ? (h(t), n()) : h();
      }, f.center = function (t) {
        return arguments.length ? (s(t), n()) : s();
      }, f.clipExtent = function (t) {
        return arguments.length ? (null == t ? b = e = o = a = null : (b = +t[0][0], e = +t[0][1], o = +t[1][0], a = +t[1][1]), n()) : null == b ? null : [[b, e], [o, a]];
      }, n();
    }n.c = r, n.b = o;var i = e(3),
        c = e(58),
        u = e(16);r.invert = function (t, n) {
      return [t, 2 * Object(i.d)(Object(i.k)(n)) - i.l];
    }, n.a = function () {
      return o(r).scale(961 / i.w);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.B)(1 - Object(i.y)(n));return [2 / i.E * t * e, i.E * (1 - e)];
    }n.a = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = (e = n / i.E - 1) * e;return [e > 0 ? t * Object(i.B)(i.s / e) / 2 : 0, Object(i.e)(1 - e)];
    }, n.b = function () {
      return Object(o.geoProjection)(r).scale(95.6464).center([0, 30]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return n > -u ? (t = Object(i.d)(t, n), t[1] += a, t) : Object(c.b)(t, n);
    }e.d(n, "b", function () {
      return u;
    }), e.d(n, "d", function () {
      return a;
    }), n.c = r;var o = e(0),
        i = e(22),
        c = e(41),
        u = .7109889596207567,
        a = .0528035274542;r.invert = function (t, n) {
      return n > -u ? i.d.invert(t, n - a) : c.b.invert(t, n);
    }, n.a = function () {
      return Object(o.geoProjection)(r).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];n.a = [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (t) {
      return t.map(function (t) {
        return r[t];
      });
    });
  }, function (t, n, e) {
    "use strict";
    var r = e(0),
        o = e(1);n.a = function (t) {
      function n(n, r) {
        var i = Object(o.a)(n) < o.o,
            c = t(i ? n : n > 0 ? n - o.s : n + o.s, r),
            u = (c[0] - c[1]) * o.C,
            a = (c[0] + c[1]) * o.C;if (i) return [u, a];var f = e * o.C,
            s = u > 0 ^ a > 0 ? -1 : 1;return [s * u - Object(o.x)(a) * f, s * a - Object(o.x)(u) * f];
      }var e = t(o.o, 0)[0] - t(-o.o, 0)[0];return t.invert && (n.invert = function (n, r) {
        var i = (n + r) * o.C,
            c = (r - n) * o.C,
            u = Object(o.a)(i) < .5 * e && Object(o.a)(c) < .5 * e;if (!u) {
          var a = e * o.C,
              f = i > 0 ^ c > 0 ? -1 : 1,
              s = -f * n + (c > 0 ? 1 : -1) * a,
              l = -f * r + (i > 0 ? 1 : -1) * a;i = (-s - l) * o.C, c = (s - l) * o.C;
        }var h = t.invert(i, c);return u || (h[0] += i > 0 ? o.s : -o.s), h;
      }), Object(r.geoProjection)(n).rotate([-90, -90, 45]).clipAngle(179.999);
    };
  }, function (t, n, e) {
    function r(t) {
      var n = this.__data__ = new o(t);this.size = n.size;
    }var o = e(62),
        i = e(420),
        c = e(421),
        u = e(422),
        a = e(423),
        f = e(424);r.prototype.clear = i, r.prototype.delete = c, r.prototype.get = u, r.prototype.has = a, r.prototype.set = f, t.exports = r;
  }, function (t, n, e) {
    var r = e(24)(e(13), "Map");t.exports = r;
  }, function (t, n, e) {
    function r(t) {
      var n = -1,
          e = null == t ? 0 : t.length;for (this.clear(); ++n < e;) {
        var r = t[n];this.set(r[0], r[1]);
      }
    }var o = e(425),
        i = e(432),
        c = e(434),
        u = e(435),
        a = e(436);r.prototype.clear = o, r.prototype.delete = i, r.prototype.get = c, r.prototype.has = u, r.prototype.set = a, t.exports = r;
  }, function (t, n, e) {
    var r = e(142),
        o = e(440),
        i = e(20);t.exports = function (t) {
      return i(t) ? r(t, !0) : o(t);
    };
  }, function (t, n, e) {
    var r = e(445),
        o = e(184),
        i = Object.prototype.propertyIsEnumerable,
        c = Object.getOwnPropertySymbols,
        u = c ? function (t) {
      return null == t ? [] : (t = Object(t), r(c(t), function (n) {
        return i.call(t, n);
      }));
    } : o;t.exports = u;
  }, function (t, n) {
    t.exports = function (t, n) {
      for (var e = -1, r = n.length, o = t.length; ++e < r;) {
        t[o + e] = n[e];
      }return t;
    };
  }, function (t, n, e) {
    var r = e(144)(Object.getPrototypeOf, Object);t.exports = r;
  }, function (t, n, e) {
    var r = e(190);t.exports = function (t) {
      var n = new t.constructor(t.byteLength);return new r(n).set(new r(t)), n;
    };
  }, function (t, n, e) {
    function r(t) {
      var n = -1,
          e = null == t ? 0 : t.length;for (this.__data__ = new o(); ++n < e;) {
        this.add(t[n]);
      }
    }var o = e(98),
        i = e(467),
        c = e(468);r.prototype.add = r.prototype.push = i, r.prototype.has = c, t.exports = r;
  }, function (t, n) {
    t.exports = function (t, n) {
      return t.has(n);
    };
  }, function (t, n, e) {
    var r = e(68),
        o = e(44);t.exports = function (t, n) {
      for (var e = 0, i = (n = r(n, t)).length; null != t && e < i;) {
        t = t[o(n[e++])];
      }return e && e == i ? t : void 0;
    };
  }, function (t, n, e) {
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        o = e(8),
        i = e(43),
        c = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        u = /^\w*$/;t.exports = function (t, n) {
      if (o(t)) return !1;var e = void 0 === t ? "undefined" : r(t);return !("number" != e && "symbol" != e && "boolean" != e && null != t && !i(t)) || u.test(t) || !c.test(t) || null != n && t in Object(n);
    };
  }, function (t, n, e) {
    var r = e(182),
        o = e(495);t.exports = function (t) {
      if (Array.isArray(t)) return t.map(function (t) {
        return r(t);
      });if ("[object Object]" === {}.toString.call(t)) {
        var n = {};for (var e in t) {
          n[e] = t[e];
        }return n;
      }return o(t);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t > f.o ? t - f.w : t < -f.o ? t + f.w : t, n];
    }function o(t, n, e) {
      return (t %= f.w) ? n || e ? Object(a.a)(c(t), u(n, e)) : c(t) : n || e ? u(n, e) : r;
    }function i(t) {
      return function (n, e) {
        return n += t, [n > f.o ? n - f.w : n < -f.o ? n + f.w : n, e];
      };
    }function c(t) {
      var n = i(t);return n.invert = i(-t), n;
    }function u(t, n) {
      function e(t, n) {
        var e = Object(f.g)(n),
            u = Object(f.g)(t) * e,
            a = Object(f.t)(t) * e,
            s = Object(f.t)(n),
            l = s * r + u * o;return [Object(f.e)(a * i - l * c, u * r - s * o), Object(f.c)(l * i + a * c)];
      }var r = Object(f.g)(t),
          o = Object(f.t)(t),
          i = Object(f.g)(n),
          c = Object(f.t)(n);return e.invert = function (t, n) {
        var e = Object(f.g)(n),
            u = Object(f.g)(t) * e,
            a = Object(f.t)(t) * e,
            s = Object(f.t)(n),
            l = s * i - a * c;return [Object(f.e)(a * i + s * c, u * r + l * o), Object(f.c)(l * r - u * o)];
      }, e;
    }n.b = o;var a = e(208),
        f = e(4);r.invert = r, n.a = function (t) {
      function n(n) {
        return n = t(n[0] * f.r, n[1] * f.r), n[0] *= f.h, n[1] *= f.h, n;
      }return t = o(t[0] * f.r, t[1] * f.r, t.length > 2 ? t[2] * f.r : 0), n.invert = function (n) {
        return n = t.invert(n[0] * f.r, n[1] * f.r), n[0] *= f.h, n[1] *= f.h, n;
      }, n;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(t, n) {
        var e = Object(o.u)(c - 2 * i * Object(o.t)(n)) / i;return [e * Object(o.t)(t *= i), u - e * Object(o.g)(t)];
      }var r = Object(o.t)(t),
          i = (r + Object(o.t)(n)) / 2,
          c = 1 + r * (2 * i - r),
          u = Object(o.u)(c) / i;return e.invert = function (t, n) {
        var e = u - n;return [Object(o.e)(t, e) / i, Object(o.c)((c - (t * t + e * e) * i * i) / (2 * i))];
      }, e;
    }n.a = r;var o = e(4),
        i = e(111);n.b = function () {
      return Object(i.a)(r).scale(155.424).center([0, 33.6442]);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      var n = 0,
          e = r.o / 3,
          i = Object(o.b)(t),
          c = i(n, e);return c.parallels = function (t) {
        return arguments.length ? i(n = t[0] * r.r, e = t[1] * r.r) : [n * r.h, e * r.h];
      }, c;
    };var r = e(4),
        o = e(17);
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n() {}var e = n.prototype = Object.create(o.prototype);for (var r in t) {
        e[r] = t[r];
      }return function (t) {
        var e = new n();return e.stream = t, e;
      };
    }function o() {}n.b = r, n.a = function (t) {
      return { stream: r(t) };
    }, o.prototype = { point: function point(t, n) {
        this.stream.point(t, n);
      }, sphere: function sphere() {
        this.stream.sphere();
      }, lineStart: function lineStart() {
        this.stream.lineStart();
      }, lineEnd: function lineEnd() {
        this.stream.lineEnd();
      }, polygonStart: function polygonStart() {
        this.stream.polygonStart();
      }, polygonEnd: function polygonEnd() {
        this.stream.polygonEnd();
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t, Object(c.n)(Object(c.v)((c.l + n) / 2))];
    }function o(t) {
      var n,
          e = Object(i.a)(t),
          r = e.scale,
          o = e.translate,
          u = e.clipExtent;return e.scale = function (t) {
        return arguments.length ? (r(t), n && e.clipExtent(null), e) : r();
      }, e.translate = function (t) {
        return arguments.length ? (o(t), n && e.clipExtent(null), e) : o();
      }, e.clipExtent = function (t) {
        if (!arguments.length) return n ? null : u();if (n = null == t) {
          var i = c.o * r(),
              a = o();t = [[a[0] - i, a[1] - i], [a[0] + i, a[1] + i]];
        }return u(t), e;
      }, e.clipExtent(null);
    }n.c = r, n.b = o;var i = e(17),
        c = e(4);r.invert = function (t, n) {
      return [t, 2 * Object(c.d)(Object(c.k)(n)) - c.l];
    }, n.a = function () {
      return o(r).scale(961 / c.w);
    };
  }, function (t, n, e) {
    var r = e(525),
        o = e(10);t.exports = function (t) {
      return null == t ? [] : r(t, o(t));
    };
  }, function (t, n, e) {
    var r = e(23);t.exports = function (t, n) {
      var e,
          o,
          i = r(t),
          c = 0;if (2 === n) for (o = 0; o < t.length; o++) {
        c += (e = t[o] - i) * e;
      } else for (o = 0; o < t.length; o++) {
        c += Math.pow(t[o] - i, n);
      }return c;
    };
  }, function (t, n, e) {
    function r(t, n, e, r) {
      n % 1 == 0 ? u(t, n, e, r) : (n = Math.floor(n), u(t, n, e, r), u(t, n + 1, n + 1, r));
    }function o(t, n) {
      return t - n;
    }function i(t, n) {
      var e = t * n;return 1 === n ? t - 1 : 0 === n ? 0 : e % 1 != 0 ? Math.ceil(e) - 1 : t % 2 == 0 ? e - .5 : e;
    }var c = e(117),
        u = e(543);t.exports = function (t, n) {
      var e = t.slice();if (Array.isArray(n)) {
        !function (t, n) {
          for (var e = [0], c = 0; c < n.length; c++) {
            e.push(i(t.length, n[c]));
          }e.push(t.length - 1), e.sort(o);for (var u = [0, e.length - 1]; u.length;) {
            var a = Math.ceil(u.pop()),
                f = Math.floor(u.pop());if (!(a - f <= 1)) {
              var s = Math.floor((f + a) / 2);r(t, e[s], e[f], e[a]), u.push(f, s, s, a);
            }
          }
        }(e, n);for (var u = [], a = 0; a < n.length; a++) {
          u[a] = c(e, n[a]);
        }return u;
      }return r(e, i(e.length, n), 0, e.length - 1), c(e, n);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      var e = t.length * n;if (0 === t.length) throw new Error("quantile requires at least one data point.");if (n < 0 || n > 1) throw new Error("quantiles must be between 0 and 1");return 1 === n ? t[t.length - 1] : 0 === n ? t[0] : e % 1 != 0 ? t[Math.ceil(e) - 1] : t.length % 2 == 0 ? (t[e - 1] + t[e]) / 2 : t[e];
    };
  }, function (t, n, e) {
    var r = e(115);t.exports = function (t) {
      if (t.length < 2) throw new Error("sampleVariance requires at least two data points");return r(t, 2) / (t.length - 1);
    };
  }, function (t, n) {
    t.exports = { HIERARCHY: "hierarchy", GEO: "geo", GRAPH: "graph", TABLE: "table", GEO_GRATICULE: "geo-graticule", STATISTICS_METHODS: ["max", "mean", "median", "min", "mode", "product", "standardDeviation", "sum", "sumSimple", "variance"] };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return new Function("d", "return {" + t.map(function (t, n) {
        return JSON.stringify(t) + ": d[" + n + "]";
      }).join(",") + "}");
    }var o = {},
        i = {},
        c = 34,
        u = 10,
        a = 13;n.a = function (t) {
      function n(t, n) {
        function e() {
          if (b) return i;if (v) return v = !1, o;var n,
              e,
              r = h;if (t.charCodeAt(r) === c) {
            for (; h++ < s && t.charCodeAt(h) !== c || t.charCodeAt(++h) === c;) {}return (n = h) >= s ? b = !0 : (e = t.charCodeAt(h++)) === u ? v = !0 : e === a && (v = !0, t.charCodeAt(h) === u && ++h), t.slice(r + 1, n - 1).replace(/""/g, '"');
          }for (; h < s;) {
            if ((e = t.charCodeAt(n = h++)) === u) v = !0;else if (e === a) v = !0, t.charCodeAt(h) === u && ++h;else if (e !== l) continue;return t.slice(r, n);
          }return b = !0, t.slice(r, s);
        }var r,
            f = [],
            s = t.length,
            h = 0,
            p = 0,
            b = s <= 0,
            v = !1;for (t.charCodeAt(s - 1) === u && --s, t.charCodeAt(s - 1) === a && --s; (r = e()) !== i;) {
          for (var g = []; r !== o && r !== i;) {
            g.push(r), r = e();
          }n && null == (g = n(g, p++)) || f.push(g);
        }return f;
      }function e(n) {
        return n.map(f).join(t);
      }function f(t) {
        return null == t ? "" : s.test(t += "") ? '"' + t.replace(/"/g, '""') + '"' : t;
      }var s = new RegExp('["' + t + "\n\r]"),
          l = t.charCodeAt(0);return { parse: function parse(t, e) {
          var o,
              i,
              c = n(t, function (t, n) {
            if (o) return o(t, n - 1);i = t, o = e ? function (t, n) {
              var e = r(t);return function (r, o) {
                return n(e(r), o, t);
              };
            }(t, e) : r(t);
          });return c.columns = i || [], c;
        }, parseRows: n, format: function format(n, e) {
          return null == e && (e = function (t) {
            var n = Object.create(null),
                e = [];return t.forEach(function (t) {
              for (var r in t) {
                r in n || e.push(n[r] = r);
              }
            }), e;
          }(n)), [e.map(f).join(t)].concat(n.map(function (n) {
            return e.map(function (t) {
              return f(n[t]);
            }).join(t);
          })).join("\n");
        }, formatRows: function formatRows(t) {
          return t.map(e).join("\n");
        } };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e,
          r,
          i,
          a,
          f,
          s = new u(t),
          l = +t.value && (s.value = t.value),
          h = [s];for (null == n && (n = o); e = h.pop();) {
        if (l && (e.value = +e.data.value), (i = n(e.data)) && (f = i.length)) for (e.children = new Array(f), a = f - 1; a >= 0; --a) {
          h.push(r = e.children[a] = new u(i[a])), r.parent = e, r.depth = e.depth + 1;
        }
      }return s.eachBefore(c);
    }function o(t) {
      return t.children;
    }function i(t) {
      t.data = t.data.data;
    }function c(t) {
      var n = 0;do {
        t.height = n;
      } while ((t = t.parent) && t.height < ++n);
    }function u(t) {
      this.data = t, this.depth = this.height = 0, this.parent = null;
    }n.c = r, n.b = c, n.a = u;var a = e(593),
        f = e(594),
        s = e(595),
        l = e(596),
        h = e(597),
        p = e(598),
        b = e(599),
        v = e(600),
        g = e(601),
        d = e(602),
        j = e(603);u.prototype = r.prototype = { constructor: u, count: a.a, each: f.a, eachAfter: l.a, eachBefore: s.a, sum: h.a, sort: p.a, path: b.a, ancestors: v.a, descendants: g.a, leaves: d.a, links: j.a, copy: function copy() {
        return r(this).eachBefore(i);
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      if ("function" != typeof t) throw new Error();return t;
    }n.a = function (t) {
      return null == t ? null : r(t);
    }, n.b = r;
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r, c, u) {
      for (var a, f, s, l, h, p, b, v, g, d, j, O = [], y = n.children, m = 0, x = 0, _ = y.length, w = n.value; m < _;) {
        s = c - e, l = u - r;do {
          h = y[x++].value;
        } while (!h && x < _);for (p = b = h, j = h * h * (d = Math.max(l / s, s / l) / (w * t)), g = Math.max(b / j, j / p); x < _; ++x) {
          if (h += f = y[x].value, f < p && (p = f), f > b && (b = f), j = h * h * d, (v = Math.max(b / j, j / p)) > g) {
            h -= f;break;
          }g = v;
        }O.push(a = { value: h, dice: s < l, children: y.slice(m, x) }), a.dice ? Object(o.a)(a, e, r, c, w ? r += l * h / w : u) : Object(i.a)(a, e, r, w ? e += s * h / w : c, u), w -= h, m = x;
      }return O;
    }e.d(n, "b", function () {
      return c;
    }), n.c = r;var o = e(49),
        i = e(73),
        c = (1 + Math.sqrt(5)) / 2;n.a = function t(n) {
      function e(t, e, o, i, c) {
        r(n, t, e, o, i, c);
      }return e.ratio = function (n) {
        return t((n = +n) > 1 ? n : 1);
      }, e;
    }(c);
  }, function (t, n, e) {
    "use strict";
    var r = e(247);n.a = function (t) {
      if (null == t) return r.a;var n,
          e,
          o = t.scale[0],
          i = t.scale[1],
          c = t.translate[0],
          u = t.translate[1];return function (t, r) {
        r || (n = e = 0);var a = 2,
            f = t.length,
            s = new Array(f);for (s[0] = (n += t[0]) * o + c, s[1] = (e += t[1]) * i + u; a < f;) {
          s[a] = t[a], ++a;
        }return s;
      };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = n.id,
          r = n.bbox,
          i = null == n.properties ? {} : n.properties,
          c = o(t, n);return null == e && null == r ? { type: "Feature", properties: i, geometry: c } : null == r ? { type: "Feature", id: e, properties: i, geometry: c } : { type: "Feature", id: e, bbox: r, properties: i, geometry: c };
    }function o(t, n) {
      function e(t, n) {
        n.length && n.pop();for (var e = l[t < 0 ? ~t : t], r = 0, o = e.length; r < o; ++r) {
          n.push(s(e[r], r));
        }t < 0 && Object(i.a)(n, o);
      }function r(t) {
        return s(t);
      }function o(t) {
        for (var n = [], r = 0, o = t.length; r < o; ++r) {
          e(t[r], n);
        }return n.length < 2 && n.push(n[0]), n;
      }function u(t) {
        for (var n = o(t); n.length < 4;) {
          n.push(n[0]);
        }return n;
      }function a(t) {
        return t.map(u);
      }function f(t) {
        var n,
            e = t.type;switch (e) {case "GeometryCollection":
            return { type: e, geometries: t.geometries.map(f) };case "Point":
            n = r(t.coordinates);break;case "MultiPoint":
            n = t.coordinates.map(r);break;case "LineString":
            n = o(t.arcs);break;case "MultiLineString":
            n = t.arcs.map(o);break;case "Polygon":
            n = a(t.arcs);break;case "MultiPolygon":
            n = t.arcs.map(a);break;default:
            return null;}return { type: e, coordinates: n };
      }var s = Object(c.a)(t.transform),
          l = t.arcs;return f(n);
    }n.b = o;var i = e(615),
        c = e(124);n.a = function (t, n) {
      return "GeometryCollection" === n.type ? { type: "FeatureCollection", features: n.geometries.map(function (n) {
          return r(t, n);
        }) } : r(t, n);
    };
  }, function (t, n, e) {
    var r = e(19),
        o = e(15),
        i = "[object Number]";t.exports = function (t) {
      return "number" == typeof t || o(t) && r(t) == i;
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, e = t[0], r = t[1], o = [], i = e; i < r;) {
        o.push(i), i += n;
      }return o.push(r), o;
    };
  }, function (t, n, e) {
    var r = e(30).standardDeviation;t.exports = { silverman: function silverman(t) {
        var n = r(t),
            e = 4 * Math.pow(n, 5),
            o = 3 * t.length;return Math.pow(e / o, .2);
      } };
  }, function (t, n, e) {
    "use strict";
    function r() {}function o(t, n) {
      var e = new r();if (t instanceof r) t.each(function (t, n) {
        e.set(n, t);
      });else if (Array.isArray(t)) {
        var o,
            i = -1,
            c = t.length;if (null == n) for (; ++i < c;) {
          e.set(i, t[i]);
        } else for (; ++i < c;) {
          e.set(n(o = t[i], i, t), o);
        }
      } else if (t) for (var u in t) {
        e.set(u, t[u]);
      }return e;
    }e.d(n, "b", function () {
      return i;
    });var i = "$";r.prototype = o.prototype = { constructor: r, has: function has(t) {
        return i + t in this;
      }, get: function get(t) {
        return this[i + t];
      }, set: function set(t, n) {
        return this[i + t] = n, this;
      }, remove: function remove(t) {
        var n = i + t;return n in this && delete this[n];
      }, clear: function clear() {
        for (var t in this) {
          t[0] === i && delete this[t];
        }
      }, keys: function keys() {
        var t = [];for (var n in this) {
          n[0] === i && t.push(n.slice(1));
        }return t;
      }, values: function values() {
        var t = [];for (var n in this) {
          n[0] === i && t.push(this[n]);
        }return t;
      }, entries: function entries() {
        var t = [];for (var n in this) {
          n[0] === i && t.push({ key: n.slice(1), value: this[n] });
        }return t;
      }, size: function size() {
        var t = 0;for (var n in this) {
          n[0] === i && ++t;
        }return t;
      }, empty: function empty() {
        for (var t in this) {
          if (t[0] === i) return !1;
        }return !0;
      }, each: function each(t) {
        for (var n in this) {
          n[0] === i && t(this[n], n.slice(1), this);
        }
      } }, n.a = o;
  }, function (t, n, e) {
    "use strict";
    var r = e(29),
        o = e(31),
        i = e(74),
        c = e(131);n.a = function () {
      function t(t) {
        var o,
            i,
            c,
            l = t.length,
            h = !1;for (null == a && (s = f(c = Object(r.path)())), o = 0; o <= l; ++o) {
          !(o < l && u(i = t[o], o, t)) === h && ((h = !h) ? s.lineStart() : s.lineEnd()), h && s.point(+n(i, o, t), +e(i, o, t));
        }if (c) return s = null, c + "" || null;
      }var n = c.a,
          e = c.b,
          u = Object(o.a)(!0),
          a = null,
          f = i.a,
          s = null;return t.x = function (e) {
        return arguments.length ? (n = "function" == typeof e ? e : Object(o.a)(+e), t) : n;
      }, t.y = function (n) {
        return arguments.length ? (e = "function" == typeof n ? n : Object(o.a)(+n), t) : e;
      }, t.defined = function (n) {
        return arguments.length ? (u = "function" == typeof n ? n : Object(o.a)(!!n), t) : u;
      }, t.curve = function (n) {
        return arguments.length ? (f = n, null != a && (s = f(a)), t) : f;
      }, t.context = function (n) {
        return arguments.length ? (null == n ? a = s = null : s = f(a = n), t) : a;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t[0];
    }, n.b = function (t) {
      return t[1];
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r = t._x1,
          o = t._y1,
          c = t._x2,
          u = t._y2;if (t._l01_a > i.f) {
        var a = 2 * t._l01_2a + 3 * t._l01_a * t._l12_a + t._l12_2a,
            f = 3 * t._l01_a * (t._l01_a + t._l12_a);r = (r * a - t._x0 * t._l12_2a + t._x2 * t._l01_2a) / f, o = (o * a - t._y0 * t._l12_2a + t._y2 * t._l01_2a) / f;
      }if (t._l23_a > i.f) {
        var s = 2 * t._l23_2a + 3 * t._l23_a * t._l12_a + t._l12_2a,
            l = 3 * t._l23_a * (t._l23_a + t._l12_a);c = (c * s + t._x1 * t._l23_2a - n * t._l12_2a) / l, u = (u * s + t._y1 * t._l23_2a - e * t._l12_2a) / l;
      }t._context.bezierCurveTo(r, o, c, u, t._x2, t._y2);
    }function o(t, n) {
      this._context = t, this._alpha = n;
    }e.d(n, "a", function () {
      return r;
    });var i = e(50),
        c = e(77);o.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 2:
            this._context.lineTo(this._x2, this._y2);break;case 3:
            this.point(this._x2, this._y2);}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        if (t = +t, n = +n, this._point) {
          var e = this._x2 - t,
              o = this._y2 - n;this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + o * o, this._alpha));
        }switch (this._point) {case 0:
            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
            this._point = 2;break;case 2:
            this._point = 3;default:
            r(this, t, n);}this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
      } };(function t(n) {
      function e(t) {
        return n ? new o(t, n) : new c.a(t, 0);
      }return e.alpha = function (n) {
        return t(+n);
      }, e;
    })(.5);
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      for (var n, e = 0, r = -1, o = t.length; ++r < o;) {
        (n = +t[r][1]) && (e += n);
      }return e;
    }n.b = r;var o = e(52);n.a = function (t) {
      var n = t.map(r);return Object(o.a)(t).sort(function (t, e) {
        return n[t] - n[e];
      });
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      this._ = null;
    }function o(t, n) {
      var e = n,
          r = n.R,
          o = e.U;o ? o.L === e ? o.L = r : o.R = r : t._ = r, r.U = o, e.U = r, e.R = r.L, e.R && (e.R.U = e), r.L = e;
    }function i(t, n) {
      var e = n,
          r = n.L,
          o = e.U;o ? o.L === e ? o.L = r : o.R = r : t._ = r, r.U = o, e.U = r, e.L = r.R, e.L && (e.L.U = e), r.R = e;
    }function c(t) {
      for (; t.L;) {
        t = t.L;
      }return t;
    }n.a = function (t) {
      t.U = t.C = t.L = t.R = t.P = t.N = null;
    }, r.prototype = { constructor: r, insert: function insert(t, n) {
        var e, r, u;if (t) {
          if (n.P = t, n.N = t.N, t.N && (t.N.P = n), t.N = n, t.R) {
            for (t = t.R; t.L;) {
              t = t.L;
            }t.L = n;
          } else t.R = n;e = t;
        } else this._ ? (t = c(this._), n.P = null, n.N = t, t.P = t.L = n, e = t) : (n.P = n.N = null, this._ = n, e = null);for (n.L = n.R = null, n.U = e, n.C = !0, t = n; e && e.C;) {
          e === (r = e.U).L ? (u = r.R) && u.C ? (e.C = u.C = !1, r.C = !0, t = r) : (t === e.R && (o(this, e), e = (t = e).U), e.C = !1, r.C = !0, i(this, r)) : (u = r.L) && u.C ? (e.C = u.C = !1, r.C = !0, t = r) : (t === e.L && (i(this, e), e = (t = e).U), e.C = !1, r.C = !0, o(this, r)), e = t.U;
        }this._.C = !1;
      }, remove: function remove(t) {
        t.N && (t.N.P = t.P), t.P && (t.P.N = t.N), t.N = t.P = null;var n,
            e,
            r,
            u = t.U,
            a = t.L,
            f = t.R;if (e = a ? f ? c(f) : a : f, u ? u.L === t ? u.L = e : u.R = e : this._ = e, a && f ? (r = e.C, e.C = t.C, e.L = a, a.U = e, e !== f ? (u = e.U, e.U = t.U, t = e.R, u.L = t, e.R = f, f.U = e) : (e.U = u, u = e, t = e.R)) : (r = t.C, t = e), t && (t.U = u), !r) if (t && t.C) t.C = !1;else {
          do {
            if (t === this._) break;if (t === u.L) {
              if ((n = u.R).C && (n.C = !1, u.C = !0, o(this, u), n = u.R), n.L && n.L.C || n.R && n.R.C) {
                n.R && n.R.C || (n.L.C = !1, n.C = !0, i(this, n), n = u.R), n.C = u.C, u.C = n.R.C = !1, o(this, u), t = this._;break;
              }
            } else if ((n = u.L).C && (n.C = !1, u.C = !0, i(this, u), n = u.L), n.L && n.L.C || n.R && n.R.C) {
              n.L && n.L.C || (n.R.C = !1, n.C = !0, o(this, n), n = u.L), n.C = u.C, u.C = n.L.C = !1, i(this, u), t = this._;break;
            }n.C = !0, t = u, u = u.U;
          } while (!t.C);t && (t.C = !1);
        }
      } }, n.b = r;
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r) {
      t[0] || t[1] ? t.left === e ? t[1] = r : t[0] = r : (t[0] = r, t.left = n, t.right = e);
    }function o(t, n, e, r, o) {
      var i,
          c = t[0],
          u = t[1],
          a = c[0],
          f = c[1],
          s = 0,
          l = 1,
          h = u[0] - a,
          p = u[1] - f;if (i = n - a, h || !(i > 0)) {
        if (i /= h, h < 0) {
          if (i < s) return;i < l && (l = i);
        } else if (h > 0) {
          if (i > l) return;i > s && (s = i);
        }if (i = r - a, h || !(i < 0)) {
          if (i /= h, h < 0) {
            if (i > l) return;i > s && (s = i);
          } else if (h > 0) {
            if (i < s) return;i < l && (l = i);
          }if (i = e - f, p || !(i > 0)) {
            if (i /= p, p < 0) {
              if (i < s) return;i < l && (l = i);
            } else if (p > 0) {
              if (i > l) return;i > s && (s = i);
            }if (i = o - f, p || !(i < 0)) {
              if (i /= p, p < 0) {
                if (i > l) return;i > s && (s = i);
              } else if (p > 0) {
                if (i < s) return;i < l && (l = i);
              }return !(s > 0 || l < 1) || (s > 0 && (t[0] = [a + s * h, f + s * p]), l < 1 && (t[1] = [a + l * h, f + l * p]), !0);
            }
          }
        }
      }
    }function i(t, n, e, r, o) {
      var i = t[1];if (i) return !0;var c,
          u,
          a = t[0],
          f = t.left,
          s = t.right,
          l = f[0],
          h = f[1],
          p = s[0],
          b = s[1],
          v = (l + p) / 2,
          g = (h + b) / 2;if (b === h) {
        if (v < n || v >= r) return;if (l > p) {
          if (a) {
            if (a[1] >= o) return;
          } else a = [v, e];i = [v, o];
        } else {
          if (a) {
            if (a[1] < e) return;
          } else a = [v, o];i = [v, e];
        }
      } else if (c = (l - p) / (b - h), u = g - c * v, c < -1 || c > 1) {
        if (l > p) {
          if (a) {
            if (a[1] >= o) return;
          } else a = [(e - u) / c, e];i = [(o - u) / c, o];
        } else {
          if (a) {
            if (a[1] < e) return;
          } else a = [(o - u) / c, o];i = [(e - u) / c, e];
        }
      } else if (h < b) {
        if (a) {
          if (a[0] >= r) return;
        } else a = [n, c * n + u];i = [r, c * r + u];
      } else {
        if (a) {
          if (a[0] < n) return;
        } else a = [r, c * r + u];i = [n, c * n + u];
      }return t[0] = a, t[1] = i, !0;
    }n.c = function (t, n, e, o) {
      var i = [null, null],
          u = c.e.push(i) - 1;return i.left = t, i.right = n, e && r(i, t, n, e), o && r(i, n, t, o), c.b[t.index].halfedges.push(u), c.b[n.index].halfedges.push(u), i;
    }, n.b = function (t, n, e) {
      var r = [n, e];return r.left = t, r;
    }, n.d = r, n.a = function (t, n, e, r) {
      for (var u, a = c.e.length; a--;) {
        i(u = c.e[a], t, n, e, r) && o(u, t, n, e, r) && (Math.abs(u[0][0] - u[1][0]) > c.f || Math.abs(u[0][1] - u[1][1]) > c.f) || delete c.e[a];
      }
    };var c = e(53);
  }, function (t, n, e) {
    var r = e(24),
        o = function () {
      try {
        var t = r(Object, "defineProperty");return t({}, "", {}), t;
      } catch (t) {}
    }();t.exports = o;
  }, function (t, n, e) {
    (function (n) {
      var e = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
        return typeof t === "undefined" ? "undefined" : _typeof(t);
      } : function (t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
      },
          r = "object" == (void 0 === n ? "undefined" : e(n)) && n && n.Object === Object && n;t.exports = r;
    }).call(n, e(274));
  }, function (t, n) {
    var e = Function.prototype.toString;t.exports = function (t) {
      if (null != t) {
        try {
          return e.call(t);
        } catch (t) {}try {
          return t + "";
        } catch (t) {}
      }return "";
    };
  }, function (t, n, e) {
    var r = e(281),
        o = Math.max;t.exports = function (t, n, e) {
      return n = o(void 0 === n ? t.length - 1 : n, 0), function () {
        for (var i = arguments, c = -1, u = o(i.length - n, 0), a = Array(u); ++c < u;) {
          a[c] = i[n + c];
        }c = -1;for (var f = Array(n + 1); ++c < n;) {
          f[c] = i[c];
        }return f[n] = e(a), r(t, this, f);
      };
    };
  }, function (t, n, e) {
    var r = e(282),
        o = e(284)(r);t.exports = o;
  }, function (t, n, e) {
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        o = e(55),
        i = e(20),
        c = e(56),
        u = e(12);t.exports = function (t, n, e) {
      if (!u(e)) return !1;var a = void 0 === n ? "undefined" : r(n);return !!("number" == a ? i(e) && c(n, e.length) : "string" == a && n in e) && o(e[n], t);
    };
  }, function (t, n, e) {
    var r = e(285),
        o = e(81),
        i = e(8),
        c = e(82),
        u = e(56),
        a = e(143),
        f = Object.prototype.hasOwnProperty;t.exports = function (t, n) {
      var e = i(t),
          s = !e && o(t),
          l = !e && !s && c(t),
          h = !e && !s && !l && a(t),
          p = e || s || l || h,
          b = p ? r(t.length, String) : [],
          v = b.length;for (var g in t) {
        !n && !f.call(t, g) || p && ("length" == g || l && ("offset" == g || "parent" == g) || h && ("buffer" == g || "byteLength" == g || "byteOffset" == g) || u(g, v)) || b.push(g);
      }return b;
    };
  }, function (t, n, e) {
    var r = e(288),
        o = e(84),
        i = e(289),
        c = i && i.isTypedArray,
        u = c ? o(c) : r;t.exports = u;
  }, function (t, n) {
    t.exports = function (t, n) {
      return function (e) {
        return t(n(e));
      };
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      j.point = i;
    }function o() {
      c(u, a);
    }function i(t, n) {
      j.point = c, u = t, a = n, t *= p.r, n *= p.r, f = t, s = Object(p.g)(n = n / 2 + p.q), l = Object(p.t)(n);
    }function c(t, n) {
      t *= p.r, n = (n *= p.r) / 2 + p.q;var e = t - f,
          r = e >= 0 ? 1 : -1,
          o = r * e,
          i = Object(p.g)(n),
          c = Object(p.t)(n),
          u = l * c,
          a = s * i + u * Object(p.g)(o),
          h = u * r * Object(p.t)(o);g.add(Object(p.e)(h, a)), f = t, s = i, l = c;
    }e.d(n, "a", function () {
      return g;
    }), e.d(n, "b", function () {
      return j;
    });var u,
        a,
        f,
        s,
        l,
        h = e(33),
        p = e(3),
        b = e(21),
        v = e(25),
        g = Object(h.a)(),
        d = Object(h.a)(),
        j = { point: b.a, lineStart: b.a, lineEnd: b.a, polygonStart: function polygonStart() {
        g.reset(), j.lineStart = r, j.lineEnd = o;
      }, polygonEnd: function polygonEnd() {
        var t = +g;d.add(t < 0 ? p.w + t : t), this.lineStart = this.lineEnd = this.point = b.a;
      }, sphere: function sphere() {
        d.add(p.w);
      } };n.c = function (t) {
      return d.reset(), Object(v.a)(t, j), 2 * d;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r, c, a) {
      if (e) {
        var f = Object(u.g)(n),
            s = Object(u.t)(n),
            l = r * e;null == c ? (c = n + r * u.w, a = n - l / 2) : (c = o(f, c), a = o(f, a), (r > 0 ? c < a : c > a) && (c += r * u.w));for (var h, p = c; r > 0 ? p > a : p < a; p -= l) {
          h = Object(i.g)([f, -s * Object(u.g)(p), -s * Object(u.t)(p)]), t.point(h[0], h[1]);
        }
      }
    }function o(t, n) {
      (n = Object(i.a)(n))[0] -= t, Object(i.e)(n);var e = Object(u.b)(-n[1]);return ((-n[2] < 0 ? -e : e) + u.w - u.i) % u.w;
    }n.a = r;var i = e(38),
        c = e(294),
        u = e(3),
        a = e(58);n.b = function () {
      function t() {
        var t = o.apply(this, arguments),
            c = i.apply(this, arguments) * u.r,
            l = f.apply(this, arguments) * u.r;return n = [], e = Object(a.b)(-t[0] * u.r, -t[1] * u.r, 0).invert, r(s, c, l, 1), t = { type: "Polygon", coordinates: [n] }, n = e = null, t;
      }var n,
          e,
          o = Object(c.a)([0, 0]),
          i = Object(c.a)(90),
          f = Object(c.a)(6),
          s = { point: function point(t, r) {
          n.push(t = e(t, r)), t[0] *= u.h, t[1] *= u.h;
        } };return t.center = function (n) {
        return arguments.length ? (o = "function" == typeof n ? n : Object(c.a)([+n[0], +n[1]]), t) : o;
      }, t.radius = function (n) {
        return arguments.length ? (i = "function" == typeof n ? n : Object(c.a)(+n), t) : i;
      }, t.precision = function (n) {
        return arguments.length ? (f = "function" == typeof n ? n : Object(c.a)(+n), t) : f;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      function e(e, r) {
        return e = t(e, r), n(e[0], e[1]);
      }return t.invert && n.invert && (e.invert = function (e, r) {
        return (e = n.invert(e, r)) && t.invert(e[0], e[1]);
      }), e;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(21);n.a = function () {
      var t,
          n = [];return { point: function point(n, e) {
          t.push([n, e]);
        }, lineStart: function lineStart() {
          n.push(t = []);
        }, lineEnd: r.a, rejoin: function rejoin() {
          n.length > 1 && n.push(n.pop().concat(n.shift()));
        }, result: function result() {
          var e = n;return n = [], t = null, e;
        } };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r) {
      this.x = t, this.z = n, this.o = e, this.e = r, this.v = !1, this.n = this.p = null;
    }function o(t) {
      if (n = t.length) {
        for (var n, e, r = 0, o = t[0]; ++r < n;) {
          o.n = e = t[r], e.p = o, o = e;
        }o.n = e = t[0], e.p = o;
      }
    }var i = e(150);n.a = function (t, n, e, c, u) {
      var a,
          f,
          s = [],
          l = [];if (t.forEach(function (t) {
        if (!((n = t.length - 1) <= 0)) {
          var n,
              e,
              o = t[0],
              c = t[n];if (Object(i.a)(o, c)) {
            for (u.lineStart(), a = 0; a < n; ++a) {
              u.point((o = t[a])[0], o[1]);
            }u.lineEnd();
          } else s.push(e = new r(o, t, null, !0)), l.push(e.o = new r(o, null, e, !1)), s.push(e = new r(c, t, null, !1)), l.push(e.o = new r(c, null, e, !0));
        }
      }), s.length) {
        for (l.sort(n), o(s), o(l), a = 0, f = l.length; a < f; ++a) {
          l[a].e = e = !e;
        }for (var h, p, b = s[0];;) {
          for (var v = b, g = !0; v.v;) {
            if ((v = v.n) === b) return;
          }h = v.z, u.lineStart();do {
            if (v.v = v.o.v = !0, v.e) {
              if (g) for (a = 0, f = h.length; a < f; ++a) {
                u.point((p = h[a])[0], p[1]);
              } else c(v.x, v.n.x, 1, u);v = v.n;
            } else {
              if (g) for (h = v.p.z, a = h.length - 1; a >= 0; --a) {
                u.point((p = h[a])[0], p[1]);
              } else c(v.x, v.p.x, -1, u);v = v.p;
            }h = (v = v.o).z, g = !g;
          } while (!v.v);u.lineEnd();
        }
      }
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(3);n.a = function (t, n) {
      return Object(r.a)(t[0] - n[0]) < r.i && Object(r.a)(t[1] - n[1]) < r.i;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(34),
        o = e(152),
        i = Object(o.a)(r.a),
        c = i.right;i.left;n.a = c;
  }, function (t, n, e) {
    "use strict";
    var r = e(34);n.a = function (t) {
      return 1 === t.length && (t = function (t) {
        return function (n, e) {
          return Object(r.a)(t(n), e);
        };
      }(t)), { left: function left(n, e, r, o) {
          for (null == r && (r = 0), null == o && (o = n.length); r < o;) {
            var i = r + o >>> 1;t(n[i], e) < 0 ? r = i + 1 : o = i;
          }return r;
        }, right: function right(n, e, r, o) {
          for (null == r && (r = 0), null == o && (o = n.length); r < o;) {
            var i = r + o >>> 1;t(n[i], e) > 0 ? o = i : r = i + 1;
          }return r;
        } };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t, n];
    }n.a = r;
  }, function (t, n, e) {
    "use strict";
    var r = e(155);n.a = function (t, n) {
      var e = Object(r.a)(t, n);return e ? Math.sqrt(e) : e;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(39);n.a = function (t, n) {
      var e,
          o,
          i = t.length,
          c = 0,
          u = -1,
          a = 0,
          f = 0;if (null == n) for (; ++u < i;) {
        isNaN(e = Object(r.a)(t[u])) || (f += (o = e - a) * (e - (a += o / ++c)));
      } else for (; ++u < i;) {
        isNaN(e = Object(r.a)(n(t[u], u, t))) || (f += (o = e - a) * (e - (a += o / ++c)));
      }if (c > 1) return f / (c - 1);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      var e,
          r,
          o,
          i = t.length,
          c = -1;if (null == n) {
        for (; ++c < i;) {
          if (null != (e = t[c]) && e >= e) for (r = o = e; ++c < i;) {
            null != (e = t[c]) && (r > e && (r = e), o < e && (o = e));
          }
        }
      } else for (; ++c < i;) {
        if (null != (e = n(t[c], c, t)) && e >= e) for (r = o = e; ++c < i;) {
          null != (e = n(t[c], c, t)) && (r > e && (r = e), o < e && (o = e));
        }
      }return [r, o];
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return o;
    }), e.d(n, "a", function () {
      return i;
    });var r = Array.prototype,
        o = r.slice,
        i = r.map;
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e) {
      t = +t, n = +n, e = (o = arguments.length) < 2 ? (n = t, t = 0, 1) : o < 3 ? 1 : +e;for (var r = -1, o = 0 | Math.max(0, Math.ceil((n - t) / e)), i = new Array(o); ++r < o;) {
        i[r] = t + r * e;
      }return i;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e) {
      var c = Math.abs(n - t) / Math.max(0, e),
          u = Math.pow(10, Math.floor(Math.log(c) / Math.LN10)),
          a = c / u;return a >= r ? u *= 10 : a >= o ? u *= 5 : a >= i && (u *= 2), n < t ? -u : u;
    };var r = Math.sqrt(50),
        o = Math.sqrt(10),
        i = Math.sqrt(2);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return Math.ceil(Math.log(t.length) / Math.LN2) + 1;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      var e,
          r,
          o = t.length,
          i = -1;if (null == n) {
        for (; ++i < o;) {
          if (null != (e = t[i]) && e >= e) for (r = e; ++i < o;) {
            null != (e = t[i]) && r > e && (r = e);
          }
        }
      } else for (; ++i < o;) {
        if (null != (e = n(t[i], i, t)) && e >= e) for (r = e; ++i < o;) {
          null != (e = n(t[i], i, t)) && r > e && (r = e);
        }
      }return r;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.length;
    }var o = e(161);n.a = function (t) {
      if (!(c = t.length)) return [];for (var n = -1, e = Object(o.a)(t, r), i = new Array(e); ++n < e;) {
        for (var c, u = -1, a = i[n] = new Array(c); ++u < c;) {
          a[u] = t[u][n];
        }
      }return i;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(33),
        o = e(38),
        i = e(3),
        c = Object(r.a)();n.a = function (t, n) {
      var e = n[0],
          r = n[1],
          u = [Object(i.t)(e), -Object(i.g)(e), 0],
          a = 0,
          f = 0;c.reset();for (var s = 0, l = t.length; s < l; ++s) {
        if (p = (h = t[s]).length) for (var h, p, b = h[p - 1], v = b[0], g = b[1] / 2 + i.q, d = Object(i.t)(g), j = Object(i.g)(g), O = 0; O < p; ++O, v = m, d = _, j = w, b = y) {
          var y = h[O],
              m = y[0],
              x = y[1] / 2 + i.q,
              _ = Object(i.t)(x),
              w = Object(i.g)(x),
              E = m - v,
              M = E >= 0 ? 1 : -1,
              S = M * E,
              T = S > i.o,
              P = d * _;if (c.add(Object(i.e)(P * M * Object(i.t)(S), j * w + P * Object(i.g)(S))), a += T ? E + M * i.w : E, T ^ v >= e ^ m >= e) {
            var k = Object(o.c)(Object(o.a)(b), Object(o.a)(y));Object(o.e)(k);var A = Object(o.c)(u, k);Object(o.e)(A);var C = (T ^ E >= 0 ? -1 : 1) * Object(i.c)(A[2]);(r > C || r === C && (k[0] || k[1])) && (f += T ^ E >= 0 ? 1 : -1);
          }
        }
      }return (a < -i.i || a < i.i && c < -i.i) ^ 1 & f;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(165),
        o = [null, null],
        i = { type: "LineString", coordinates: o };n.a = function (t, n) {
      return o[0] = t, o[1] = n, Object(r.a)(i);
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      b.point = b.lineEnd = l.a;
    }function o(t, n) {
      t *= s.r, n *= s.r, c = t, u = Object(s.t)(n), a = Object(s.g)(n), b.point = i;
    }function i(t, n) {
      t *= s.r, n *= s.r;var e = Object(s.t)(n),
          r = Object(s.g)(n),
          o = Object(s.a)(t - c),
          i = Object(s.g)(o),
          f = r * Object(s.t)(o),
          l = a * e - u * r * i,
          h = u * e + a * r * i;p.add(Object(s.e)(Object(s.u)(f * f + l * l), h)), c = t, u = e, a = r;
    }var c,
        u,
        a,
        f = e(33),
        s = e(3),
        l = e(21),
        h = e(25),
        p = Object(f.a)(),
        b = { sphere: l.a, point: l.a, lineStart: function lineStart() {
        b.point = o, b.lineEnd = r;
      }, lineEnd: l.a, polygonStart: l.a, polygonEnd: l.a };n.a = function (t) {
      return p.reset(), Object(h.a)(t, b), +p;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(21),
        o = 1 / 0,
        i = o,
        c = -o,
        u = c,
        a = { point: function point(t, n) {
        t < o && (o = t), t > c && (c = t), n < i && (i = n), n > u && (u = n);
      }, lineStart: r.a, lineEnd: r.a, polygonStart: r.a, polygonEnd: r.a, result: function result() {
        var t = [[o, i], [c, u]];return c = u = -(i = o = 1 / 0), t;
      } };n.a = a;
  }, function (t, n, e) {
    "use strict";
    var r = e(88);n.a = function () {
      return Object(r.b)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-.6, 38.7]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.length > 1;
    }function o(t, n) {
      return ((t = t.x)[0] < 0 ? t[1] - u.l - u.i : u.l - t[1]) - ((n = n.x)[0] < 0 ? n[1] - u.l - u.i : u.l - n[1]);
    }var i = e(148),
        c = e(149),
        u = e(3),
        a = e(163),
        f = e(14);n.a = function (t, n, e, u) {
      return function (s, l) {
        function h(n, e) {
          var r = s(n, e);t(n = r[0], e = r[1]) && l.point(n, e);
        }function p(t, n) {
          var e = s(t, n);x.point(e[0], e[1]);
        }function b() {
          S.point = p, x.lineStart();
        }function v() {
          S.point = h, x.lineEnd();
        }function g(t, n) {
          m.push([t, n]);var e = s(t, n);E.point(e[0], e[1]);
        }function d() {
          E.lineStart(), m = [];
        }function j() {
          g(m[0][0], m[0][1]), E.lineEnd();var t,
              n,
              e,
              o,
              i = E.clean(),
              c = w.result(),
              u = c.length;if (m.pop(), O.push(m), m = null, u) if (1 & i) {
            if (e = c[0], (n = e.length - 1) > 0) {
              for (M || (l.polygonStart(), M = !0), l.lineStart(), t = 0; t < n; ++t) {
                l.point((o = e[t])[0], o[1]);
              }l.lineEnd();
            }
          } else u > 1 && 2 & i && c.push(c.pop().concat(c.shift())), y.push(c.filter(r));
        }var O,
            y,
            m,
            x = n(l),
            _ = s.invert(u[0], u[1]),
            w = Object(i.a)(),
            E = n(w),
            M = !1,
            S = { point: h, lineStart: b, lineEnd: v, polygonStart: function polygonStart() {
            S.point = g, S.lineStart = d, S.lineEnd = j, y = [], O = [];
          }, polygonEnd: function polygonEnd() {
            S.point = h, S.lineStart = b, S.lineEnd = v, y = Object(f.b)(y);var t = Object(a.a)(O, _);y.length ? (M || (l.polygonStart(), M = !0), Object(c.a)(y, o, t, e, l)) : t && (M || (l.polygonStart(), M = !0), l.lineStart(), e(null, null, 1, l), l.lineEnd()), M && (l.polygonEnd(), M = !1), y = O = null;
          }, sphere: function sphere() {
            l.polygonStart(), l.lineStart(), e(null, null, 1, l), l.lineEnd(), l.polygonEnd();
          } };return S;
      };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t, n];
    }n.b = r;var o = e(16);r.invert = r, n.a = function () {
      return Object(o.a)(r).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(335);e.d(n, "geoAiry", function () {
      return r.b;
    }), e.d(n, "geoAiryRaw", function () {
      return r.a;
    });var o = e(171);e.d(n, "geoAitoff", function () {
      return o.b;
    }), e.d(n, "geoAitoffRaw", function () {
      return o.a;
    });var i = e(336);e.d(n, "geoArmadillo", function () {
      return i.b;
    }), e.d(n, "geoArmadilloRaw", function () {
      return i.a;
    });var c = e(172);e.d(n, "geoAugust", function () {
      return c.b;
    }), e.d(n, "geoAugustRaw", function () {
      return c.a;
    });var u = e(337);e.d(n, "geoBaker", function () {
      return u.b;
    }), e.d(n, "geoBakerRaw", function () {
      return u.a;
    });var a = e(338);e.d(n, "geoBerghaus", function () {
      return a.b;
    }), e.d(n, "geoBerghausRaw", function () {
      return a.a;
    });var f = e(173);e.d(n, "geoBoggs", function () {
      return f.b;
    }), e.d(n, "geoBoggsRaw", function () {
      return f.a;
    });var s = e(339);e.d(n, "geoBonne", function () {
      return s.b;
    }), e.d(n, "geoBonneRaw", function () {
      return s.a;
    });var l = e(340);e.d(n, "geoBottomley", function () {
      return l.b;
    }), e.d(n, "geoBottomleyRaw", function () {
      return l.a;
    });var h = e(341);e.d(n, "geoBromley", function () {
      return h.b;
    }), e.d(n, "geoBromleyRaw", function () {
      return h.a;
    });var p = e(342);e.d(n, "geoChamberlin", function () {
      return p.c;
    }), e.d(n, "geoChamberlinRaw", function () {
      return p.b;
    }), e.d(n, "geoChamberlinAfrica", function () {
      return p.a;
    });var b = e(92);e.d(n, "geoCollignon", function () {
      return b.b;
    }), e.d(n, "geoCollignonRaw", function () {
      return b.a;
    });var v = e(343);e.d(n, "geoCraig", function () {
      return v.b;
    }), e.d(n, "geoCraigRaw", function () {
      return v.a;
    });var g = e(344);e.d(n, "geoCraster", function () {
      return g.b;
    }), e.d(n, "geoCrasterRaw", function () {
      return g.a;
    });var d = e(174);e.d(n, "geoCylindricalEqualArea", function () {
      return d.b;
    }), e.d(n, "geoCylindricalEqualAreaRaw", function () {
      return d.a;
    });var j = e(345);e.d(n, "geoCylindricalStereographic", function () {
      return j.b;
    }), e.d(n, "geoCylindricalStereographicRaw", function () {
      return j.a;
    });var O = e(346);e.d(n, "geoEckert1", function () {
      return O.a;
    }), e.d(n, "geoEckert1Raw", function () {
      return O.b;
    });var y = e(347);e.d(n, "geoEckert2", function () {
      return y.a;
    }), e.d(n, "geoEckert2Raw", function () {
      return y.b;
    });var m = e(348);e.d(n, "geoEckert3", function () {
      return m.a;
    }), e.d(n, "geoEckert3Raw", function () {
      return m.b;
    });var x = e(349);e.d(n, "geoEckert4", function () {
      return x.a;
    }), e.d(n, "geoEckert4Raw", function () {
      return x.b;
    });var _ = e(350);e.d(n, "geoEckert5", function () {
      return _.a;
    }), e.d(n, "geoEckert5Raw", function () {
      return _.b;
    });var w = e(351);e.d(n, "geoEckert6", function () {
      return w.a;
    }), e.d(n, "geoEckert6Raw", function () {
      return w.b;
    });var E = e(352);e.d(n, "geoEisenlohr", function () {
      return E.a;
    }), e.d(n, "geoEisenlohrRaw", function () {
      return E.b;
    });var M = e(353);e.d(n, "geoFahey", function () {
      return M.a;
    }), e.d(n, "geoFaheyRaw", function () {
      return M.b;
    });var S = e(354);e.d(n, "geoFoucaut", function () {
      return S.a;
    }), e.d(n, "geoFoucautRaw", function () {
      return S.b;
    });var T = e(355);e.d(n, "geoGilbert", function () {
      return T.a;
    });var P = e(356);e.d(n, "geoGingery", function () {
      return P.a;
    }), e.d(n, "geoGingeryRaw", function () {
      return P.b;
    });var k = e(357);e.d(n, "geoGinzburg4", function () {
      return k.a;
    }), e.d(n, "geoGinzburg4Raw", function () {
      return k.b;
    });var A = e(358);e.d(n, "geoGinzburg5", function () {
      return A.a;
    }), e.d(n, "geoGinzburg5Raw", function () {
      return A.b;
    });var C = e(359);e.d(n, "geoGinzburg6", function () {
      return C.a;
    }), e.d(n, "geoGinzburg6Raw", function () {
      return C.b;
    });var B = e(360);e.d(n, "geoGinzburg8", function () {
      return B.a;
    }), e.d(n, "geoGinzburg8Raw", function () {
      return B.b;
    });var R = e(361);e.d(n, "geoGinzburg9", function () {
      return R.a;
    }), e.d(n, "geoGinzburg9Raw", function () {
      return R.b;
    });var N = e(175);e.d(n, "geoGringorten", function () {
      return N.a;
    }), e.d(n, "geoGringortenRaw", function () {
      return N.b;
    });var q = e(177);e.d(n, "geoGuyou", function () {
      return q.a;
    }), e.d(n, "geoGuyouRaw", function () {
      return q.b;
    });var z = e(363);e.d(n, "geoHammer", function () {
      return z.a;
    }), e.d(n, "geoHammerRaw", function () {
      return z.b;
    });var L = e(364);e.d(n, "geoHammerRetroazimuthal", function () {
      return L.a;
    }), e.d(n, "geoHammerRetroazimuthalRaw", function () {
      return L.b;
    });var F = e(365);e.d(n, "geoHealpix", function () {
      return F.a;
    }), e.d(n, "geoHealpixRaw", function () {
      return F.b;
    });var I = e(366);e.d(n, "geoHill", function () {
      return I.a;
    }), e.d(n, "geoHillRaw", function () {
      return I.b;
    });var D = e(178);e.d(n, "geoHomolosine", function () {
      return D.a;
    }), e.d(n, "geoHomolosineRaw", function () {
      return D.b;
    });var G = e(26);e.d(n, "geoInterrupt", function () {
      return G.a;
    });var V = e(367);e.d(n, "geoInterruptedBoggs", function () {
      return V.a;
    });var H = e(368);e.d(n, "geoInterruptedHomolosine", function () {
      return H.a;
    });var U = e(369);e.d(n, "geoInterruptedMollweide", function () {
      return U.a;
    });var W = e(370);e.d(n, "geoInterruptedMollweideHemispheres", function () {
      return W.a;
    });var $ = e(371);e.d(n, "geoInterruptedSinuMollweide", function () {
      return $.a;
    });var Y = e(372);e.d(n, "geoInterruptedSinusoidal", function () {
      return Y.a;
    });var X = e(373);e.d(n, "geoKavrayskiy7", function () {
      return X.a;
    }), e.d(n, "geoKavrayskiy7Raw", function () {
      return X.b;
    });var J = e(374);e.d(n, "geoLagrange", function () {
      return J.a;
    }), e.d(n, "geoLagrangeRaw", function () {
      return J.b;
    });var Q = e(375);e.d(n, "geoLarrivee", function () {
      return Q.a;
    }), e.d(n, "geoLarriveeRaw", function () {
      return Q.b;
    });var K = e(376);e.d(n, "geoLaskowski", function () {
      return K.a;
    }), e.d(n, "geoLaskowskiRaw", function () {
      return K.b;
    });var Z = e(377);e.d(n, "geoLittrow", function () {
      return Z.a;
    }), e.d(n, "geoLittrowRaw", function () {
      return Z.b;
    });var tt = e(378);e.d(n, "geoLoximuthal", function () {
      return tt.a;
    }), e.d(n, "geoLoximuthalRaw", function () {
      return tt.b;
    });var nt = e(379);e.d(n, "geoMiller", function () {
      return nt.a;
    }), e.d(n, "geoMillerRaw", function () {
      return nt.b;
    });var et = e(380);e.d(n, "geoModifiedStereographic", function () {
      return et.a;
    }), e.d(n, "geoModifiedStereographicRaw", function () {
      return et.g;
    }), e.d(n, "geoModifiedStereographicAlaska", function () {
      return et.b;
    }), e.d(n, "geoModifiedStereographicGs48", function () {
      return et.c;
    }), e.d(n, "geoModifiedStereographicGs50", function () {
      return et.d;
    }), e.d(n, "geoModifiedStereographicMiller", function () {
      return et.f;
    }), e.d(n, "geoModifiedStereographicLee", function () {
      return et.e;
    });var rt = e(22);e.d(n, "geoMollweide", function () {
      return rt.a;
    }), e.d(n, "geoMollweideRaw", function () {
      return rt.d;
    });var ot = e(381);e.d(n, "geoMtFlatPolarParabolic", function () {
      return ot.a;
    }), e.d(n, "geoMtFlatPolarParabolicRaw", function () {
      return ot.b;
    });var it = e(382);e.d(n, "geoMtFlatPolarQuartic", function () {
      return it.a;
    }), e.d(n, "geoMtFlatPolarQuarticRaw", function () {
      return it.b;
    });var ct = e(383);e.d(n, "geoMtFlatPolarSinusoidal", function () {
      return ct.a;
    }), e.d(n, "geoMtFlatPolarSinusoidalRaw", function () {
      return ct.b;
    });var ut = e(384);e.d(n, "geoNaturalEarth", function () {
      return ut.a;
    }), e.d(n, "geoNaturalEarthRaw", function () {
      return ut.b;
    });var at = e(385);e.d(n, "geoNaturalEarth2", function () {
      return at.a;
    }), e.d(n, "geoNaturalEarth2Raw", function () {
      return at.b;
    });var ft = e(386);e.d(n, "geoNellHammer", function () {
      return ft.a;
    }), e.d(n, "geoNellHammerRaw", function () {
      return ft.b;
    });var st = e(387);e.d(n, "geoPatterson", function () {
      return st.a;
    }), e.d(n, "geoPattersonRaw", function () {
      return st.b;
    });var lt = e(388);e.d(n, "geoPolyconic", function () {
      return lt.a;
    }), e.d(n, "geoPolyconicRaw", function () {
      return lt.b;
    });var ht = e(61);e.d(n, "geoPolyhedral", function () {
      return ht.a;
    });var pt = e(390);e.d(n, "geoPolyhedralButterfly", function () {
      return pt.a;
    });var bt = e(391);e.d(n, "geoPolyhedralCollignon", function () {
      return bt.a;
    });var vt = e(392);e.d(n, "geoPolyhedralWaterman", function () {
      return vt.a;
    });var gt = e(393);e.d(n, "geoProject", function () {
      return gt.a;
    });var dt = e(397);e.d(n, "geoGringortenQuincuncial", function () {
      return dt.a;
    });var jt = e(179);e.d(n, "geoPeirceQuincuncial", function () {
      return jt.a;
    }), e.d(n, "geoPierceQuincuncial", function () {
      return jt.a;
    });var Ot = e(398);e.d(n, "geoQuantize", function () {
      return Ot.a;
    });var yt = e(95);e.d(n, "geoQuincuncial", function () {
      return yt.a;
    });var mt = e(399);e.d(n, "geoRectangularPolyconic", function () {
      return mt.a;
    }), e.d(n, "geoRectangularPolyconicRaw", function () {
      return mt.b;
    });var xt = e(400);e.d(n, "geoRobinson", function () {
      return xt.a;
    }), e.d(n, "geoRobinsonRaw", function () {
      return xt.b;
    });var _t = e(401);e.d(n, "geoSatellite", function () {
      return _t.a;
    }), e.d(n, "geoSatelliteRaw", function () {
      return _t.b;
    });var wt = e(93);e.d(n, "geoSinuMollweide", function () {
      return wt.a;
    }), e.d(n, "geoSinuMollweideRaw", function () {
      return wt.c;
    });var Et = e(41);e.d(n, "geoSinusoidal", function () {
      return Et.a;
    }), e.d(n, "geoSinusoidalRaw", function () {
      return Et.b;
    });var Mt = e(402);e.d(n, "geoStitch", function () {
      return Mt.a;
    });var St = e(403);e.d(n, "geoTimes", function () {
      return St.a;
    }), e.d(n, "geoTimesRaw", function () {
      return St.b;
    });var Tt = e(404);e.d(n, "geoTwoPointAzimuthal", function () {
      return Tt.a;
    }), e.d(n, "geoTwoPointAzimuthalRaw", function () {
      return Tt.b;
    }), e.d(n, "geoTwoPointAzimuthalUsa", function () {
      return Tt.c;
    });var Pt = e(405);e.d(n, "geoTwoPointEquidistant", function () {
      return Pt.a;
    }), e.d(n, "geoTwoPointEquidistantRaw", function () {
      return Pt.b;
    }), e.d(n, "geoTwoPointEquidistantUsa", function () {
      return Pt.c;
    });var kt = e(406);e.d(n, "geoVanDerGrinten", function () {
      return kt.a;
    }), e.d(n, "geoVanDerGrintenRaw", function () {
      return kt.b;
    });var At = e(407);e.d(n, "geoVanDerGrinten2", function () {
      return At.a;
    }), e.d(n, "geoVanDerGrinten2Raw", function () {
      return At.b;
    });var Ct = e(408);e.d(n, "geoVanDerGrinten3", function () {
      return Ct.a;
    }), e.d(n, "geoVanDerGrinten3Raw", function () {
      return Ct.b;
    });var Bt = e(409);e.d(n, "geoVanDerGrinten4", function () {
      return Bt.a;
    }), e.d(n, "geoVanDerGrinten4Raw", function () {
      return Bt.b;
    });var Rt = e(410);e.d(n, "geoWagner4", function () {
      return Rt.a;
    }), e.d(n, "geoWagner4Raw", function () {
      return Rt.b;
    });var Nt = e(411);e.d(n, "geoWagner6", function () {
      return Nt.a;
    }), e.d(n, "geoWagner6Raw", function () {
      return Nt.b;
    });var qt = e(412);e.d(n, "geoWagner7", function () {
      return qt.a;
    }), e.d(n, "geoWagner7Raw", function () {
      return qt.b;
    });var zt = e(413);e.d(n, "geoWiechel", function () {
      return zt.a;
    }), e.d(n, "geoWiechelRaw", function () {
      return zt.b;
    });var Lt = e(414);e.d(n, "geoWinkel3", function () {
      return Lt.a;
    }), e.d(n, "geoWinkel3Raw", function () {
      return Lt.b;
    });
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.h)(n),
          r = Object(i.z)(Object(i.b)(e * Object(i.h)(t /= 2)));return [2 * e * Object(i.y)(t) * r, Object(i.y)(n) * r];
    }n.a = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      if (!(t * t + 4 * n * n > i.s * i.s + i.k)) {
        var e = t,
            r = n,
            o = 25;do {
          var c,
              u = Object(i.y)(e),
              a = Object(i.y)(e / 2),
              f = Object(i.h)(e / 2),
              s = Object(i.y)(r),
              l = Object(i.h)(r),
              h = Object(i.y)(2 * r),
              p = s * s,
              b = l * l,
              v = a * a,
              g = 1 - b * f * f,
              d = g ? Object(i.b)(l * f) * Object(i.B)(c = 1 / g) : c = 0,
              j = 2 * d * l * a - t,
              O = d * s - n,
              y = c * (b * v + d * l * f * p),
              m = c * (.5 * u * h - 2 * d * s * a),
              x = .25 * c * (h * a - d * s * b * u),
              _ = c * (p * f + d * v * l),
              w = m * x - _ * y;if (!w) break;var E = (O * m - j * _) / w,
              M = (j * x - O * y) / w;e -= E, r -= M;
        } while ((Object(i.a)(E) > i.k || Object(i.a)(M) > i.k) && --o > 0);return [e, r];
      }
    }, n.b = function () {
      return Object(o.geoProjection)(r).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.F)(n / 2),
          r = Object(i.B)(1 - e * e),
          o = 1 + r * Object(i.h)(t /= 2),
          c = Object(i.y)(t) * r / o,
          u = e / o,
          a = c * c,
          f = u * u;return [4 / 3 * c * (3 + a - 3 * f), 4 / 3 * u * (3 + 3 * a - f)];
    }n.a = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      if (t *= 3 / 8, n *= 3 / 8, !t && Object(i.a)(n) > 1) return null;var e = 1 + t * t + n * n,
          r = Object(i.B)((e - Object(i.B)(e * e - 4 * n * n)) / 2),
          o = Object(i.e)(r) / 3,
          c = r ? Object(i.c)(Object(i.a)(n / r)) / 3 : Object(i.d)(Object(i.a)(t)) / 3,
          u = Object(i.h)(o),
          a = Object(i.i)(c),
          f = a * a - u * u;return [2 * Object(i.x)(t) * Object(i.g)(Object(i.A)(c) * u, .25 - f), 2 * Object(i.x)(n) * Object(i.g)(a * Object(i.y)(o), .25 + f)];
    }, n.b = function () {
      return Object(o.geoProjection)(r).scale(66.1603);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.c)(c.s, n);return [u * t / (1 / Object(c.h)(n) + a / Object(c.h)(e)), (n + c.D * Object(c.y)(e)) / u];
    }n.a = r;var o = e(0),
        i = e(22),
        c = e(1),
        u = 2.00276,
        a = 1.11072;r.invert = function (t, n) {
      var e,
          r,
          o = u * n,
          i = n < 0 ? -c.u : c.u,
          f = 25;do {
        r = o - c.D * Object(c.y)(i), i -= e = (Object(c.y)(2 * i) + 2 * i - c.s * Object(c.y)(r)) / (2 * Object(c.h)(2 * i) + 2 + c.s * Object(c.h)(r) * c.D * Object(c.h)(i));
      } while (Object(c.a)(e) > c.k && --f > 0);return r = o - c.D * Object(c.y)(i), [t * (1 / Object(c.h)(r) + a / Object(c.h)(i)) / u, r];
    }, n.b = function () {
      return Object(o.geoProjection)(r).scale(160.857);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        return [t * e, Object(o.y)(n) / e];
      }var e = Object(o.h)(t);return n.invert = function (t, n) {
        return [t / e, Object(o.e)(n * e)];
      }, n;
    }n.a = r;var o = e(1),
        i = e(35);n.b = function () {
      return Object(i.a)(r).parallel(38.58).scale(195.044);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.x)(t),
          r = Object(i.x)(n),
          o = Object(i.h)(n),
          c = Object(i.h)(t) * o,
          u = Object(i.y)(t) * o,
          a = Object(i.y)(r * n);t = Object(i.a)(Object(i.g)(u, a)), n = Object(i.e)(c), Object(i.a)(t - i.o) > i.k && (t %= i.o);var f = function (t, n) {
        if (n === i.o) return [0, 0];var e,
            r,
            o = Object(i.y)(n),
            c = o * o,
            u = c * c,
            a = 1 + u,
            f = 1 + 3 * u,
            s = 1 - u,
            l = Object(i.e)(1 / Object(i.B)(a)),
            h = s + c * a * l,
            p = (1 - o) / h,
            b = Object(i.B)(p),
            v = p * a,
            g = Object(i.B)(v),
            d = b * s;if (0 === t) return [0, -(d + c * g)];var j,
            O = Object(i.h)(n),
            y = 1 / O,
            m = 2 * o * O,
            x = (-h * O - (-3 * c + l * f) * m * (1 - o)) / (h * h),
            _ = -y * m,
            w = -y * (c * a * x + p * f * m),
            E = -2 * y * (s * (.5 * x / b) - 2 * c * b * m),
            M = 4 * t / i.s;if (t > .222 * i.s || n < i.s / 4 && t > .175 * i.s) {
          if (e = (d + c * Object(i.B)(v * (1 + u) - d * d)) / (1 + u), t > i.s / 4) return [e, e];var S = e,
              T = .5 * e;e = .5 * (T + S), r = 50;do {
            var P = Object(i.B)(v - e * e),
                k = e * (E + _ * P) + w * Object(i.e)(e / g) - M;if (!k) break;k < 0 ? T = e : S = e, e = .5 * (T + S);
          } while (Object(i.a)(S - T) > i.k && --r > 0);
        } else {
          e = i.k, r = 25;do {
            var A = e * e,
                C = Object(i.B)(v - A),
                B = E + _ * C,
                R = e * B + w * Object(i.e)(e / g) - M;e -= j = C ? R / (B + (w - _ * A) / C) : 0;
          } while (Object(i.a)(j) > i.k && --r > 0);
        }return [e, -d - c * Object(i.B)(v - e * e)];
      }(t > i.s / 4 ? i.o - t : t, n);return t > i.s / 4 && (a = f[0], f[0] = -f[1], f[1] = -a), f[0] *= e, f[1] *= -r, f;
    }n.b = r;var o = e(0),
        i = e(1),
        c = e(176);r.invert = function (t, n) {
      Object(i.a)(t) > 1 && (t = 2 * Object(i.x)(t) - t), Object(i.a)(n) > 1 && (n = 2 * Object(i.x)(n) - n);var e = Object(i.x)(t),
          r = Object(i.x)(n),
          o = -e * t,
          c = -r * n,
          u = c / o < 1,
          a = function (t, n) {
        for (var e = 0, r = 1, o = .5, c = 50;;) {
          var u = o * o,
              a = Object(i.B)(o),
              f = Object(i.e)(1 / Object(i.B)(1 + u)),
              s = 1 - u + o * (1 + u) * f,
              l = (1 - a) / s,
              h = Object(i.B)(l),
              p = l * (1 + u),
              b = h * (1 - u),
              v = p - t * t,
              g = Object(i.B)(v),
              d = n + b + o * g;if (Object(i.a)(r - e) < i.l || 0 == --c || 0 === d) break;d > 0 ? e = o : r = o, o = .5 * (e + r);
        }if (!c) return null;var j = Object(i.e)(a),
            O = Object(i.h)(j),
            y = 1 / O,
            m = 2 * a * O,
            x = (-s * O - (-3 * o + f * (1 + 3 * u)) * m * (1 - a)) / (s * s),
            _ = -2 * y * (.5 * x / h * (1 - u) - 2 * o * h * m),
            w = -y * m,
            E = -y * (o * (1 + u) * x + l * (1 + 3 * u) * m);return [i.s / 4 * (t * (_ + w * g) + E * Object(i.e)(t / Object(i.B)(p))), j];
      }(u ? c : o, u ? o : c),
          f = a[0],
          s = a[1],
          l = Object(i.h)(s);return u && (f = -i.o - f), [e * (Object(i.g)(Object(i.y)(f) * l, -Object(i.y)(s)) + i.s), r * Object(i.e)(Object(i.h)(f) * l)];
    }, n.a = function () {
      return Object(o.geoProjection)(Object(c.a)(r)).scale(239.75);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(1);n.a = function (t) {
      function n(n, o) {
        var i = n > 0 ? -.5 : .5,
            c = t(n + i * r.s, o);return c[0] -= i * e, c;
      }var e = t(r.o, 0)[0] - t(-r.o, 0)[0];return t.invert && (n.invert = function (n, o) {
        var i = n > 0 ? -.5 : .5,
            c = t.invert(n + i * e, o),
            u = c[0] - i * r.s;return u < -r.s ? u += 2 * r.s : u > r.s && (u -= 2 * r.s), c[0] = u, c;
      }), n;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = (c.D - 1) / (c.D + 1),
          r = Object(c.B)(1 - e * e),
          o = Object(i.a)(c.o, r * r),
          u = Object(c.p)(Object(c.F)(c.s / 4 + Object(c.a)(n) / 2)),
          a = Object(c.m)(-1 * u) / Object(c.B)(e),
          f = function (t, n) {
        var e = t * t,
            r = n + 1,
            o = 1 - e - n * n;return [.5 * ((t >= 0 ? c.o : -c.o) - Object(c.g)(o, 2 * t)), -.25 * Object(c.p)(o * o + 4 * e) + .5 * Object(c.p)(r * r + e)];
      }(a * Object(c.h)(-1 * t), a * Object(c.y)(-1 * t)),
          s = Object(i.b)(f[0], f[1], r * r);return [-s[1], (n >= 0 ? 1 : -1) * (.5 * o - s[0])];
    }n.b = r;var o = e(0),
        i = e(362),
        c = e(1),
        u = e(176);r.invert = function (t, n) {
      var e = (c.D - 1) / (c.D + 1),
          r = Object(c.B)(1 - e * e),
          o = Object(i.a)(c.o, r * r),
          u = Object(i.c)(.5 * o - n, -t, r * r),
          a = function (t, n) {
        var e = n[0] * n[0] + n[1] * n[1];return [(t[0] * n[0] + t[1] * n[1]) / e, (t[1] * n[0] - t[0] * n[1]) / e];
      }(u[0], u[1]);return [Object(c.g)(a[1], a[0]) / -1, 2 * Object(c.f)(Object(c.m)(-.5 * Object(c.p)(e * a[0] * a[0] + e * a[1] * a[1]))) - c.o];
    }, n.a = function () {
      return Object(o.geoProjection)(Object(u.a)(r)).scale(151.496);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return Object(i.a)(n) > a.b ? (t = Object(c.d)(t, n), t[1] -= n > 0 ? a.d : -a.d, t) : Object(u.b)(t, n);
    }n.b = r;var o = e(0),
        i = e(1),
        c = e(22),
        u = e(41),
        a = e(93);r.invert = function (t, n) {
      return Object(i.a)(n) > a.b ? c.d.invert(t, n + (n > 0 ? a.d : -a.d)) : u.b.invert(t, n);
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(177),
        o = e(95);n.a = function () {
      return Object(o.a)(r.b).scale(111.48);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(0),
        o = e(1);n.a = function (t, n, e) {
      var i = Object(r.geoInterpolate)(n, e),
          c = i(.5),
          u = Object(r.geoRotation)([-c[0], -c[1]])(n),
          a = i.distance / 2,
          f = -Object(o.e)(Object(o.y)(u[1] * o.v) / Object(o.y)(a)),
          s = [-c[0], -c[1], -(u[0] > 0 ? o.s - f : f) * o.j],
          l = Object(r.geoProjection)(t(a)).rotate(s),
          h = Object(r.geoRotation)(s),
          p = l.center;return delete l.rotate, l.center = function (t) {
        return arguments.length ? p(h(t)) : h.invert(p());
      }, l.clipAngle(90);
    };
  }, function (t, n, e) {
    var r,
        o = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };!function (n) {
      "use strict";
      function i() {}function c(t, n) {
        for (var e = t.length; e--;) {
          if (t[e].listener === n) return e;
        }return -1;
      }function u(t) {
        return function () {
          return this[t].apply(this, arguments);
        };
      }function a(t) {
        return "function" == typeof t || t instanceof RegExp || !(!t || "object" !== (void 0 === t ? "undefined" : o(t))) && a(t.listener);
      }var f = i.prototype,
          s = n.EventEmitter;f.getListeners = function (t) {
        var n,
            e,
            r = this._getEvents();if (t instanceof RegExp) {
          n = {};for (e in r) {
            r.hasOwnProperty(e) && t.test(e) && (n[e] = r[e]);
          }
        } else n = r[t] || (r[t] = []);return n;
      }, f.flattenListeners = function (t) {
        var n,
            e = [];for (n = 0; n < t.length; n += 1) {
          e.push(t[n].listener);
        }return e;
      }, f.getListenersAsObject = function (t) {
        var n,
            e = this.getListeners(t);return e instanceof Array && ((n = {})[t] = e), n || e;
      }, f.addListener = function (t, n) {
        if (!a(n)) throw new TypeError("listener must be a function");var e,
            r = this.getListenersAsObject(t),
            i = "object" === (void 0 === n ? "undefined" : o(n));for (e in r) {
          r.hasOwnProperty(e) && -1 === c(r[e], n) && r[e].push(i ? n : { listener: n, once: !1 });
        }return this;
      }, f.on = u("addListener"), f.addOnceListener = function (t, n) {
        return this.addListener(t, { listener: n, once: !0 });
      }, f.once = u("addOnceListener"), f.defineEvent = function (t) {
        return this.getListeners(t), this;
      }, f.defineEvents = function (t) {
        for (var n = 0; n < t.length; n += 1) {
          this.defineEvent(t[n]);
        }return this;
      }, f.removeListener = function (t, n) {
        var e,
            r,
            o = this.getListenersAsObject(t);for (r in o) {
          o.hasOwnProperty(r) && -1 !== (e = c(o[r], n)) && o[r].splice(e, 1);
        }return this;
      }, f.off = u("removeListener"), f.addListeners = function (t, n) {
        return this.manipulateListeners(!1, t, n);
      }, f.removeListeners = function (t, n) {
        return this.manipulateListeners(!0, t, n);
      }, f.manipulateListeners = function (t, n, e) {
        var r,
            i,
            c = t ? this.removeListener : this.addListener,
            u = t ? this.removeListeners : this.addListeners;if ("object" !== (void 0 === n ? "undefined" : o(n)) || n instanceof RegExp) for (r = e.length; r--;) {
          c.call(this, n, e[r]);
        } else for (r in n) {
          n.hasOwnProperty(r) && (i = n[r]) && ("function" == typeof i ? c.call(this, r, i) : u.call(this, r, i));
        }return this;
      }, f.removeEvent = function (t) {
        var n,
            e = void 0 === t ? "undefined" : o(t),
            r = this._getEvents();if ("string" === e) delete r[t];else if (t instanceof RegExp) for (n in r) {
          r.hasOwnProperty(n) && t.test(n) && delete r[n];
        } else delete this._events;return this;
      }, f.removeAllListeners = u("removeEvent"), f.emitEvent = function (t, n) {
        var e,
            r,
            o,
            i,
            c = this.getListenersAsObject(t);for (i in c) {
          if (c.hasOwnProperty(i)) for (e = c[i].slice(0), o = 0; o < e.length; o++) {
            !0 === (r = e[o]).once && this.removeListener(t, r.listener), r.listener.apply(this, n || []) === this._getOnceReturnValue() && this.removeListener(t, r.listener);
          }
        }return this;
      }, f.trigger = u("emitEvent"), f.emit = function (t) {
        var n = Array.prototype.slice.call(arguments, 1);return this.emitEvent(t, n);
      }, f.setOnceReturnValue = function (t) {
        return this._onceReturnValue = t, this;
      }, f._getOnceReturnValue = function () {
        return !this.hasOwnProperty("_onceReturnValue") || this._onceReturnValue;
      }, f._getEvents = function () {
        return this._events || (this._events = {});
      }, i.noConflict = function () {
        return n.EventEmitter = s, i;
      }, void 0 !== (r = function () {
        return i;
      }.call(n, e, n, t)) && (t.exports = r);
    }(this || {});
  }, function (t, n, e) {
    var r = e(183),
        o = 4;t.exports = function (t) {
      return r(t, o);
    };
  }, function (t, n, e) {
    function r(t, n, e, A, C, B) {
      var R,
          N = n & _,
          q = n & w,
          z = n & E;if (e && (R = C ? e(t, A, C, B) : e(t)), void 0 !== R) return R;if (!m(t)) return t;var L = O(t);if (L) {
        if (R = g(t), !N) return s(t, R);
      } else {
        var F = v(t),
            I = F == S || F == T;if (y(t)) return f(t, N);if (F == P || F == M || I && !C) {
          if (R = q || I ? {} : j(t), !N) return q ? h(t, a(R, t)) : l(t, u(R, t));
        } else {
          if (!k[F]) return C ? t : {};R = d(t, F, r, N);
        }
      }B || (B = new o());var D = B.get(t);if (D) return D;B.set(t, R);var G = z ? q ? b : p : q ? keysIn : x,
          V = L ? void 0 : G(t);return i(V || t, function (o, i) {
        V && (o = t[i = o]), c(R, i, r(o, n, e, i, t, B));
      }), R;
    }var o = e(96),
        i = e(437),
        c = e(54),
        u = e(438),
        a = e(439),
        f = e(442),
        s = e(443),
        l = e(444),
        h = e(446),
        p = e(186),
        b = e(447),
        v = e(188),
        g = e(451),
        d = e(452),
        j = e(461),
        O = e(8),
        y = e(82),
        m = e(12),
        x = e(10),
        _ = 1,
        w = 2,
        E = 4,
        M = "[object Arguments]",
        S = "[object Function]",
        T = "[object GeneratorFunction]",
        P = "[object Object]",
        k = {};k[M] = k["[object Array]"] = k["[object ArrayBuffer]"] = k["[object DataView]"] = k["[object Boolean]"] = k["[object Date]"] = k["[object Float32Array]"] = k["[object Float64Array]"] = k["[object Int8Array]"] = k["[object Int16Array]"] = k["[object Int32Array]"] = k["[object Map]"] = k["[object Number]"] = k[P] = k["[object RegExp]"] = k["[object Set]"] = k["[object String]"] = k["[object Symbol]"] = k["[object Uint8Array]"] = k["[object Uint8ClampedArray]"] = k["[object Uint16Array]"] = k["[object Uint32Array]"] = !0, k["[object Error]"] = k[S] = k["[object WeakMap]"] = !1, t.exports = r;
  }, function (t, n) {
    t.exports = function () {
      return [];
    };
  }, function (t, n, e) {
    var r = e(101),
        o = e(102),
        i = e(100),
        c = e(184),
        u = Object.getOwnPropertySymbols ? function (t) {
      for (var n = []; t;) {
        r(n, i(t)), t = o(t);
      }return n;
    } : c;t.exports = u;
  }, function (t, n, e) {
    var r = e(187),
        o = e(100),
        i = e(10);t.exports = function (t) {
      return r(t, i, o);
    };
  }, function (t, n, e) {
    var r = e(101),
        o = e(8);t.exports = function (t, n, e) {
      var i = n(t);return o(t) ? i : r(i, e(t));
    };
  }, function (t, n, e) {
    var r = e(448),
        o = e(97),
        i = e(449),
        c = e(189),
        u = e(450),
        a = e(19),
        f = e(138),
        s = f(r),
        l = f(o),
        h = f(i),
        p = f(c),
        b = f(u),
        v = a;(r && "[object DataView]" != v(new r(new ArrayBuffer(1))) || o && "[object Map]" != v(new o()) || i && "[object Promise]" != v(i.resolve()) || c && "[object Set]" != v(new c()) || u && "[object WeakMap]" != v(new u())) && (v = function v(t) {
      var n = a(t),
          e = "[object Object]" == n ? t.constructor : void 0,
          r = e ? f(e) : "";if (r) switch (r) {case s:
          return "[object DataView]";case l:
          return "[object Map]";case h:
          return "[object Promise]";case p:
          return "[object Set]";case b:
          return "[object WeakMap]";}return n;
    }), t.exports = v;
  }, function (t, n, e) {
    var r = e(24)(e(13), "Set");t.exports = r;
  }, function (t, n, e) {
    var r = e(13).Uint8Array;t.exports = r;
  }, function (t, n) {
    t.exports = function (t, n, e, r) {
      var o = -1,
          i = null == t ? 0 : t.length;for (r && i && (e = t[++o]); ++o < i;) {
        e = n(e, t[o], o, t);
      }return e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = -1,
          e = Array(t.size);return t.forEach(function (t, r) {
        e[++n] = [r, t];
      }), e;
    };
  }, function (t, n, e) {
    var r = e(96),
        o = e(194),
        i = 1,
        c = 2;t.exports = function (t, n, e, u) {
      var a = e.length,
          f = a,
          s = !u;if (null == t) return !f;for (t = Object(t); a--;) {
        var l = e[a];if (s && l[2] ? l[1] !== t[l[0]] : !(l[0] in t)) return !1;
      }for (; ++a < f;) {
        var h = (l = e[a])[0],
            p = t[h],
            b = l[1];if (s && l[2]) {
          if (void 0 === p && !(h in t)) return !1;
        } else {
          var v = new r();if (u) var g = u(p, b, h, t, n, v);if (!(void 0 === g ? o(b, p, i | c, u, v) : g)) return !1;
        }
      }return !0;
    };
  }, function (t, n, e) {
    function r(t, n, e, c, u) {
      return t === n || (null == t || null == n || !i(t) && !i(n) ? t != t && n != n : o(t, n, e, c, r, u));
    }var o = e(466),
        i = e(15);t.exports = r;
  }, function (t, n, e) {
    var r = e(104),
        o = e(469),
        i = e(105),
        c = 1,
        u = 2;t.exports = function (t, n, e, a, f, s) {
      var l = e & c,
          h = t.length,
          p = n.length;if (h != p && !(l && p > h)) return !1;var b = s.get(t);if (b && s.get(n)) return b == n;var v = -1,
          g = !0,
          d = e & u ? new r() : void 0;for (s.set(t, n), s.set(n, t); ++v < h;) {
        var j = t[v],
            O = n[v];if (a) var y = l ? a(O, j, v, n, t, s) : a(j, O, v, t, n, s);if (void 0 !== y) {
          if (y) continue;g = !1;break;
        }if (d) {
          if (!o(n, function (t, n) {
            if (!i(d, n) && (j === t || f(j, t, e, a, s))) return d.push(n);
          })) {
            g = !1;break;
          }
        } else if (j !== O && !f(j, O, e, a, s)) {
          g = !1;break;
        }
      }return s.delete(t), s.delete(n), g;
    };
  }, function (t, n, e) {
    var r = e(197),
        o = e(10);t.exports = function (t) {
      for (var n = o(t), e = n.length; e--;) {
        var i = n[e],
            c = t[i];n[e] = [i, c, r(c)];
      }return n;
    };
  }, function (t, n, e) {
    var r = e(12);t.exports = function (t) {
      return t == t && !r(t);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      return function (e) {
        return null != e && e[t] === n && (void 0 !== n || t in Object(e));
      };
    };
  }, function (t, n, e) {
    var r = e(477);t.exports = function (t) {
      return null == t ? "" : r(t);
    };
  }, function (t, n, e) {
    var r = e(478),
        o = e(201);t.exports = function (t, n) {
      return null != t && o(t, n, r);
    };
  }, function (t, n, e) {
    var r = e(68),
        o = e(81),
        i = e(8),
        c = e(56),
        u = e(80),
        a = e(44);t.exports = function (t, n, e) {
      for (var f = -1, s = (n = r(n, t)).length, l = !1; ++f < s;) {
        var h = a(n[f]);if (!(l = null != t && e(t, h))) break;t = t[h];
      }return l || ++f != s ? l : !!(s = null == t ? 0 : t.length) && u(s) && c(h, s) && (i(t) || o(t));
    };
  }, function (t, n) {
    t.exports = function (t, n, e, r) {
      for (var o = t.length, i = e + (r ? 1 : -1); r ? i-- : ++i < o;) {
        if (n(t[i], i, t)) return i;
      }return -1;
    };
  }, function (t, n, e) {
    var r = e(486)();t.exports = r;
  }, function (t, n, e) {
    var r = e(9),
        o = e(7),
        i = e(0),
        c = e(170),
        u = e(496);t.exports = function (t) {
      if (r(t)) return t();if (o(t)) {
        if (i[t]) return i[t]();if (c[t]) return c[t]();if (u[t]) return u[t]();
      }return null;
    };
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(206);e.d(n, "geoArea", function () {
      return r.c;
    });var o = e(497);e.d(n, "geoBounds", function () {
      return o.a;
    });var i = e(498);e.d(n, "geoCentroid", function () {
      return i.a;
    });var c = e(207);e.d(n, "geoCircle", function () {
      return c.b;
    });var u = e(209);e.d(n, "geoClipExtent", function () {
      return u.b;
    });var a = e(501);e.d(n, "geoDistance", function () {
      return a.a;
    });var f = e(502);e.d(n, "geoGraticule", function () {
      return f.a;
    });var s = e(503);e.d(n, "geoInterpolate", function () {
      return s.a;
    });var l = e(213);e.d(n, "geoLength", function () {
      return l.a;
    });var h = e(504);e.d(n, "geoPath", function () {
      return h.a;
    });var p = e(216);e.d(n, "geoAlbers", function () {
      return p.a;
    });var b = e(513);e.d(n, "geoAlbersUsa", function () {
      return b.a;
    });var v = e(514);e.d(n, "geoAzimuthalEqualArea", function () {
      return v.b;
    }), e.d(n, "geoAzimuthalEqualAreaRaw", function () {
      return v.a;
    });var g = e(515);e.d(n, "geoAzimuthalEquidistant", function () {
      return g.b;
    }), e.d(n, "geoAzimuthalEquidistantRaw", function () {
      return g.a;
    });var d = e(516);e.d(n, "geoConicConformal", function () {
      return d.b;
    }), e.d(n, "geoConicConformalRaw", function () {
      return d.a;
    });var j = e(110);e.d(n, "geoConicEqualArea", function () {
      return j.b;
    }), e.d(n, "geoConicEqualAreaRaw", function () {
      return j.a;
    });var O = e(517);e.d(n, "geoConicEquidistant", function () {
      return O.b;
    }), e.d(n, "geoConicEquidistantRaw", function () {
      return O.a;
    });var y = e(219);e.d(n, "geoEquirectangular", function () {
      return y.a;
    }), e.d(n, "geoEquirectangularRaw", function () {
      return y.b;
    });var m = e(518);e.d(n, "geoGnomonic", function () {
      return m.a;
    }), e.d(n, "geoGnomonicRaw", function () {
      return m.b;
    });var x = e(17);e.d(n, "geoProjection", function () {
      return x.a;
    }), e.d(n, "geoProjectionMutator", function () {
      return x.b;
    });var _ = e(113);e.d(n, "geoMercator", function () {
      return _.a;
    }), e.d(n, "geoMercatorRaw", function () {
      return _.c;
    });var w = e(519);e.d(n, "geoOrthographic", function () {
      return w.a;
    }), e.d(n, "geoOrthographicRaw", function () {
      return w.b;
    });var E = e(520);e.d(n, "geoStereographic", function () {
      return E.a;
    }), e.d(n, "geoStereographicRaw", function () {
      return E.b;
    });var M = e(521);e.d(n, "geoTransverseMercator", function () {
      return M.a;
    }), e.d(n, "geoTransverseMercatorRaw", function () {
      return M.b;
    });var S = e(109);e.d(n, "geoRotation", function () {
      return S.a;
    });var T = e(28);e.d(n, "geoStream", function () {
      return T.a;
    });var P = e(112);e.d(n, "geoTransform", function () {
      return P.a;
    });
  }, function (t, n, e) {
    "use strict";
    function r() {
      j.point = i;
    }function o() {
      c(u, a);
    }function i(t, n) {
      j.point = c, u = t, a = n, t *= p.r, n *= p.r, f = t, s = Object(p.g)(n = n / 2 + p.q), l = Object(p.t)(n);
    }function c(t, n) {
      t *= p.r, n = (n *= p.r) / 2 + p.q;var e = t - f,
          r = e >= 0 ? 1 : -1,
          o = r * e,
          i = Object(p.g)(n),
          c = Object(p.t)(n),
          u = l * c,
          a = s * i + u * Object(p.g)(o),
          h = u * r * Object(p.t)(o);g.add(Object(p.e)(h, a)), f = t, s = i, l = c;
    }e.d(n, "a", function () {
      return g;
    }), e.d(n, "b", function () {
      return j;
    });var u,
        a,
        f,
        s,
        l,
        h = e(45),
        p = e(4),
        b = e(27),
        v = e(28),
        g = Object(h.a)(),
        d = Object(h.a)(),
        j = { point: b.a, lineStart: b.a, lineEnd: b.a, polygonStart: function polygonStart() {
        g.reset(), j.lineStart = r, j.lineEnd = o;
      }, polygonEnd: function polygonEnd() {
        var t = +g;d.add(t < 0 ? p.w + t : t), this.lineStart = this.lineEnd = this.point = b.a;
      }, sphere: function sphere() {
        d.add(p.w);
      } };n.c = function (t) {
      return d.reset(), Object(v.a)(t, j), 2 * d;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r, c, a) {
      if (e) {
        var f = Object(u.g)(n),
            s = Object(u.t)(n),
            l = r * e;null == c ? (c = n + r * u.w, a = n - l / 2) : (c = o(f, c), a = o(f, a), (r > 0 ? c < a : c > a) && (c += r * u.w));for (var h, p = c; r > 0 ? p > a : p < a; p -= l) {
          h = Object(i.g)([f, -s * Object(u.g)(p), -s * Object(u.t)(p)]), t.point(h[0], h[1]);
        }
      }
    }function o(t, n) {
      (n = Object(i.a)(n))[0] -= t, Object(i.e)(n);var e = Object(u.b)(-n[1]);return ((-n[2] < 0 ? -e : e) + u.w - u.i) % u.w;
    }n.a = r;var i = e(46),
        c = e(499),
        u = e(4),
        a = e(109);n.b = function () {
      function t() {
        var t = o.apply(this, arguments),
            c = i.apply(this, arguments) * u.r,
            l = f.apply(this, arguments) * u.r;return n = [], e = Object(a.b)(-t[0] * u.r, -t[1] * u.r, 0).invert, r(s, c, l, 1), t = { type: "Polygon", coordinates: [n] }, n = e = null, t;
      }var n,
          e,
          o = Object(c.a)([0, 0]),
          i = Object(c.a)(90),
          f = Object(c.a)(6),
          s = { point: function point(t, r) {
          n.push(t = e(t, r)), t[0] *= u.h, t[1] *= u.h;
        } };return t.center = function (n) {
        return arguments.length ? (o = "function" == typeof n ? n : Object(c.a)([+n[0], +n[1]]), t) : o;
      }, t.radius = function (n) {
        return arguments.length ? (i = "function" == typeof n ? n : Object(c.a)(+n), t) : i;
      }, t.precision = function (n) {
        return arguments.length ? (f = "function" == typeof n ? n : Object(c.a)(+n), t) : f;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      function e(e, r) {
        return e = t(e, r), n(e[0], e[1]);
      }return t.invert && n.invert && (e.invert = function (e, r) {
        return (e = n.invert(e, r)) && t.invert(e[0], e[1]);
      }), e;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r) {
      function l(o, i) {
        return t <= o && o <= e && n <= i && i <= r;
      }function h(o, i, c, u) {
        var a = 0,
            f = 0;if (null == o || (a = p(o, c)) !== (f = p(i, c)) || v(o, i) < 0 ^ c > 0) do {
          u.point(0 === a || 3 === a ? t : e, a > 1 ? r : n);
        } while ((a = (a + c + 4) % 4) !== f);else u.point(i[0], i[1]);
      }function p(r, i) {
        return Object(o.a)(r[0] - t) < o.i ? i > 0 ? 0 : 3 : Object(o.a)(r[0] - e) < o.i ? i > 0 ? 2 : 1 : Object(o.a)(r[1] - n) < o.i ? i > 0 ? 1 : 0 : i > 0 ? 3 : 2;
      }function b(t, n) {
        return v(t.x, n.x);
      }function v(t, n) {
        var e = p(t, 1),
            r = p(n, 1);return e !== r ? e - r : 0 === e ? n[1] - t[1] : 1 === e ? t[0] - n[0] : 2 === e ? t[1] - n[1] : n[0] - t[0];
      }return function (o) {
        function p(t, n) {
          l(t, n) && S.point(t, n);
        }function v(o, i) {
          var u = l(o, i);if (d && j.push([o, i]), E) O = o, y = i, m = u, E = !1, u && (S.lineStart(), S.point(o, i));else if (u && w) S.point(o, i);else {
            var a = [x = Math.max(s, Math.min(f, x)), _ = Math.max(s, Math.min(f, _))],
                h = [o = Math.max(s, Math.min(f, o)), i = Math.max(s, Math.min(f, i))];Object(c.a)(a, h, t, n, e, r) ? (w || (S.lineStart(), S.point(a[0], a[1])), S.point(h[0], h[1]), u || S.lineEnd(), M = !1) : u && (S.lineStart(), S.point(o, i), M = !1);
          }x = o, _ = i, w = u;
        }var g,
            d,
            j,
            O,
            y,
            m,
            x,
            _,
            w,
            E,
            M,
            S = o,
            T = Object(i.a)(),
            P = { point: p, lineStart: function lineStart() {
            P.point = v, d && d.push(j = []), E = !0, w = !1, x = _ = NaN;
          }, lineEnd: function lineEnd() {
            g && (v(O, y), m && w && T.rejoin(), g.push(T.result())), P.point = p, w && S.lineEnd();
          }, polygonStart: function polygonStart() {
            S = T, g = [], d = [], M = !0;
          }, polygonEnd: function polygonEnd() {
            var n = function () {
              for (var n = 0, e = 0, o = d.length; e < o; ++e) {
                for (var i, c, u = d[e], a = 1, f = u.length, s = u[0], l = s[0], h = s[1]; a < f; ++a) {
                  i = l, c = h, l = (s = u[a])[0], h = s[1], c <= r ? h > r && (l - i) * (r - c) > (h - c) * (t - i) && ++n : h <= r && (l - i) * (r - c) < (h - c) * (t - i) && --n;
                }
              }return n;
            }(),
                e = M && n,
                i = (g = Object(a.b)(g)).length;(e || i) && (o.polygonStart(), e && (o.lineStart(), h(null, null, 1, o), o.lineEnd()), i && Object(u.a)(g, b, n, h, o), o.polygonEnd()), S = o, g = d = j = null;
          } };return P;
      };
    }n.a = r;var o = e(4),
        i = e(210),
        c = e(500),
        u = e(211),
        a = e(14),
        f = 1e9,
        s = -f;n.b = function () {
      var t,
          n,
          e,
          o = 0,
          i = 0,
          c = 960,
          u = 500;return e = { stream: function stream(e) {
          return t && n === e ? t : t = r(o, i, c, u)(n = e);
        }, extent: function extent(r) {
          return arguments.length ? (o = +r[0][0], i = +r[0][1], c = +r[1][0], u = +r[1][1], t = n = null, e) : [[o, i], [c, u]];
        } };
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(27);n.a = function () {
      var t,
          n = [];return { point: function point(n, e) {
          t.push([n, e]);
        }, lineStart: function lineStart() {
          n.push(t = []);
        }, lineEnd: r.a, rejoin: function rejoin() {
          n.length > 1 && n.push(n.pop().concat(n.shift()));
        }, result: function result() {
          var e = n;return n = [], t = null, e;
        } };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r) {
      this.x = t, this.z = n, this.o = e, this.e = r, this.v = !1, this.n = this.p = null;
    }function o(t) {
      if (n = t.length) {
        for (var n, e, r = 0, o = t[0]; ++r < n;) {
          o.n = e = t[r], e.p = o, o = e;
        }o.n = e = t[0], e.p = o;
      }
    }var i = e(212);n.a = function (t, n, e, c, u) {
      var a,
          f,
          s = [],
          l = [];if (t.forEach(function (t) {
        if (!((n = t.length - 1) <= 0)) {
          var n,
              e,
              o = t[0],
              c = t[n];if (Object(i.a)(o, c)) {
            for (u.lineStart(), a = 0; a < n; ++a) {
              u.point((o = t[a])[0], o[1]);
            }u.lineEnd();
          } else s.push(e = new r(o, t, null, !0)), l.push(e.o = new r(o, null, e, !1)), s.push(e = new r(c, t, null, !1)), l.push(e.o = new r(c, null, e, !0));
        }
      }), s.length) {
        for (l.sort(n), o(s), o(l), a = 0, f = l.length; a < f; ++a) {
          l[a].e = e = !e;
        }for (var h, p, b = s[0];;) {
          for (var v = b, g = !0; v.v;) {
            if ((v = v.n) === b) return;
          }h = v.z, u.lineStart();do {
            if (v.v = v.o.v = !0, v.e) {
              if (g) for (a = 0, f = h.length; a < f; ++a) {
                u.point((p = h[a])[0], p[1]);
              } else c(v.x, v.n.x, 1, u);v = v.n;
            } else {
              if (g) for (h = v.p.z, a = h.length - 1; a >= 0; --a) {
                u.point((p = h[a])[0], p[1]);
              } else c(v.x, v.p.x, -1, u);v = v.p;
            }h = (v = v.o).z, g = !g;
          } while (!v.v);u.lineEnd();
        }
      }
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(4);n.a = function (t, n) {
      return Object(r.a)(t[0] - n[0]) < r.i && Object(r.a)(t[1] - n[1]) < r.i;
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      b.point = b.lineEnd = l.a;
    }function o(t, n) {
      t *= s.r, n *= s.r, c = t, u = Object(s.t)(n), a = Object(s.g)(n), b.point = i;
    }function i(t, n) {
      t *= s.r, n *= s.r;var e = Object(s.t)(n),
          r = Object(s.g)(n),
          o = Object(s.a)(t - c),
          i = Object(s.g)(o),
          f = r * Object(s.t)(o),
          l = a * e - u * r * i,
          h = u * e + a * r * i;p.add(Object(s.e)(Object(s.u)(f * f + l * l), h)), c = t, u = e, a = r;
    }var c,
        u,
        a,
        f = e(45),
        s = e(4),
        l = e(27),
        h = e(28),
        p = Object(f.a)(),
        b = { sphere: l.a, point: l.a, lineStart: function lineStart() {
        b.point = o, b.lineEnd = r;
      }, lineEnd: l.a, polygonStart: l.a, polygonEnd: l.a };n.a = function (t) {
      return p.reset(), Object(h.a)(t, b), +p;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(27),
        o = 1 / 0,
        i = o,
        c = -o,
        u = c,
        a = { point: function point(t, n) {
        t < o && (o = t), t > c && (c = t), n < i && (i = n), n > u && (u = n);
      }, lineStart: r.a, lineEnd: r.a, polygonStart: r.a, polygonEnd: r.a, result: function result() {
        var t = [[o, i], [c, u]];return c = u = -(i = o = 1 / 0), t;
      } };n.a = a;
  }, function (t, n, e) {
    "use strict";
    var r = e(110);n.a = function () {
      return Object(r.b)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-.6, 38.7]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.length > 1;
    }function o(t, n) {
      return ((t = t.x)[0] < 0 ? t[1] - u.l - u.i : u.l - t[1]) - ((n = n.x)[0] < 0 ? n[1] - u.l - u.i : u.l - n[1]);
    }var i = e(210),
        c = e(211),
        u = e(4),
        a = e(510),
        f = e(14);n.a = function (t, n, e, u) {
      return function (s, l) {
        function h(n, e) {
          var r = s(n, e);t(n = r[0], e = r[1]) && l.point(n, e);
        }function p(t, n) {
          var e = s(t, n);x.point(e[0], e[1]);
        }function b() {
          S.point = p, x.lineStart();
        }function v() {
          S.point = h, x.lineEnd();
        }function g(t, n) {
          m.push([t, n]);var e = s(t, n);E.point(e[0], e[1]);
        }function d() {
          E.lineStart(), m = [];
        }function j() {
          g(m[0][0], m[0][1]), E.lineEnd();var t,
              n,
              e,
              o,
              i = E.clean(),
              c = w.result(),
              u = c.length;if (m.pop(), O.push(m), m = null, u) if (1 & i) {
            if (e = c[0], (n = e.length - 1) > 0) {
              for (M || (l.polygonStart(), M = !0), l.lineStart(), t = 0; t < n; ++t) {
                l.point((o = e[t])[0], o[1]);
              }l.lineEnd();
            }
          } else u > 1 && 2 & i && c.push(c.pop().concat(c.shift())), y.push(c.filter(r));
        }var O,
            y,
            m,
            x = n(l),
            _ = s.invert(u[0], u[1]),
            w = Object(i.a)(),
            E = n(w),
            M = !1,
            S = { point: h, lineStart: b, lineEnd: v, polygonStart: function polygonStart() {
            S.point = g, S.lineStart = d, S.lineEnd = j, y = [], O = [];
          }, polygonEnd: function polygonEnd() {
            S.point = h, S.lineStart = b, S.lineEnd = v, y = Object(f.b)(y);var t = Object(a.a)(O, _);y.length ? (M || (l.polygonStart(), M = !0), Object(c.a)(y, o, t, e, l)) : t && (M || (l.polygonStart(), M = !0), l.lineStart(), e(null, null, 1, l), l.lineEnd()), M && (l.polygonEnd(), M = !1), y = O = null;
          }, sphere: function sphere() {
            l.polygonStart(), l.lineStart(), e(null, null, 1, l), l.lineEnd(), l.polygonEnd();
          } };return S;
      };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r = n[1][0] - n[0][0],
          c = n[1][1] - n[0][1],
          u = t.clipExtent && t.clipExtent();t.scale(150).translate([0, 0]), null != u && t.clipExtent(null), Object(o.a)(e, t.stream(i.a));var a = i.a.result(),
          f = Math.min(r / (a[1][0] - a[0][0]), c / (a[1][1] - a[0][1])),
          s = +n[0][0] + (r - f * (a[1][0] + a[0][0])) / 2,
          l = +n[0][1] + (c - f * (a[1][1] + a[0][1])) / 2;return null != u && t.clipExtent(u), t.scale(150 * f).translate([s, l]);
    }n.b = function (t) {
      return function (n, e) {
        return r(t, [[0, 0], n], e);
      };
    }, n.a = function (t) {
      return function (n, e) {
        return r(t, n, e);
      };
    };var o = e(28),
        i = e(215);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t, n];
    }n.b = r;var o = e(17);r.invert = r, n.a = function () {
      return Object(o.a)(r).scale(152.63);
    };
  }, function (t, n, e) {
    var r = e(530),
        o = e(531)(r);t.exports = o;
  }, function (t, n, e) {
    var r = e(71),
        o = 1 / 0;t.exports = function (t) {
      return (null == t ? 0 : t.length) ? r(t, o) : [];
    };
  }, function (t, n, e) {
    var r = e(223);t.exports = function (t) {
      if (1 === t.length) return 0;var n = r(t);return Math.sqrt(n);
    };
  }, function (t, n, e) {
    var r = e(115);t.exports = function (t) {
      if (0 === t.length) throw new Error("variance requires at least one data point");return r(t, 2) / t.length;
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) return 0;for (var n, e = t[0], r = 0, o = 1; o < t.length; o++) {
        n = e + t[o], Math.abs(e) >= Math.abs(t[o]) ? r += e - n + t[o] : r += t[o] - n + e, e = n;
      }return e + r;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return t.slice().sort(function (t, n) {
        return t - n;
      });
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) throw new Error("mode requires at least one data point");if (1 === t.length) return t[0];for (var n = t[0], e = NaN, r = 0, o = 1, i = 1; i < t.length + 1; i++) {
        t[i] !== n ? (o > r && (r = o, e = n), o = 1, n = t[i]) : o++;
      }return e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) throw new Error("min requires at least one data point");for (var n = t[0], e = 1; e < t.length; e++) {
        t[e] < n && (n = t[e]);
      }return n;
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) throw new Error("max requires at least one data point");for (var n = t[0], e = 1; e < t.length; e++) {
        t[e] > n && (n = t[e]);
      }return n;
    };
  }, function (t, n, e) {
    var r = e(116);t.exports = function (t) {
      return +r(t, .5);
    };
  }, function (t, n, e) {
    var r = e(231);t.exports = function (t, n) {
      var e = t.slice();return r(e.slice(), n);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      n = n || Math.random;for (var e, r, o = t.length; o > 0;) {
        r = Math.floor(n() * o--), e = t[o], t[o] = t[r], t[r] = e;
      }return t;
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n, e = 0, r = 0; r < t.length; r++) {
        0 !== r && t[r] === n || (n = t[r], e++);
      }return e;
    };
  }, function (t, n, e) {
    var r = e(23);t.exports = function (t, n) {
      if (t.length !== n.length) throw new Error("sampleCovariance requires samples with equal lengths");if (t.length < 2) throw new Error("sampleCovariance requires at least two data points in each sample");for (var e = r(t), o = r(n), i = 0, c = 0; c < t.length; c++) {
        i += (t[c] - e) * (n[c] - o);
      }return i / (t.length - 1);
    };
  }, function (t, n, e) {
    var r = e(118);t.exports = function (t) {
      var n = r(t);return Math.sqrt(n);
    };
  }, function (t, n) {
    t.exports = function (t, n, e, r) {
      return (t * n + e * r) / (n + r);
    };
  }, function (t, n) {
    function e(t) {
      for (var n = t, e = t, o = 1; o < 15; o++) {
        n += e *= t * t / (2 * o + 1);
      }return Math.round(1e4 * (.5 + n / r * Math.exp(-t * t / 2))) / 1e4;
    }for (var r = Math.sqrt(2 * Math.PI), o = [], i = 0; i <= 3.09; i += .01) {
      o.push(e(i));
    }t.exports = o;
  }, function (t, n) {
    t.exports = function (t) {
      var n = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI)),
          e = Math.sqrt(Math.sqrt(Math.pow(2 / (Math.PI * n) + Math.log(1 - t * t) / 2, 2) - Math.log(1 - t * t) / n) - (2 / (Math.PI * n) + Math.log(1 - t * t) / 2));return t >= 0 ? e : -e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n = 1 / t, e = [], r = 0; r <= 1; r += n) {
        e.push(r);
      }return e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return null == t;
    };
  }, function (t, n, e) {
    function r(t, n, e) {
      e.dataType = a;var r = c(t.features);return r.forEach(function (t) {
        t.name = t.properties.name, t.longitude = [], t.latitude = [];var n = t.pathData = s(t);o(n)._path.forEach(function (n) {
          t.longitude.push(n[1]), t.latitude.push(n[2]);
        });var e = s.centroid(t);t.centroidX = e[0], t.centroidY = e[1];
      }), r;
    }var o = e(241),
        i = e(0).geoPath,
        c = e(108),
        u = e(2),
        a = u.GEO,
        f = u.registerConnector,
        s = i();f("geo", r), f("geojson", r), f("GeoJSON", r), t.exports = r;
  }, function (t, n, e) {
    function r(t) {
      if (!(this instanceof r)) return new r(t);this._path = c(t) ? t : i(t), this._path = u(this._path), this._path = function (t) {
        for (var n = [], e = ["L", 0, 0], r = 0, o = t.length; r < o; r++) {
          var i = t[r];switch (i[0]) {case "M":
              e = ["L", i[1], i[2]], n.push(i);break;case "Z":
              n.push(e);break;default:
              n.push(i);}
        }return n;
      }(this._path);
    }function o(t, n, e, r) {
      var o = t - e,
          i = n - r;return Math.sqrt(o * o + i * i);
    }var i = e(587),
        c = e(588),
        u = e(589);t.exports = r, r.prototype.at = function (t, n) {
      return this._walk(t, n).pos;
    }, r.prototype.length = function () {
      return this._walk(null).length;
    }, r.prototype._walk = function (t, n) {
      var e = [0, 0],
          r = [0, 0, 0],
          i = 0;"number" == typeof t && (t *= 1.045);for (var c = 0; c < this._path.length; c++) {
        var u = this._path[c];if ("M" === u[0]) {
          if (e[0] = u[1], e[1] = u[2], 0 === t) return { length: i, pos: e };
        } else if ("C" === u[0]) {
          r[0] = e[0], r[1] = e[1], r[2] = i;for (var a = 100, f = 0; f <= a; f++) {
            var s = function (t, n) {
              return Math.pow(1 - n, 3) * e[0] + 3 * Math.pow(1 - n, 2) * n * t[1] + 3 * (1 - n) * Math.pow(n, 2) * t[3] + Math.pow(n, 3) * t[5];
            }(u, h = f / a),
                l = function (t, n) {
              return Math.pow(1 - n, 3) * e[1] + 3 * Math.pow(1 - n, 2) * n * t[2] + 3 * (1 - n) * Math.pow(n, 2) * t[4] + Math.pow(n, 3) * t[6];
            }(u, h);if (i += o(e[0], e[1], s, l), e[0] = s, e[1] = l, "number" == typeof t && i >= t) {
              p = (i - t) / (i - r[2]);return { length: i, pos: b = [e[0] * (1 - p) + r[0] * p, e[1] * (1 - p) + r[1] * p] };
            }r[0] = e[0], r[1] = e[1], r[2] = i;
          }
        } else if ("Q" === u[0]) {
          r[0] = e[0], r[1] = e[1], r[2] = i;for (var a = 100, f = 0; f <= a; f++) {
            var h = f / a,
                s = function (t, n) {
              return Math.pow(1 - n, 2) * e[0] + 2 * (1 - n) * n * t[1] + Math.pow(n, 2) * t[3];
            }(u, h),
                l = function (t, n) {
              return Math.pow(1 - n, 2) * e[1] + 2 * (1 - n) * n * t[2] + Math.pow(n, 2) * t[4];
            }(u, h);if (i += o(e[0], e[1], s, l), e[0] = s, e[1] = l, "number" == typeof t && i >= t) {
              p = (i - t) / (i - r[2]);return { length: i, pos: b = [e[0] * (1 - p) + r[0] * p, e[1] * (1 - p) + r[1] * p] };
            }r[0] = e[0], r[1] = e[1], r[2] = i;
          }
        } else if ("L" === u[0]) {
          if (r[0] = e[0], r[1] = e[1], r[2] = i, i += o(e[0], e[1], u[1], u[2]), e[0] = u[1], e[1] = u[2], "number" == typeof t && i >= t) {
            var p = (i - t) / (i - r[2]),
                b = [e[0] * (1 - p) + r[0] * p, e[1] * (1 - p) + r[1] * p];return { length: i, pos: b };
          }r[0] = e[0], r[1] = e[1], r[2] = i;
        }
      }return { length: i / 1.045, pos: e };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r = t.x,
          o = t.y,
          i = n.r + e.r,
          c = t.r + e.r,
          u = n.x - r,
          a = n.y - o,
          f = u * u + a * a;if (f) {
        var s = .5 + ((c *= c) - (i *= i)) / (2 * f),
            l = Math.sqrt(Math.max(0, 2 * i * (c + f) - (c -= f) * c - i * i)) / (2 * f);e.x = r + s * u + l * a, e.y = o + s * a - l * u;
      } else e.x = r + c, e.y = o;
    }function o(t, n) {
      var e = n.x - t.x,
          r = n.y - t.y,
          o = t.r + n.r;return o * o - 1e-6 > e * e + r * r;
    }function i(t) {
      var n = t._,
          e = t.next._,
          r = n.r + e.r,
          o = (n.x * e.r + e.x * n.r) / r,
          i = (n.y * e.r + e.y * n.r) / r;return o * o + i * i;
    }function c(t) {
      this._ = t, this.next = null, this.previous = null;
    }function u(t) {
      if (!(f = t.length)) return 0;var n, e, u, f, s, l, h, p, b, v, g;if (n = t[0], n.x = 0, n.y = 0, !(f > 1)) return n.r;if (e = t[1], n.x = -e.r, e.x = n.r, e.y = 0, !(f > 2)) return n.r + e.r;r(e, n, u = t[2]), n = new c(n), e = new c(e), u = new c(u), n.next = u.previous = e, e.next = n.previous = u, u.next = e.previous = n;t: for (h = 3; h < f; ++h) {
        r(n._, e._, u = t[h]), u = new c(u), p = e.next, b = n.previous, v = e._.r, g = n._.r;do {
          if (v <= g) {
            if (o(p._, u._)) {
              e = p, n.next = e, e.previous = n, --h;continue t;
            }v += p._.r, p = p.next;
          } else {
            if (o(b._, u._)) {
              (n = b).next = e, e.previous = n, --h;continue t;
            }g += b._.r, b = b.previous;
          }
        } while (p !== b.next);for (u.previous = n, u.next = e, n.next = e.previous = e = u, s = i(n); (u = u.next) !== e;) {
          (l = i(u)) < s && (n = u, s = l);
        }e = n.next;
      }for (n = [e._], u = e; (u = u.next) !== e;) {
        n.push(u._);
      }for (u = Object(a.a)(n), h = 0; h < f; ++h) {
        (n = t[h]).x -= u.x, n.y -= u.y;
      }return u.r;
    }n.b = u;var a = e(243);n.a = function (t) {
      return u(t), t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = t.r - n.r,
          r = n.x - t.x,
          o = n.y - t.y;return e < 0 || e * e < r * r + o * o;
    }function o(t, n) {
      var e = t.r - n.r + 1e-6,
          r = n.x - t.x,
          o = n.y - t.y;return e > 0 && e * e > r * r + o * o;
    }function i(t, n) {
      for (var e = 0; e < n.length; ++e) {
        if (!o(t, n[e])) return !1;
      }return !0;
    }function c(t, n) {
      var e = t.x,
          r = t.y,
          o = t.r,
          i = n.x,
          c = n.y,
          u = n.r,
          a = i - e,
          f = c - r,
          s = u - o,
          l = Math.sqrt(a * a + f * f);return { x: (e + i + a / l * s) / 2, y: (r + c + f / l * s) / 2, r: (l + o + u) / 2 };
    }function u(t, n, e) {
      var r = t.x,
          o = t.y,
          i = t.r,
          c = n.x,
          u = n.y,
          a = n.r,
          f = e.x,
          s = e.y,
          l = e.r,
          h = r - c,
          p = r - f,
          b = o - u,
          v = o - s,
          g = a - i,
          d = l - i,
          j = r * r + o * o - i * i,
          O = j - c * c - u * u + a * a,
          y = j - f * f - s * s + l * l,
          m = p * b - h * v,
          x = (b * y - v * O) / (2 * m) - r,
          _ = (v * g - b * d) / m,
          w = (p * O - h * y) / (2 * m) - o,
          E = (h * d - p * g) / m,
          M = _ * _ + E * E - 1,
          S = 2 * (i + x * _ + w * E),
          T = x * x + w * w - i * i,
          P = -(M ? (S + Math.sqrt(S * S - 4 * M * T)) / (2 * M) : T / S);return { x: r + x + _ * P, y: o + w + E * P, r: P };
    }var a = e(605);n.a = function (t) {
      for (var n, e, f = 0, s = (t = Object(a.a)(a.b.call(t))).length, l = []; f < s;) {
        n = t[f], e && o(e, n) ? ++f : (e = function (t) {
          switch (t.length) {case 1:
              return function (t) {
                return { x: t.x, y: t.y, r: t.r };
              }(t[0]);case 2:
              return c(t[0], t[1]);case 3:
              return u(t[0], t[1], t[2]);}
        }(l = function (t, n) {
          var e, o;if (i(n, t)) return [n];for (e = 0; e < t.length; ++e) {
            if (r(n, t[e]) && i(c(t[e], n), t)) return [t[e], n];
          }for (e = 0; e < t.length - 1; ++e) {
            for (o = e + 1; o < t.length; ++o) {
              if (r(c(t[e], t[o]), n) && r(c(t[e], n), t[o]) && r(c(t[o], n), t[e]) && i(u(t[e], t[o], n), t)) return [t[e], t[o], n];
            }
          }throw new Error();
        }(l, n)), f = 0);
      }return e;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {
      return 0;
    }, n.b = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      t.x0 = Math.round(t.x0), t.y0 = Math.round(t.y0), t.x1 = Math.round(t.x1), t.y1 = Math.round(t.y1);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(124);n.a = function (t) {
      function n(t) {
        (t = i(t))[0] < c && (c = t[0]), t[0] > a && (a = t[0]), t[1] < u && (u = t[1]), t[1] > f && (f = t[1]);
      }function e(t) {
        switch (t.type) {case "GeometryCollection":
            t.geometries.forEach(e);break;case "Point":
            n(t.coordinates);break;case "MultiPoint":
            t.coordinates.forEach(n);}
      }var o,
          i = Object(r.a)(t.transform),
          c = 1 / 0,
          u = c,
          a = -c,
          f = -c;t.arcs.forEach(function (t) {
        for (var n, e = -1, r = t.length; ++e < r;) {
          (n = i(t[e], e))[0] < c && (c = n[0]), n[0] > a && (a = n[0]), n[1] < u && (u = n[1]), n[1] > f && (f = n[1]);
        }
      });for (o in t.objects) {
        e(t.objects[o]);
      }return [c, u, a, f];
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      function e(t, n) {
        for (var e in t) {
          var o = t[e];delete n[o.start], delete o.start, delete o.end, o.forEach(function (t) {
            r[t < 0 ? ~t : t] = 1;
          }), c.push(o);
        }
      }var r = {},
          o = {},
          i = {},
          c = [],
          u = -1;return n.forEach(function (e, r) {
        var o,
            i = t.arcs[e < 0 ? ~e : e];i.length < 3 && !i[1][0] && !i[1][1] && (o = n[++u], n[u] = e, n[r] = o);
      }), n.forEach(function (n) {
        var e,
            r,
            c = function (n) {
          var e,
              r = t.arcs[n < 0 ? ~n : n],
              o = r[0];return t.transform ? (e = [0, 0], r.forEach(function (t) {
            e[0] += t[0], e[1] += t[1];
          })) : e = r[r.length - 1], n < 0 ? [e, o] : [o, e];
        }(n),
            u = c[0],
            a = c[1];if (e = i[u]) {
          if (delete i[e.end], e.push(n), e.end = a, r = o[a]) {
            delete o[r.start];var f = r === e ? e : e.concat(r);o[f.start = e.start] = i[f.end = r.end] = f;
          } else o[e.start] = i[e.end] = e;
        } else if (e = o[a]) {
          if (delete o[e.start], e.unshift(n), e.start = u, r = i[u]) {
            delete i[r.end];var s = r === e ? e : r.concat(e);o[s.start = r.start] = i[s.end = e.end] = s;
          } else o[e.start] = i[e.end] = e;
        } else o[(e = [n]).start = u] = i[e.end = a] = e;
      }), e(i, o), e(o, i), n.forEach(function (t) {
        r[t < 0 ? ~t : t] || c.push([t]);
      }), c;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(247);n.a = function (t) {
      if (null == t) return r.a;var n,
          e,
          o = t.scale[0],
          i = t.scale[1],
          c = t.translate[0],
          u = t.translate[1];return function (t, r) {
        r || (n = e = 0);var a = 2,
            f = t.length,
            s = new Array(f),
            l = Math.round((t[0] - c) / o),
            h = Math.round((t[1] - u) / i);for (s[0] = l - n, n = l, s[1] = h - e, e = h; a < f;) {
          s[a] = t[a], ++a;
        }return s;
      };
    };
  }, function (t, n, e) {
    var r = e(626);t.exports = function (t, n) {
      return !!(null == t ? 0 : t.length) && r(t, n, 0) > -1;
    };
  }, function (t, n) {
    t.exports = function (t, n, e) {
      for (var r = -1, o = null == t ? 0 : t.length; ++r < o;) {
        if (e(n, t[r])) return !0;
      }return !1;
    };
  }, function (t, n) {
    var e = Array.prototype.reverse;t.exports = function (t) {
      return null == t ? t : e.call(t);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.target.depth;
    }n.c = function (t) {
      return t.depth;
    }, n.d = function (t, n) {
      return n - 1 - t.height;
    }, n.b = function (t, n) {
      return t.sourceLinks.length ? t.depth : n - 1;
    }, n.a = function (t) {
      return t.targetLinks.length ? t.depth : t.sourceLinks.length ? Object(o.c)(t.sourceLinks, r) - 1 : 0;
    };var o = e(14);
  }, function (t, n, e) {
    "use strict";
    var r = e(29),
        o = e(31),
        i = e(74),
        c = e(130),
        u = e(131);n.a = function () {
      function t(t) {
        var n,
            o,
            i,
            c,
            u,
            v = t.length,
            g = !1,
            d = new Array(v),
            j = new Array(v);for (null == h && (b = p(u = Object(r.path)())), n = 0; n <= v; ++n) {
          if (!(n < v && l(c = t[n], n, t)) === g) if (g = !g) o = n, b.areaStart(), b.lineStart();else {
            for (b.lineEnd(), b.lineStart(), i = n - 1; i >= o; --i) {
              b.point(d[i], j[i]);
            }b.lineEnd(), b.areaEnd();
          }g && (d[n] = +e(c, n, t), j[n] = +f(c, n, t), b.point(a ? +a(c, n, t) : d[n], s ? +s(c, n, t) : j[n]));
        }if (u) return b = null, u + "" || null;
      }function n() {
        return Object(c.a)().defined(l).curve(p).context(h);
      }var e = u.a,
          a = null,
          f = Object(o.a)(0),
          s = u.b,
          l = Object(o.a)(!0),
          h = null,
          p = i.a,
          b = null;return t.x = function (n) {
        return arguments.length ? (e = "function" == typeof n ? n : Object(o.a)(+n), a = null, t) : e;
      }, t.x0 = function (n) {
        return arguments.length ? (e = "function" == typeof n ? n : Object(o.a)(+n), t) : e;
      }, t.x1 = function (n) {
        return arguments.length ? (a = null == n ? null : "function" == typeof n ? n : Object(o.a)(+n), t) : a;
      }, t.y = function (n) {
        return arguments.length ? (f = "function" == typeof n ? n : Object(o.a)(+n), s = null, t) : f;
      }, t.y0 = function (n) {
        return arguments.length ? (f = "function" == typeof n ? n : Object(o.a)(+n), t) : f;
      }, t.y1 = function (n) {
        return arguments.length ? (s = null == n ? null : "function" == typeof n ? n : Object(o.a)(+n), t) : s;
      }, t.lineX0 = t.lineY0 = function () {
        return n().x(e).y(f);
      }, t.lineY1 = function () {
        return n().x(e).y(s);
      }, t.lineX1 = function () {
        return n().x(a).y(f);
      }, t.defined = function (n) {
        return arguments.length ? (l = "function" == typeof n ? n : Object(o.a)(!!n), t) : l;
      }, t.curve = function (n) {
        return arguments.length ? (p = n, null != h && (b = p(h)), t) : p;
      }, t.context = function (n) {
        return arguments.length ? (null == n ? h = b = null : b = p(h = n), t) : h;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._curve = t;
    }function o(t) {
      function n(n) {
        return new r(t(n));
      }return n._curve = t, n;
    }e.d(n, "a", function () {
      return i;
    }), n.b = o;var i = o(e(74).a);r.prototype = { areaStart: function areaStart() {
        this._curve.areaStart();
      }, areaEnd: function areaEnd() {
        this._curve.areaEnd();
      }, lineStart: function lineStart() {
        this._curve.lineStart();
      }, lineEnd: function lineEnd() {
        this._curve.lineEnd();
      }, point: function point(t, n) {
        this._curve.point(n * Math.sin(t), n * -Math.cos(t));
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      var n = t.curve;return t.angle = t.x, delete t.x, t.radius = t.y, delete t.y, t.curve = function (t) {
        return arguments.length ? n(Object(o.b)(t)) : n()._curve;
      }, t;
    }n.a = r;var o = e(255);e(130);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      return [(n = +n) * Math.cos(t -= Math.PI / 2), n * Math.sin(t)];
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return r;
    });var r = Array.prototype.slice;
  }, function (t, n, e) {
    "use strict";
    var r = e(50);n.a = { draw: function draw(t, n) {
        var e = Math.sqrt(n / r.j);t.moveTo(e, 0), t.arc(0, 0, e, 0, r.m);
      } };
  }, function (t, n, e) {
    "use strict";
    n.a = { draw: function draw(t, n) {
        var e = Math.sqrt(n / 5) / 2;t.moveTo(-3 * e, -e), t.lineTo(-e, -e), t.lineTo(-e, -3 * e), t.lineTo(e, -3 * e), t.lineTo(e, -e), t.lineTo(3 * e, -e), t.lineTo(3 * e, e), t.lineTo(e, e), t.lineTo(e, 3 * e), t.lineTo(-e, 3 * e), t.lineTo(-e, e), t.lineTo(-3 * e, e), t.closePath();
      } };
  }, function (t, n, e) {
    "use strict";
    var r = Math.sqrt(1 / 3),
        o = 2 * r;n.a = { draw: function draw(t, n) {
        var e = Math.sqrt(n / o),
            i = e * r;t.moveTo(0, -e), t.lineTo(i, 0), t.lineTo(0, e), t.lineTo(-i, 0), t.closePath();
      } };
  }, function (t, n, e) {
    "use strict";
    var r = e(50),
        o = Math.sin(r.j / 10) / Math.sin(7 * r.j / 10),
        i = Math.sin(r.m / 10) * o,
        c = -Math.cos(r.m / 10) * o;n.a = { draw: function draw(t, n) {
        var e = Math.sqrt(.8908130915292852 * n),
            o = i * e,
            u = c * e;t.moveTo(0, -e), t.lineTo(o, u);for (var a = 1; a < 5; ++a) {
          var f = r.m * a / 5,
              s = Math.cos(f),
              l = Math.sin(f);t.lineTo(l * e, -s * e), t.lineTo(s * o - l * u, l * o + s * u);
        }t.closePath();
      } };
  }, function (t, n, e) {
    "use strict";
    n.a = { draw: function draw(t, n) {
        var e = Math.sqrt(n),
            r = -e / 2;t.rect(r, r, e, e);
      } };
  }, function (t, n, e) {
    "use strict";
    var r = Math.sqrt(3);n.a = { draw: function draw(t, n) {
        var e = -Math.sqrt(n / (3 * r));t.moveTo(0, 2 * e), t.lineTo(-r * e, -e), t.lineTo(r * e, -e), t.closePath();
      } };
  }, function (t, n, e) {
    "use strict";
    var r = -.5,
        o = Math.sqrt(3) / 2,
        i = 1 / Math.sqrt(12),
        c = 3 * (i / 2 + 1);n.a = { draw: function draw(t, n) {
        var e = Math.sqrt(n / c),
            u = e / 2,
            a = e * i,
            f = u,
            s = e * i + e,
            l = -f,
            h = s;t.moveTo(u, a), t.lineTo(f, s), t.lineTo(l, h), t.lineTo(r * u - o * a, o * u + r * a), t.lineTo(r * f - o * s, o * f + r * s), t.lineTo(r * l - o * h, o * l + r * h), t.lineTo(r * u + o * a, r * a - o * u), t.lineTo(r * f + o * s, r * s - o * f), t.lineTo(r * l + o * h, r * h - o * l), t.closePath();
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      this._context = t, this._k = (1 - n) / 6;
    }n.a = r;var o = e(75),
        i = e(77);r.prototype = { areaStart: o.a, areaEnd: o.a, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 1:
            this._context.moveTo(this._x3, this._y3), this._context.closePath();break;case 2:
            this._context.lineTo(this._x3, this._y3), this._context.closePath();break;case 3:
            this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);}
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1, this._x3 = t, this._y3 = n;break;case 1:
            this._point = 2, this._context.moveTo(this._x4 = t, this._y4 = n);break;case 2:
            this._point = 3, this._x5 = t, this._y5 = n;break;default:
            Object(i.b)(this, t, n);}this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
      } };(function t(n) {
      function e(t) {
        return new r(t, n);
      }return e.tension = function (n) {
        return t(+n);
      }, e;
    })(0);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      this._context = t, this._k = (1 - n) / 6;
    }n.a = r;var o = e(77);r.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1;break;case 1:
            this._point = 2;break;case 2:
            this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;case 3:
            this._point = 4;default:
            Object(o.b)(this, t, n);}this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
      } };(function t(n) {
      function e(t) {
        return new r(t, n);
      }return e.tension = function (n) {
        return t(+n);
      }, e;
    })(0);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = t.site,
          r = n.left,
          o = n.right;return e === o && (o = r, r = e), o ? Math.atan2(o[1] - r[1], o[0] - r[0]) : (e === r ? (r = n[1], o = n[0]) : (r = n[0], o = n[1]), Math.atan2(r[0] - o[0], o[1] - r[1]));
    }function o(t, n) {
      return n[+(n.left !== t.site)];
    }function i(t, n) {
      return n[+(n.left === t.site)];
    }n.c = function (t) {
      return u.b[t.index] = { site: t, halfedges: [] };
    }, n.a = o, n.d = function () {
      for (var t, n, e, o, i = 0, c = u.b.length; i < c; ++i) {
        if ((t = u.b[i]) && (o = (n = t.halfedges).length)) {
          var a = new Array(o),
              f = new Array(o);for (e = 0; e < o; ++e) {
            a[e] = e, f[e] = r(t, u.e[n[e]]);
          }for (a.sort(function (t, n) {
            return f[n] - f[t];
          }), e = 0; e < o; ++e) {
            f[e] = n[a[e]];
          }for (e = 0; e < o; ++e) {
            n[e] = f[e];
          }
        }
      }
    }, n.b = function (t, n, e, r) {
      var a,
          f,
          s,
          l,
          h,
          p,
          b,
          v,
          g,
          d,
          j,
          O,
          y = u.b.length,
          m = !0;for (a = 0; a < y; ++a) {
        if (f = u.b[a]) {
          for (s = f.site, l = (h = f.halfedges).length; l--;) {
            u.e[h[l]] || h.splice(l, 1);
          }for (l = 0, p = h.length; l < p;) {
            j = (d = i(f, u.e[h[l]]))[0], O = d[1], v = (b = o(f, u.e[h[++l % p]]))[0], g = b[1], (Math.abs(j - v) > u.f || Math.abs(O - g) > u.f) && (h.splice(l, 0, u.e.push(Object(c.b)(s, d, Math.abs(j - t) < u.f && r - O > u.f ? [t, Math.abs(v - t) < u.f ? g : r] : Math.abs(O - r) < u.f && e - j > u.f ? [Math.abs(g - r) < u.f ? v : e, r] : Math.abs(j - e) < u.f && O - n > u.f ? [e, Math.abs(v - e) < u.f ? g : n] : Math.abs(O - n) < u.f && j - t > u.f ? [Math.abs(g - n) < u.f ? v : t, n] : null)) - 1), ++p);
          }p && (m = !1);
        }
      }if (m) {
        var x,
            _,
            w,
            E = 1 / 0;for (a = 0, m = null; a < y; ++a) {
          (f = u.b[a]) && (w = (x = (s = f.site)[0] - t) * x + (_ = s[1] - n) * _) < E && (E = w, m = f);
        }if (m) {
          var M = [t, n],
              S = [t, r],
              T = [e, r],
              P = [e, n];m.halfedges.push(u.e.push(Object(c.b)(s = m.site, M, S)) - 1, u.e.push(Object(c.b)(s, S, T)) - 1, u.e.push(Object(c.b)(s, T, P)) - 1, u.e.push(Object(c.b)(s, P, M)) - 1);
        }
      }for (a = 0; a < y; ++a) {
        (f = u.b[a]) && (f.halfedges.length || delete u.b[a]);
      }
    };var c = e(135),
        u = e(53);
  }, function (t, n, e) {
    "use strict";
    e.d(n, "c", function () {
      return r;
    }), n.a = function (t) {
      var n = t.P,
          e = t.N;if (n && e) {
        var u = n.site,
            a = t.site,
            f = e.site;if (u !== f) {
          var s = a[0],
              l = a[1],
              h = u[0] - s,
              p = u[1] - l,
              b = f[0] - s,
              v = f[1] - l,
              g = 2 * (h * v - p * b);if (!(g >= -i.g)) {
            var d = h * h + p * p,
                j = b * b + v * v,
                O = (v * d - p * j) / g,
                y = (h * j - b * d) / g,
                m = c.pop() || new function () {
              Object(o.a)(this), this.x = this.y = this.arc = this.site = this.cy = null;
            }();m.arc = t, m.site = a, m.x = O + s, m.y = (m.cy = y + l) + Math.sqrt(O * O + y * y), t.circle = m;for (var x = null, _ = i.c._; _;) {
              if (m.y < _.y || m.y === _.y && m.x <= _.x) {
                if (!_.L) {
                  x = _.P;break;
                }_ = _.L;
              } else {
                if (!_.R) {
                  x = _;break;
                }_ = _.R;
              }
            }i.c.insert(x, m), x || (r = m);
          }
        }
      }
    }, n.b = function (t) {
      var n = t.circle;n && (n.P || (r = n.N), i.c.remove(n), c.push(n), Object(o.a)(n), t.circle = null);
    };var r,
        o = e(134),
        i = e(53),
        c = [];
  }, function (t, n) {
    function e(t) {
      return Math.abs(t) <= 1 ? .5 : 0;
    }t.exports = { boxcar: e, cosine: function cosine(t) {
        return Math.abs(t) <= 1 ? Math.PI / 4 * Math.cos(Math.PI / 2 * t) : 0;
      }, epanechnikov: function epanechnikov(t) {
        return Math.abs(t) < 1 ? .75 * (1 - t * t) : 0;
      }, gaussian: function gaussian(t) {
        return .3989422804 * Math.exp(-.5 * t * t);
      }, quartic: function quartic(t) {
        if (Math.abs(t) < 1) {
          var n = 1 - t * t;return .9375 * n * n;
        }return 0;
      }, triangular: function triangular(t) {
        var n = Math.abs(t);return n < 1 ? 1 - n : 0;
      }, tricube: function tricube(t) {
        return Math.abs(t) < 1 ? 70 / 81 * function (t) {
          var n = 1 - Math.pow(Math.abs(t), 3);return Math.pow(n, 3);
        }(t) : 0;
      }, triweight: function triweight(t) {
        if (Math.abs(t) < 1) {
          var n = 1 - t * t;return 35 / 32 * n * n * n;
        }return 0;
      }, uniform: e };
  }, function (t, n, e) {
    e(272), e(523), e(524), e(533), e(580), e(582), e(586), e(240), e(590), e(591), e(613), e(621), e(622), e(623), e(630), e(631), e(632), e(633), e(634), e(635), e(637), e(638), e(639), e(646), e(647), e(648), e(652), e(657), e(659), e(660), e(661), e(662), e(663), e(664), e(665), e(666), e(667), e(703), e(709), e(710), e(711), e(712), e(713), e(715), e(716), t.exports = e(2);
  }, function (t, n, e) {
    var r = e(5),
        o = e(0),
        i = o.geoArea,
        c = o.geoCentroid,
        u = o.geoContains,
        a = o.geoDistance,
        f = o.geoLength,
        s = e(170).geoProject,
        l = e(42),
        h = e(204);r(l.prototype, { geoArea: function geoArea(t) {
        return i(t);
      }, geoAreaByName: function geoAreaByName(t) {
        return i(this.geoFeatureByName(t));
      }, geoCentroid: function geoCentroid(t) {
        return c(t);
      }, geoCentroidByName: function geoCentroidByName(t) {
        return c(this.geoFeatureByName(t));
      }, geoDistance: function geoDistance(t, n) {
        return a(t, n);
      }, geoLength: function geoLength(t) {
        return f(t);
      }, geoLengthByName: function geoLengthByName(t) {
        return f(this.geoFeatureByName(t));
      }, geoContains: function geoContains(t, n) {
        return u(t, n);
      }, geoFeatureByName: function geoFeatureByName(t) {
        var n = void 0;return this.rows.some(function (e) {
          return e.name === t && (n = e, !0);
        }), n;
      }, geoFeatureByPosition: function geoFeatureByPosition(t) {
        var n = void 0;return this.rows.some(function (e) {
          return !!u(e, t) && (n = e, !0);
        }), n;
      }, geoNameByPosition: function geoNameByPosition(t) {
        var n = this.geoFeatureByPosition(t);if (n) return n.name;
      }, geoProject: function geoProject(t, n) {
        return n = h(n), s(t, n);
      }, geoProjectByName: function geoProjectByName(t, n) {
        return n = h(n), s(this.geoFeatureByName(t), n);
      }, geoProjectPosition: function geoProjectPosition(t, n) {
        return (n = h(n))(t);
      }, geoProjectInvert: function geoProjectInvert(t, n) {
        return (n = h(n)).invert(t);
      } });
  }, function (t, n, e) {
    var r = e(9),
        o = e(277),
        i = e(12),
        c = e(138),
        u = /^\[object .+?Constructor\]$/,
        a = Function.prototype,
        f = Object.prototype,
        s = a.toString,
        l = f.hasOwnProperty,
        h = RegExp("^" + s.call(l).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");t.exports = function (t) {
      return !(!i(t) || o(t)) && (r(t) ? h : u).test(c(t));
    };
  }, function (t, n) {
    var e,
        r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };e = function () {
      return this;
    }();try {
      e = e || Function("return this")() || (0, eval)("this");
    } catch (t) {
      "object" === ("undefined" == typeof window ? "undefined" : r(window)) && (e = window);
    }t.exports = e;
  }, function (t, n, e) {
    var r = e(32),
        o = Object.prototype,
        i = o.hasOwnProperty,
        c = o.toString,
        u = r ? r.toStringTag : void 0;t.exports = function (t) {
      var n = i.call(t, u),
          e = t[u];try {
        t[u] = void 0;var r = !0;
      } catch (t) {}var o = c.call(t);return r && (n ? t[u] = e : delete t[u]), o;
    };
  }, function (t, n) {
    var e = Object.prototype.toString;t.exports = function (t) {
      return e.call(t);
    };
  }, function (t, n, e) {
    var r = e(278),
        o = function () {
      var t = /[^.]+$/.exec(r && r.keys && r.keys.IE_PROTO || "");return t ? "Symbol(src)_1." + t : "";
    }();t.exports = function (t) {
      return !!o && o in t;
    };
  }, function (t, n, e) {
    var r = e(13)["__core-js_shared__"];t.exports = r;
  }, function (t, n) {
    t.exports = function (t, n) {
      return null == t ? void 0 : t[n];
    };
  }, function (t, n, e) {
    var r = e(79),
        o = e(141);t.exports = function (t) {
      return r(function (n, e) {
        var r = -1,
            i = e.length,
            c = i > 1 ? e[i - 1] : void 0,
            u = i > 2 ? e[2] : void 0;for (c = t.length > 3 && "function" == typeof c ? (i--, c) : void 0, u && o(e[0], e[1], u) && (c = i < 3 ? void 0 : c, i = 1), n = Object(n); ++r < i;) {
          var a = e[r];a && t(n, a, r, c);
        }return n;
      });
    };
  }, function (t, n) {
    t.exports = function (t, n, e) {
      switch (e.length) {case 0:
          return t.call(n);case 1:
          return t.call(n, e[0]);case 2:
          return t.call(n, e[0], e[1]);case 3:
          return t.call(n, e[0], e[1], e[2]);}return t.apply(n, e);
    };
  }, function (t, n, e) {
    var r = e(283),
        o = e(136),
        i = e(37),
        c = o ? function (t, n) {
      return o(t, "toString", { configurable: !0, enumerable: !1, value: r(n), writable: !0 });
    } : i;t.exports = c;
  }, function (t, n) {
    t.exports = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n) {
    var e = 800,
        r = 16,
        o = Date.now;t.exports = function (t) {
      var n = 0,
          i = 0;return function () {
        var c = o(),
            u = r - (c - i);if (i = c, u > 0) {
          if (++n >= e) return arguments[0];
        } else n = 0;return t.apply(void 0, arguments);
      };
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      for (var e = -1, r = Array(t); ++e < t;) {
        r[e] = n(e);
      }return r;
    };
  }, function (t, n, e) {
    var r = e(19),
        o = e(15),
        i = "[object Arguments]";t.exports = function (t) {
      return o(t) && r(t) == i;
    };
  }, function (t, n) {
    t.exports = function () {
      return !1;
    };
  }, function (t, n, e) {
    var r = e(19),
        o = e(80),
        i = e(15),
        c = {};c["[object Float32Array]"] = c["[object Float64Array]"] = c["[object Int8Array]"] = c["[object Int16Array]"] = c["[object Int32Array]"] = c["[object Uint8Array]"] = c["[object Uint8ClampedArray]"] = c["[object Uint16Array]"] = c["[object Uint32Array]"] = !0, c["[object Arguments]"] = c["[object Array]"] = c["[object ArrayBuffer]"] = c["[object Boolean]"] = c["[object DataView]"] = c["[object Date]"] = c["[object Error]"] = c["[object Function]"] = c["[object Map]"] = c["[object Number]"] = c["[object Object]"] = c["[object RegExp]"] = c["[object Set]"] = c["[object String]"] = c["[object WeakMap]"] = !1, t.exports = function (t) {
      return i(t) && o(t.length) && !!c[r(t)];
    };
  }, function (t, n, e) {
    (function (t) {
      var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
        return typeof t === "undefined" ? "undefined" : _typeof(t);
      } : function (t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
      },
          o = e(137),
          i = "object" == r(n) && n && !n.nodeType && n,
          c = i && "object" == r(t) && t && !t.nodeType && t,
          u = c && c.exports === i && o.process,
          a = function () {
        try {
          return u && u.binding && u.binding("util");
        } catch (t) {}
      }();t.exports = a;
    }).call(n, e(83)(t));
  }, function (t, n, e) {
    var r = e(57),
        o = e(291),
        i = Object.prototype.hasOwnProperty;t.exports = function (t) {
      if (!r(t)) return o(t);var n = [];for (var e in Object(t)) {
        i.call(t, e) && "constructor" != e && n.push(e);
      }return n;
    };
  }, function (t, n, e) {
    var r = e(144)(Object.keys, Object);t.exports = r;
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      m.push(x = [p = t, v = t]), n < b && (b = n), n > g && (g = n);
    }function o(t, n) {
      var e = Object(E.a)([t * M.r, n * M.r]);if (y) {
        var r = Object(E.c)(y, e),
            o = [r[1], -r[0], 0],
            i = Object(E.c)(o, r);Object(E.e)(i), i = Object(E.g)(i);var c,
            u = t - d,
            a = u > 0 ? 1 : -1,
            f = i[0] * M.h * a,
            l = Object(M.a)(u) > 180;l ^ (a * d < f && f < a * t) ? (c = i[1] * M.h) > g && (g = c) : (f = (f + 360) % 360 - 180, l ^ (a * d < f && f < a * t) ? (c = -i[1] * M.h) < b && (b = c) : (n < b && (b = n), n > g && (g = n))), l ? t < d ? s(p, t) > s(p, v) && (v = t) : s(t, v) > s(p, v) && (p = t) : v >= p ? (t < p && (p = t), t > v && (v = t)) : t > d ? s(p, t) > s(p, v) && (v = t) : s(t, v) > s(p, v) && (p = t);
      } else m.push(x = [p = t, v = t]);n < b && (b = n), n > g && (g = n), y = e, d = t;
    }function i() {
      P.point = o;
    }function c() {
      x[0] = p, x[1] = v, P.point = r, y = null;
    }function u(t, n) {
      if (y) {
        var e = t - d;T.add(Object(M.a)(e) > 180 ? e + (e > 0 ? 360 : -360) : e);
      } else j = t, O = n;w.b.point(t, n), o(t, n);
    }function a() {
      w.b.lineStart();
    }function f() {
      u(j, O), w.b.lineEnd(), Object(M.a)(T) > M.i && (p = -(v = 180)), x[0] = p, x[1] = v, y = null;
    }function s(t, n) {
      return (n -= t) < 0 ? n + 360 : n;
    }function l(t, n) {
      return t[0] - n[0];
    }function h(t, n) {
      return t[0] <= t[1] ? t[0] <= n && n <= t[1] : n < t[0] || t[1] < n;
    }var p,
        b,
        v,
        g,
        d,
        j,
        O,
        y,
        m,
        x,
        _ = e(33),
        w = e(145),
        E = e(38),
        M = e(3),
        S = e(25),
        T = Object(_.a)(),
        P = { point: r, lineStart: i, lineEnd: c, polygonStart: function polygonStart() {
        P.point = u, P.lineStart = a, P.lineEnd = f, T.reset(), w.b.polygonStart();
      }, polygonEnd: function polygonEnd() {
        w.b.polygonEnd(), P.point = r, P.lineStart = i, P.lineEnd = c, w.a < 0 ? (p = -(v = 180), b = -(g = 90)) : T > M.i ? g = 90 : T < -M.i && (b = -90), x[0] = p, x[1] = v;
      } };n.a = function (t) {
      var n, e, r, o, i, c, u;if (g = v = -(p = b = 1 / 0), m = [], Object(S.a)(t, P), e = m.length) {
        for (m.sort(l), n = 1, i = [r = m[0]]; n < e; ++n) {
          h(r, (o = m[n])[0]) || h(r, o[1]) ? (s(r[0], o[1]) > s(r[0], r[1]) && (r[1] = o[1]), s(o[0], r[1]) > s(r[0], r[1]) && (r[0] = o[0])) : i.push(r = o);
        }for (c = -1 / 0, n = 0, r = i[e = i.length - 1]; n <= e; r = o, ++n) {
          o = i[n], (u = s(r[1], o[0])) > c && (c = u, p = o[0], v = r[1]);
        }
      }return m = x = null, p === 1 / 0 || b === 1 / 0 ? [[NaN, NaN], [NaN, NaN]] : [[p, b], [v, g]];
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n);o(e * Object(P.g)(t), e * Object(P.t)(t), Object(P.t)(n));
    }function o(t, n, e) {
      v += (t - v) / ++p, g += (n - g) / p, d += (e - d) / p;
    }function i() {
      C.point = c;
    }function c(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n);M = e * Object(P.g)(t), S = e * Object(P.t)(t), T = Object(P.t)(n), C.point = u, o(M, S, T);
    }function u(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n),
          r = e * Object(P.g)(t),
          i = e * Object(P.t)(t),
          c = Object(P.t)(n),
          u = Object(P.e)(Object(P.u)((u = S * c - T * i) * u + (u = T * r - M * c) * u + (u = M * i - S * r) * u), M * r + S * i + T * c);b += u, j += u * (M + (M = r)), O += u * (S + (S = i)), y += u * (T + (T = c)), o(M, S, T);
    }function a() {
      C.point = r;
    }function f() {
      C.point = l;
    }function s() {
      h(w, E), C.point = r;
    }function l(t, n) {
      w = t, E = n, t *= P.r, n *= P.r, C.point = h;var e = Object(P.g)(n);M = e * Object(P.g)(t), S = e * Object(P.t)(t), T = Object(P.t)(n), o(M, S, T);
    }function h(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n),
          r = e * Object(P.g)(t),
          i = e * Object(P.t)(t),
          c = Object(P.t)(n),
          u = S * c - T * i,
          a = T * r - M * c,
          f = M * i - S * r,
          s = Object(P.u)(u * u + a * a + f * f),
          l = Object(P.c)(s),
          h = s && -l / s;m += h * u, x += h * a, _ += h * f, b += l, j += l * (M + (M = r)), O += l * (S + (S = i)), y += l * (T + (T = c)), o(M, S, T);
    }var p,
        b,
        v,
        g,
        d,
        j,
        O,
        y,
        m,
        x,
        _,
        w,
        E,
        M,
        S,
        T,
        P = e(3),
        k = e(21),
        A = e(25),
        C = { sphere: k.a, point: r, lineStart: i, lineEnd: a, polygonStart: function polygonStart() {
        C.lineStart = f, C.lineEnd = s;
      }, polygonEnd: function polygonEnd() {
        C.lineStart = i, C.lineEnd = a;
      } };n.a = function (t) {
      p = b = v = g = d = j = O = y = m = x = _ = 0, Object(A.a)(t, C);var n = m,
          e = x,
          r = _,
          o = n * n + e * e + r * r;return o < P.j && (n = j, e = O, r = y, b < P.i && (n = v, e = g, r = d), (o = n * n + e * e + r * r) < P.j) ? [NaN, NaN] : [Object(P.e)(e, n) * P.h, Object(P.c)(r / Object(P.u)(o)) * P.h];
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e, r, o, i) {
      var c,
          u = t[0],
          a = t[1],
          f = 0,
          s = 1,
          l = n[0] - u,
          h = n[1] - a;if (c = e - u, l || !(c > 0)) {
        if (c /= l, l < 0) {
          if (c < f) return;c < s && (s = c);
        } else if (l > 0) {
          if (c > s) return;c > f && (f = c);
        }if (c = o - u, l || !(c < 0)) {
          if (c /= l, l < 0) {
            if (c > s) return;c > f && (f = c);
          } else if (l > 0) {
            if (c < f) return;c < s && (s = c);
          }if (c = r - a, h || !(c > 0)) {
            if (c /= h, h < 0) {
              if (c < f) return;c < s && (s = c);
            } else if (h > 0) {
              if (c > s) return;c > f && (f = c);
            }if (c = i - a, h || !(c < 0)) {
              if (c /= h, h < 0) {
                if (c > s) return;c > f && (f = c);
              } else if (h > 0) {
                if (c < f) return;c < s && (s = c);
              }return f > 0 && (t[0] = u + f * l, t[1] = a + f * h), s < 1 && (n[0] = u + s * l, n[1] = a + s * h), !0;
            }
          }
        }
      }
    };
  }, function (t, n, e) {
    "use strict";
    e(153);
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
    e(157), e(151), e(299), e(156), e(300), e(158), e(159), e(160);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t;
    };
  }, function (t, n, e) {
    "use strict";
    e(157), e(34), e(39), e(86);
  }, function (t, n, e) {
    "use strict";
    e(154);
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
    e(39);
  }, function (t, n, e) {
    "use strict";
    e(34), e(39), e(86);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      for (var n, e, r, o = t.length, i = -1, c = 0; ++i < o;) {
        c += t[i].length;
      }for (e = new Array(c); --o >= 0;) {
        for (n = (r = t[o]).length; --n >= 0;) {
          e[--c] = r[n];
        }
      }return e;
    };
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
    e(34);
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      var e,
          r = t.length,
          o = -1,
          i = 0;if (null == n) for (; ++o < r;) {
        (e = +t[o]) && (i += e);
      } else for (; ++o < r;) {
        (e = +n(t[o], o, t)) && (i += e);
      }return i;
    };
  }, function (t, n, e) {
    "use strict";
    e(162);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return !(!t || !p.hasOwnProperty(t.type)) && p[t.type](t, n);
    }function o(t, n) {
      return 0 === Object(s.a)(t, n);
    }function i(t, n) {
      var e = Object(s.a)(t[0], t[1]);return Object(s.a)(t[0], n) + Object(s.a)(n, t[1]) <= e + l.i;
    }function c(t, n) {
      return !!Object(f.a)(t.map(u), a(n));
    }function u(t) {
      return (t = t.map(a)).pop(), t;
    }function a(t) {
      return [t[0] * l.r, t[1] * l.r];
    }var f = e(163),
        s = e(164),
        l = e(3),
        h = { Feature: function Feature(t, n) {
        return r(t.geometry, n);
      }, FeatureCollection: function FeatureCollection(t, n) {
        for (var e = t.features, o = -1, i = e.length; ++o < i;) {
          if (r(e[o].geometry, n)) return !0;
        }return !1;
      } },
        p = { Sphere: function Sphere() {
        return !0;
      }, Point: function Point(t, n) {
        return o(t.coordinates, n);
      }, MultiPoint: function MultiPoint(t, n) {
        for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {
          if (o(e[r], n)) return !0;
        }return !1;
      }, LineString: function LineString(t, n) {
        return i(t.coordinates, n);
      }, MultiLineString: function MultiLineString(t, n) {
        for (var e = t.coordinates, r = -1, o = e.length; ++r < o;) {
          if (i(e[r], n)) return !0;
        }return !1;
      }, Polygon: function Polygon(t, n) {
        return c(t.coordinates, n);
      }, MultiPolygon: function MultiPolygon(t, n) {
        for (var e = t.coordinates, r = -1, o = e.length; ++r < o;) {
          if (c(e[r], n)) return !0;
        }return !1;
      }, GeometryCollection: function GeometryCollection(t, n) {
        for (var e = t.geometries, o = -1, i = e.length; ++o < i;) {
          if (r(e[o], n)) return !0;
        }return !1;
      } };n.a = function (t, n) {
      return (t && h.hasOwnProperty(t.type) ? h[t.type] : r)(t, n);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r = Object(c.d)(t, n - u.i, e).concat(n);return function (t) {
        return r.map(function (n) {
          return [t, n];
        });
      };
    }function o(t, n, e) {
      var r = Object(c.d)(t, n - u.i, e).concat(n);return function (t) {
        return r.map(function (n) {
          return [n, t];
        });
      };
    }function i() {
      function t() {
        return { type: "MultiLineString", coordinates: n() };
      }function n() {
        return Object(c.d)(Object(u.f)(f / y) * y, a, y).map(g).concat(Object(c.d)(Object(u.f)(p / m) * m, h, m).map(d)).concat(Object(c.d)(Object(u.f)(i / j) * j, e, j).filter(function (t) {
          return Object(u.a)(t % y) > u.i;
        }).map(b)).concat(Object(c.d)(Object(u.f)(l / O) * O, s, O).filter(function (t) {
          return Object(u.a)(t % m) > u.i;
        }).map(v));
      }var e,
          i,
          a,
          f,
          s,
          l,
          h,
          p,
          b,
          v,
          g,
          d,
          j = 10,
          O = j,
          y = 90,
          m = 360,
          x = 2.5;return t.lines = function () {
        return n().map(function (t) {
          return { type: "LineString", coordinates: t };
        });
      }, t.outline = function () {
        return { type: "Polygon", coordinates: [g(f).concat(d(h).slice(1), g(a).reverse().slice(1), d(p).reverse().slice(1))] };
      }, t.extent = function (n) {
        return arguments.length ? t.extentMajor(n).extentMinor(n) : t.extentMinor();
      }, t.extentMajor = function (n) {
        return arguments.length ? (f = +n[0][0], a = +n[1][0], p = +n[0][1], h = +n[1][1], f > a && (n = f, f = a, a = n), p > h && (n = p, p = h, h = n), t.precision(x)) : [[f, p], [a, h]];
      }, t.extentMinor = function (n) {
        return arguments.length ? (i = +n[0][0], e = +n[1][0], l = +n[0][1], s = +n[1][1], i > e && (n = i, i = e, e = n), l > s && (n = l, l = s, s = n), t.precision(x)) : [[i, l], [e, s]];
      }, t.step = function (n) {
        return arguments.length ? t.stepMajor(n).stepMinor(n) : t.stepMinor();
      }, t.stepMajor = function (n) {
        return arguments.length ? (y = +n[0], m = +n[1], t) : [y, m];
      }, t.stepMinor = function (n) {
        return arguments.length ? (j = +n[0], O = +n[1], t) : [j, O];
      }, t.precision = function (n) {
        return arguments.length ? (x = +n, b = r(l, s, 90), v = o(i, e, x), g = r(p, h, 90), d = o(f, a, x), t) : x;
      }, t.extentMajor([[-180, -90 + u.i], [180, 90 - u.i]]).extentMinor([[-180, -80 - u.i], [180, 80 + u.i]]);
    }n.a = i, n.b = function () {
      return i()();
    };var c = e(14),
        u = e(3);
  }, function (t, n, e) {
    "use strict";
    var r = e(3);n.a = function (t, n) {
      var e = t[0] * r.r,
          o = t[1] * r.r,
          i = n[0] * r.r,
          c = n[1] * r.r,
          u = Object(r.g)(o),
          a = Object(r.t)(o),
          f = Object(r.g)(c),
          s = Object(r.t)(c),
          l = u * Object(r.g)(e),
          h = u * Object(r.t)(e),
          p = f * Object(r.g)(i),
          b = f * Object(r.t)(i),
          v = 2 * Object(r.c)(Object(r.u)(Object(r.m)(c - o) + u * f * Object(r.m)(i - e))),
          g = Object(r.t)(v),
          d = v ? function (t) {
        var n = Object(r.t)(t *= v) / g,
            e = Object(r.t)(v - t) / g,
            o = e * l + n * p,
            i = e * h + n * b,
            c = e * a + n * s;return [Object(r.e)(i, o) * r.h, Object(r.e)(c, Object(r.u)(o * o + i * i)) * r.h];
      } : function () {
        return [e * r.h, o * r.h];
      };return d.distance = v, d;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(87),
        o = e(25),
        i = e(316),
        c = e(166),
        u = e(317),
        a = e(318),
        f = e(319),
        s = e(320);n.a = function (t, n) {
      function e(t) {
        return t && ("function" == typeof p && h.pointRadius(+p.apply(this, arguments)), Object(o.a)(t, l(h))), h.result();
      }var l,
          h,
          p = 4.5;return e.area = function (t) {
        return Object(o.a)(t, l(i.a)), i.a.result();
      }, e.measure = function (t) {
        return Object(o.a)(t, l(f.a)), f.a.result();
      }, e.bounds = function (t) {
        return Object(o.a)(t, l(c.a)), c.a.result();
      }, e.centroid = function (t) {
        return Object(o.a)(t, l(u.a)), u.a.result();
      }, e.projection = function (n) {
        return arguments.length ? (l = null == n ? (t = null, r.a) : (t = n).stream, e) : t;
      }, e.context = function (t) {
        return arguments.length ? (h = null == t ? (n = null, new s.a()) : new a.a(n = t), "function" != typeof p && h.pointRadius(p), e) : n;
      }, e.pointRadius = function (t) {
        return arguments.length ? (p = "function" == typeof t ? t : (h.pointRadius(+t), +t), e) : p;
      }, e.projection(t).context(n);
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      g.point = o;
    }function o(t, n) {
      g.point = i, u = f = t, a = s = n;
    }function i(t, n) {
      v.add(s * t - f * n), f = t, s = n;
    }function c() {
      i(u, a);
    }var u,
        a,
        f,
        s,
        l = e(33),
        h = e(3),
        p = e(21),
        b = Object(l.a)(),
        v = Object(l.a)(),
        g = { point: p.a, lineStart: p.a, lineEnd: p.a, polygonStart: function polygonStart() {
        g.lineStart = r, g.lineEnd = c;
      }, polygonEnd: function polygonEnd() {
        g.lineStart = g.lineEnd = g.point = p.a, b.add(Object(h.a)(v)), v.reset();
      }, result: function result() {
        var t = b / 2;return b.reset(), t;
      } };n.a = g;
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      d += t, j += n, ++O;
    }function o() {
      M.point = i;
    }function i(t, n) {
      M.point = c, r(b = t, v = n);
    }function c(t, n) {
      var e = t - b,
          o = n - v,
          i = Object(g.u)(e * e + o * o);y += i * (b + t) / 2, m += i * (v + n) / 2, x += i, r(b = t, v = n);
    }function u() {
      M.point = r;
    }function a() {
      M.point = s;
    }function f() {
      l(h, p);
    }function s(t, n) {
      M.point = l, r(h = b = t, p = v = n);
    }function l(t, n) {
      var e = t - b,
          o = n - v,
          i = Object(g.u)(e * e + o * o);y += i * (b + t) / 2, m += i * (v + n) / 2, x += i, _ += (i = v * t - b * n) * (b + t), w += i * (v + n), E += 3 * i, r(b = t, v = n);
    }var h,
        p,
        b,
        v,
        g = e(3),
        d = 0,
        j = 0,
        O = 0,
        y = 0,
        m = 0,
        x = 0,
        _ = 0,
        w = 0,
        E = 0,
        M = { point: r, lineStart: o, lineEnd: u, polygonStart: function polygonStart() {
        M.lineStart = a, M.lineEnd = f;
      }, polygonEnd: function polygonEnd() {
        M.point = r, M.lineStart = o, M.lineEnd = u;
      }, result: function result() {
        var t = E ? [_ / E, w / E] : x ? [y / x, m / x] : O ? [d / O, j / O] : [NaN, NaN];return d = j = O = y = m = x = _ = w = E = 0, t;
      } };n.a = M;
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }n.a = r;var o = e(3),
        i = e(21);r.prototype = { _radius: 4.5, pointRadius: function pointRadius(t) {
        return this._radius = t, this;
      }, polygonStart: function polygonStart() {
        this._line = 0;
      }, polygonEnd: function polygonEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._point = 0;
      }, lineEnd: function lineEnd() {
        0 === this._line && this._context.closePath(), this._point = NaN;
      }, point: function point(t, n) {
        switch (this._point) {case 0:
            this._context.moveTo(t, n), this._point = 1;break;case 1:
            this._context.lineTo(t, n);break;default:
            this._context.moveTo(t + this._radius, n), this._context.arc(t, n, this._radius, 0, o.w);}
      }, result: i.a };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      b.point = o, c = a = t, u = f = n;
    }function o(t, n) {
      a -= t, f -= n, p.add(Object(l.u)(a * a + f * f)), a = t, f = n;
    }var i,
        c,
        u,
        a,
        f,
        s = e(33),
        l = e(3),
        h = e(21),
        p = Object(s.a)(),
        b = { point: h.a, lineStart: function lineStart() {
        b.point = r;
      }, lineEnd: function lineEnd() {
        i && o(c, u), b.point = h.a;
      }, polygonStart: function polygonStart() {
        i = !0;
      }, polygonEnd: function polygonEnd() {
        i = null;
      }, result: function result() {
        var t = +p;return p.reset(), t;
      } };n.a = b;
  }, function (t, n, e) {
    "use strict";
    function r() {
      this._string = [];
    }function o(t) {
      return "m0," + t + "a" + t + "," + t + " 0 1,1 0," + -2 * t + "a" + t + "," + t + " 0 1,1 0," + 2 * t + "z";
    }n.a = r, r.prototype = { _radius: 4.5, _circle: o(4.5), pointRadius: function pointRadius(t) {
        return (t = +t) !== this._radius && (this._radius = t, this._circle = null), this;
      }, polygonStart: function polygonStart() {
        this._line = 0;
      }, polygonEnd: function polygonEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._point = 0;
      }, lineEnd: function lineEnd() {
        0 === this._line && this._string.push("Z"), this._point = NaN;
      }, point: function point(t, n) {
        switch (this._point) {case 0:
            this._string.push("M", t, ",", n), this._point = 1;break;case 1:
            this._string.push("L", t, ",", n);break;default:
            null == this._circle && (this._circle = o(this._radius)), this._string.push("M", t, ",", n, this._circle);}
      }, result: function result() {
        if (this._string.length) {
          var t = this._string.join("");return this._string = [], t;
        }return null;
      } };
  }, function (t, n, e) {
    "use strict";
    var r = e(168),
        o = e(3);n.a = Object(r.a)(function () {
      return !0;
    }, function (t) {
      var n,
          e = NaN,
          r = NaN,
          i = NaN;return { lineStart: function lineStart() {
          t.lineStart(), n = 1;
        }, point: function point(c, u) {
          var a = c > 0 ? o.o : -o.o,
              f = Object(o.a)(c - e);Object(o.a)(f - o.o) < o.i ? (t.point(e, r = (r + u) / 2 > 0 ? o.l : -o.l), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(a, r), t.point(c, r), n = 0) : i !== a && f >= o.o && (Object(o.a)(e - i) < o.i && (e -= i * o.i), Object(o.a)(c - a) < o.i && (c -= a * o.i), r = function (t, n, e, r) {
            var i,
                c,
                u = Object(o.t)(t - e);return Object(o.a)(u) > o.i ? Object(o.d)((Object(o.t)(n) * (c = Object(o.g)(r)) * Object(o.t)(e) - Object(o.t)(r) * (i = Object(o.g)(n)) * Object(o.t)(t)) / (i * c * u)) : (n + r) / 2;
          }(e, r, c, u), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(a, r), n = 0), t.point(e = c, r = u), i = a;
        }, lineEnd: function lineEnd() {
          t.lineEnd(), e = r = NaN;
        }, clean: function clean() {
          return 2 - n;
        } };
    }, function (t, n, e, r) {
      var i;if (null == t) i = e * o.l, r.point(-o.o, i), r.point(0, i), r.point(o.o, i), r.point(o.o, 0), r.point(o.o, -i), r.point(0, -i), r.point(-o.o, -i), r.point(-o.o, 0), r.point(-o.o, i);else if (Object(o.a)(t[0] - n[0]) > o.i) {
        var c = t[0] < n[0] ? o.o : -o.o;i = e * c / 2, r.point(-c, i), r.point(0, i), r.point(c, i);
      } else r.point(n[0], n[1]);
    }, [-o.o, -o.l]);
  }, function (t, n, e) {
    "use strict";
    var r = e(38),
        o = e(146),
        i = e(3),
        c = e(150),
        u = e(168);n.a = function (t, n) {
      function e(t, n) {
        return Object(i.g)(t) * Object(i.g)(n) > s;
      }function a(t, n, e) {
        var o = Object(r.a)(t),
            c = Object(r.a)(n),
            u = [1, 0, 0],
            a = Object(r.c)(o, c),
            f = Object(r.d)(a, a),
            l = a[0],
            h = f - l * l;if (!h) return !e && t;var p = s * f / h,
            b = -s * l / h,
            v = Object(r.c)(u, a),
            g = Object(r.f)(u, p),
            d = Object(r.f)(a, b);Object(r.b)(g, d);var j = v,
            O = Object(r.d)(g, j),
            y = Object(r.d)(j, j),
            m = O * O - y * (Object(r.d)(g, g) - 1);if (!(m < 0)) {
          var x = Object(i.u)(m),
              _ = Object(r.f)(j, (-O - x) / y);if (Object(r.b)(_, g), _ = Object(r.g)(_), !e) return _;var w,
              E = t[0],
              M = n[0],
              S = t[1],
              T = n[1];M < E && (w = E, E = M, M = w);var P = M - E,
              k = Object(i.a)(P - i.o) < i.i,
              A = k || P < i.i;if (!k && T < S && (w = S, S = T, T = w), A ? k ? S + T > 0 ^ _[1] < (Object(i.a)(_[0] - E) < i.i ? S : T) : S <= _[1] && _[1] <= T : P > i.o ^ (E <= _[0] && _[0] <= M)) {
            var C = Object(r.f)(j, (-O + x) / y);return Object(r.b)(C, g), [_, Object(r.g)(C)];
          }
        }
      }function f(n, e) {
        var r = l ? t : i.o - t,
            o = 0;return n < -r ? o |= 1 : n > r && (o |= 2), e < -r ? o |= 4 : e > r && (o |= 8), o;
      }var s = Object(i.g)(t),
          l = s > 0,
          h = Object(i.a)(s) > i.i;return Object(u.a)(e, function (t) {
        var n, r, o, u, s;return { lineStart: function lineStart() {
            u = o = !1, s = 1;
          }, point: function point(p, b) {
            var v,
                g = [p, b],
                d = e(p, b),
                j = l ? d ? 0 : f(p, b) : d ? f(p + (p < 0 ? i.o : -i.o), b) : 0;if (!n && (u = o = d) && t.lineStart(), d !== o && (!(v = a(n, g)) || Object(c.a)(n, v) || Object(c.a)(g, v)) && (g[0] += i.i, g[1] += i.i, d = e(g[0], g[1])), d !== o) s = 0, d ? (t.lineStart(), v = a(g, n), t.point(v[0], v[1])) : (v = a(n, g), t.point(v[0], v[1]), t.lineEnd()), n = v;else if (h && n && l ^ d) {
              var O;j & r || !(O = a(g, n, !0)) || (s = 0, l ? (t.lineStart(), t.point(O[0][0], O[0][1]), t.point(O[1][0], O[1][1]), t.lineEnd()) : (t.point(O[1][0], O[1][1]), t.lineEnd(), t.lineStart(), t.point(O[0][0], O[0][1])));
            }!d || n && Object(c.a)(n, g) || t.point(g[0], g[1]), n = g, o = d, r = j;
          }, lineEnd: function lineEnd() {
            o && t.lineEnd(), n = null;
          }, clean: function clean() {
            return s | (u && o) << 1;
          } };
      }, function (e, r, i, c) {
        Object(o.a)(c, t, n, i, e, r);
      }, l ? [0, -t] : [-i.o, t - i.o]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(38),
        o = e(3),
        i = e(59),
        c = 16,
        u = Object(o.g)(30 * o.r);n.a = function (t, n) {
      return +n ? function (t, n) {
        function e(r, i, c, a, f, s, l, h, p, b, v, g, d, j) {
          var O = l - r,
              y = h - i,
              m = O * O + y * y;if (m > 4 * n && d--) {
            var x = a + b,
                _ = f + v,
                w = s + g,
                E = Object(o.u)(x * x + _ * _ + w * w),
                M = Object(o.c)(w /= E),
                S = Object(o.a)(Object(o.a)(w) - 1) < o.i || Object(o.a)(c - p) < o.i ? (c + p) / 2 : Object(o.e)(_, x),
                T = t(S, M),
                P = T[0],
                k = T[1],
                A = P - r,
                C = k - i,
                B = y * A - O * C;(B * B / m > n || Object(o.a)((O * A + y * C) / m - .5) > .3 || a * b + f * v + s * g < u) && (e(r, i, c, a, f, s, P, k, S, x /= E, _ /= E, w, d, j), j.point(P, k), e(P, k, S, x, _, w, l, h, p, b, v, g, d, j));
          }
        }return function (n) {
          function o(e, r) {
            e = t(e, r), n.point(e[0], e[1]);
          }function i() {
            O = NaN, w.point = u, n.lineStart();
          }function u(o, i) {
            var u = Object(r.a)([o, i]),
                a = t(o, i);e(O, y, j, m, x, _, O = a[0], y = a[1], j = o, m = u[0], x = u[1], _ = u[2], c, n), n.point(O, y);
          }function a() {
            w.point = o, n.lineEnd();
          }function f() {
            i(), w.point = s, w.lineEnd = l;
          }function s(t, n) {
            u(h = t, n), p = O, b = y, v = m, g = x, d = _, w.point = u;
          }function l() {
            e(O, y, j, m, x, _, p, b, h, v, g, d, c, n), w.lineEnd = a, a();
          }var h,
              p,
              b,
              v,
              g,
              d,
              j,
              O,
              y,
              m,
              x,
              _,
              w = { point: o, lineStart: i, lineEnd: a, polygonStart: function polygonStart() {
              n.polygonStart(), w.lineStart = f;
            }, polygonEnd: function polygonEnd() {
              n.polygonEnd(), w.lineStart = i;
            } };return w;
        };
      }(t, n) : function (t) {
        return Object(i.b)({ point: function point(n, e) {
            n = t(n, e), this.stream.point(n[0], n[1]);
          } });
      }(t);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      function n(t, n) {
        return [t * e, Object(r.t)(n) / e];
      }var e = Object(r.g)(t);return n.invert = function (t, n) {
        return [t / e, Object(r.c)(n * e)];
      }, n;
    };var r = e(3);
  }, function (t, n, e) {
    "use strict";
    var r = e(3),
        o = e(167),
        i = e(88),
        c = e(90);n.a = function () {
      function t(t) {
        var n = t[0],
            e = t[1];return l = null, a.point(n, e), l || (f.point(n, e), l) || (s.point(n, e), l);
      }function n() {
        return e = u = null, t;
      }var e,
          u,
          a,
          f,
          s,
          l,
          h = Object(o.a)(),
          p = Object(i.b)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
          b = Object(i.b)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
          v = { point: function point(t, n) {
          l = [t, n];
        } };return t.invert = function (t) {
        var n = h.scale(),
            e = h.translate(),
            r = (t[0] - e[0]) / n,
            o = (t[1] - e[1]) / n;return (o >= .12 && o < .234 && r >= -.425 && r < -.214 ? p : o >= .166 && o < .234 && r >= -.214 && r < -.115 ? b : h).invert(t);
      }, t.stream = function (t) {
        return e && u === t ? e : e = function (t) {
          var n = t.length;return { point: function point(e, r) {
              for (var o = -1; ++o < n;) {
                t[o].point(e, r);
              }
            }, sphere: function sphere() {
              for (var e = -1; ++e < n;) {
                t[e].sphere();
              }
            }, lineStart: function lineStart() {
              for (var e = -1; ++e < n;) {
                t[e].lineStart();
              }
            }, lineEnd: function lineEnd() {
              for (var e = -1; ++e < n;) {
                t[e].lineEnd();
              }
            }, polygonStart: function polygonStart() {
              for (var e = -1; ++e < n;) {
                t[e].polygonStart();
              }
            }, polygonEnd: function polygonEnd() {
              for (var e = -1; ++e < n;) {
                t[e].polygonEnd();
              }
            } };
        }([h.stream(u = t), p.stream(t), b.stream(t)]);
      }, t.precision = function (t) {
        return arguments.length ? (h.precision(t), p.precision(t), b.precision(t), n()) : h.precision();
      }, t.scale = function (n) {
        return arguments.length ? (h.scale(n), p.scale(.35 * n), b.scale(n), t.translate(h.translate())) : h.scale();
      }, t.translate = function (t) {
        if (!arguments.length) return h.translate();var e = h.scale(),
            o = +t[0],
            i = +t[1];return a = h.translate(t).clipExtent([[o - .455 * e, i - .238 * e], [o + .455 * e, i + .238 * e]]).stream(v), f = p.translate([o - .307 * e, i + .201 * e]).clipExtent([[o - .425 * e + r.i, i + .12 * e + r.i], [o - .214 * e - r.i, i + .234 * e - r.i]]).stream(v), s = b.translate([o - .205 * e, i + .212 * e]).clipExtent([[o - .214 * e + r.i, i + .166 * e + r.i], [o - .115 * e - r.i, i + .234 * e - r.i]]).stream(v), n();
      }, t.fitExtent = function (n, e) {
        return Object(c.a)(t, n, e);
      }, t.fitSize = function (n, e) {
        return Object(c.b)(t, n, e);
      }, t.scale(1070);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return c;
    });var r = e(3),
        o = e(40),
        i = e(16),
        c = Object(o.b)(function (t) {
      return Object(r.u)(2 / (1 + t));
    });c.invert = Object(o.a)(function (t) {
      return 2 * Object(r.c)(t / 2);
    }), n.b = function () {
      return Object(i.a)(c).scale(124.75).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return c;
    });var r = e(3),
        o = e(40),
        i = e(16),
        c = Object(o.b)(function (t) {
      return (t = Object(r.b)(t)) && t / Object(r.t)(t);
    });c.invert = Object(o.a)(function (t) {
      return t;
    }), n.b = function () {
      return Object(i.a)(c).scale(79.4188).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return Object(i.v)((i.l + t) / 2);
    }function o(t, n) {
      function e(t, n) {
        a > 0 ? n < -i.l + i.i && (n = -i.l + i.i) : n > i.l - i.i && (n = i.l - i.i);var e = a / Object(i.p)(r(n), c);return [e * Object(i.t)(c * t), a - e * Object(i.g)(c * t)];
      }var o = Object(i.g)(t),
          c = t === n ? Object(i.t)(t) : Object(i.n)(o / Object(i.g)(n)) / Object(i.n)(r(n) / r(t)),
          a = o * Object(i.p)(r(t), c) / c;return c ? (e.invert = function (t, n) {
        var e = a - n,
            r = Object(i.s)(c) * Object(i.u)(t * t + e * e);return [Object(i.e)(t, Object(i.a)(e)) / c * Object(i.s)(e), 2 * Object(i.d)(Object(i.p)(a / r, 1 / c)) - i.l];
      }, e) : u.c;
    }n.a = o;var i = e(3),
        c = e(89),
        u = e(91);n.b = function () {
      return Object(c.a)(o).scale(109.5).parallels([30, 30]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(t, n) {
        var e = u - n,
            r = i * t;return [e * Object(o.t)(r), u - e * Object(o.g)(r)];
      }var r = Object(o.g)(t),
          i = t === n ? Object(o.t)(t) : (r - Object(o.g)(n)) / (n - t),
          u = r / i + t;return Object(o.a)(i) < o.i ? c.b : (e.invert = function (t, n) {
        var e = u - n;return [Object(o.e)(t, Object(o.a)(e)) / i * Object(o.s)(e), u - Object(o.s)(i) * Object(o.u)(t * t + e * e)];
      }, e);
    }n.a = r;var o = e(3),
        i = e(89),
        c = e(169);n.b = function () {
      return Object(i.a)(r).scale(131.154).center([0, 13.9389]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(o.g)(n),
          r = Object(o.g)(t) * e;return [e * Object(o.t)(t) / r, Object(o.t)(n) / r];
    }n.b = r;var o = e(3),
        i = e(40),
        c = e(16);r.invert = Object(i.a)(o.d), n.a = function () {
      return Object(c.a)(r).scale(144.049).clipAngle(60);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r) {
      return 1 === t && 1 === n && 0 === e && 0 === r ? i.a : Object(c.b)({ point: function point(o, i) {
          this.stream.point(o * t + e, i * n + r);
        } });
    }var o = e(85),
        i = e(87),
        c = e(59),
        u = e(90);n.a = function () {
      function t() {
        return a = f = null, s;
      }var n,
          e,
          c,
          a,
          f,
          s,
          l = 1,
          h = 0,
          p = 0,
          b = 1,
          v = 1,
          g = i.a,
          d = null,
          j = i.a;return s = { stream: function stream(t) {
          return a && f === t ? a : a = g(j(f = t));
        }, clipExtent: function clipExtent(r) {
          return arguments.length ? (j = null == r ? (d = n = e = c = null, i.a) : Object(o.a)(d = +r[0][0], n = +r[0][1], e = +r[1][0], c = +r[1][1]), t()) : null == d ? null : [[d, n], [e, c]];
        }, scale: function scale(n) {
          return arguments.length ? (g = r((l = +n) * b, l * v, h, p), t()) : l;
        }, translate: function translate(n) {
          return arguments.length ? (g = r(l * b, l * v, h = +n[0], p = +n[1]), t()) : [h, p];
        }, reflectX: function reflectX(n) {
          return arguments.length ? (g = r(l * (b = n ? -1 : 1), l * v, h, p), t()) : b < 0;
        }, reflectY: function reflectY(n) {
          return arguments.length ? (g = r(l * b, l * (v = n ? -1 : 1), h, p), t()) : v < 0;
        }, fitExtent: function fitExtent(t, n) {
          return Object(u.a)(s, t, n);
        }, fitSize: function fitSize(t, n) {
          return Object(u.b)(s, t, n);
        } };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [Object(o.g)(n) * Object(o.t)(t), Object(o.t)(n)];
    }n.b = r;var o = e(3),
        i = e(40),
        c = e(16);r.invert = Object(i.a)(o.c), n.a = function () {
      return Object(c.a)(r).scale(249.5).clipAngle(90 + o.i);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(o.g)(n),
          r = 1 + Object(o.g)(t) * e;return [e * Object(o.t)(t) / r, Object(o.t)(n) / r];
    }n.b = r;var o = e(3),
        i = e(40),
        c = e(16);r.invert = Object(i.a)(function (t) {
      return 2 * Object(o.d)(t);
    }), n.a = function () {
      return Object(c.a)(r).scale(250).clipAngle(142);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [Object(o.n)(Object(o.v)((o.l + n) / 2)), -t];
    }n.b = r;var o = e(3),
        i = e(91);r.invert = function (t, n) {
      return [-n, 2 * Object(o.d)(Object(o.k)(t)) - o.l];
    }, n.a = function () {
      var t = Object(i.b)(r),
          n = t.center,
          e = t.rotate;return t.center = function (t) {
        return arguments.length ? n([-t[1], t[0]]) : (t = n(), [t[1], -t[0]]);
      }, t.rotate = function (t) {
        return arguments.length ? e([t[0], t[1], t.length > 2 ? t[2] + 90 : 90]) : (t = e(), [t[0], t[1], t[2] - 90]);
      }, e([0, 0, 90]).scale(159.155);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        var e = Object(i.h)(t),
            o = Object(i.h)(n),
            c = Object(i.y)(n),
            u = o * e,
            a = -((1 - u ? Object(i.p)((1 + u) / 2) / (1 - u) : -.5) + r / (1 + u));return [a * o * Object(i.y)(t), a * c];
      }var e = Object(i.F)(t / 2),
          r = 2 * Object(i.p)(Object(i.h)(t / 2)) / (e * e);return n.invert = function (n, e) {
        var o,
            c = Object(i.B)(n * n + e * e),
            u = -t / 2,
            a = 50;if (!c) return [0, 0];do {
          var f = u / 2,
              s = Object(i.h)(f),
              l = Object(i.y)(f),
              h = Object(i.F)(f),
              p = Object(i.p)(1 / s);u -= o = (2 / h * p - r * h - c) / (-p / (l * l) + 1 - r / (2 * s * s));
        } while (Object(i.a)(o) > i.k && --a > 0);var b = Object(i.y)(u);return [Object(i.g)(n * b, c * Object(i.h)(u)), Object(i.e)(e * b / c)];
      }, n;
    }n.a = r;var o = e(0),
        i = e(1);n.b = function () {
      var t = i.o,
          n = Object(o.geoProjectionMutator)(r),
          e = n(t);return e.radius = function (e) {
        return arguments.length ? n(t = e * i.v) : t * i.j;
      }, e.scale(179.976).clipAngle(147);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        var a = Object(i.h)(n),
            f = Object(i.h)(t /= 2);return [(1 + a) * Object(i.y)(t), (o * n > -Object(i.g)(f, c) - .001 ? 0 : 10 * -o) + u + Object(i.y)(n) * r - (1 + a) * e * f];
      }var e = Object(i.y)(t),
          r = Object(i.h)(t),
          o = t >= 0 ? 1 : -1,
          c = Object(i.F)(o * t),
          u = (1 + e - r) / 2;return n.invert = function (t, n) {
        var a = 0,
            f = 0,
            s = 50;do {
          var l = Object(i.h)(a),
              h = Object(i.y)(a),
              p = Object(i.h)(f),
              b = Object(i.y)(f),
              v = 1 + p,
              g = v * h - t,
              d = u + b * r - v * e * l - n,
              j = v * l / 2,
              O = -h * b,
              y = e * v * h / 2,
              m = r * p + e * l * b,
              x = O * y - m * j,
              _ = (d * O - g * m) / x / 2,
              w = (g * y - d * j) / x;a -= _, f -= w;
        } while ((Object(i.a)(_) > i.k || Object(i.a)(w) > i.k) && --s > 0);return o * f > -Object(i.g)(Object(i.h)(a), c) - .001 ? [2 * a, f] : null;
      }, n;
    }n.a = r;var o = e(0),
        i = e(1);n.b = function () {
      var t = 20 * i.v,
          n = t >= 0 ? 1 : -1,
          e = Object(i.F)(n * t),
          c = Object(o.geoProjectionMutator)(r),
          u = c(t),
          a = u.stream;return u.parallel = function (r) {
        return arguments.length ? (e = Object(i.F)((n = (t = r * i.v) >= 0 ? 1 : -1) * t), c(t)) : t * i.j;
      }, u.stream = function (r) {
        var o = u.rotate(),
            c = a(r),
            f = (u.rotate([0, 0]), a(r));return u.rotate(o), c.sphere = function () {
          f.polygonStart(), f.lineStart();for (var r = -180 * n; n * r < 180; r += 90 * n) {
            f.point(r, 90 * n);
          }for (; n * (r -= t) >= -180;) {
            f.point(r, n * -Object(i.g)(Object(i.h)(r * i.v / 2), e) * i.j);
          }f.lineEnd(), f.polygonEnd();
        }, c;
      }, u.scale(218.695).center([0, 28.0974]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.a)(n);return e < i.u ? [t, Object(i.p)(Object(i.F)(i.u + n / 2))] : [t * Object(i.h)(e) * (2 * i.D - 1 / Object(i.y)(e)), Object(i.x)(n) * (2 * i.D * (e - i.u) - Object(i.p)(Object(i.F)(e / 2)))];
    }n.a = r;var o = e(0),
        i = e(1),
        c = Object(i.B)(8),
        u = Object(i.p)(1 + i.D);r.invert = function (t, n) {
      if ((r = Object(i.a)(n)) < u) return [t, 2 * Object(i.f)(Object(i.m)(n)) - i.o];var e,
          r,
          o = i.u,
          a = 25;do {
        var f = Object(i.h)(o / 2),
            s = Object(i.F)(o / 2);o -= e = (c * (o - i.u) - Object(i.p)(s) - r) / (c - f * f / (2 * s));
      } while (Object(i.a)(e) > i.l && --a > 0);return [t / (Object(i.h)(o) * (c - 1 / Object(i.y)(o))), Object(i.x)(n) * o];
    }, n.b = function () {
      return Object(o.geoProjection)(r).scale(112.314);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        var r = Object(o.geoAzimuthalEquidistantRaw)(t, n);if (Object(i.a)(t) > i.o) {
          var c = Object(i.g)(r[1], r[0]),
              u = Object(i.B)(r[0] * r[0] + r[1] * r[1]),
              a = e * Object(i.w)((c - i.o) / e) + i.o,
              f = Object(i.g)(Object(i.y)(c -= a), 2 - Object(i.h)(c));c = a + Object(i.e)(i.s / u * Object(i.y)(f)) - f, r[0] = u * Object(i.h)(c), r[1] = u * Object(i.y)(c);
        }return r;
      }var e = 2 * i.s / t;return n.invert = function (t, n) {
        var r = Object(i.B)(t * t + n * n);if (r > i.o) {
          var c = Object(i.g)(n, t),
              u = e * Object(i.w)((c - i.o) / e) + i.o,
              a = c > u ? -1 : 1,
              f = r * Object(i.h)(u - c),
              s = 1 / Object(i.F)(a * Object(i.b)((f - i.s) / Object(i.B)(i.s * (i.s - 2 * f) + r * r)));c = u + 2 * Object(i.f)((s + a * Object(i.B)(s * s - 3)) / 3), t = r * Object(i.h)(c), n = r * Object(i.y)(c);
        }return o.geoAzimuthalEquidistantRaw.invert(t, n);
      }, n;
    }n.a = r;var o = e(0),
        i = e(1);n.b = function () {
      var t = 5,
          n = Object(o.geoProjectionMutator)(r),
          e = n(t),
          c = e.stream,
          u = -Object(i.h)(.01 * i.v),
          a = Object(i.y)(.01 * i.v);return e.lobes = function (e) {
        return arguments.length ? n(t = +e) : t;
      }, e.stream = function (n) {
        var r = e.rotate(),
            o = c(n),
            f = (e.rotate([0, 0]), c(n));return e.rotate(r), o.sphere = function () {
          f.polygonStart(), f.lineStart();for (var n = 0, e = 360 / t, r = 2 * i.s / t, o = 90 - 180 / t, c = i.o; n < t; ++n, o -= e, c -= r) {
            f.point(Object(i.g)(a * Object(i.h)(c), u) * i.j, Object(i.e)(a * Object(i.y)(c)) * i.j), o < -90 ? (f.point(-90, -180 - o - .01), f.point(-90, -180 - o + .01)) : (f.point(90, o + .01), f.point(90, o - .01));
          }f.lineEnd(), f.polygonEnd();
        }, o;
      }, e.scale(87.8076).center([0, 17.1875]).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, r) {
        var o = e + t - r,
            c = o ? n * Object(i.h)(r) / o : o;return [o * Object(i.y)(c), e - o * Object(i.h)(c)];
      }if (!t) return c.b;var e = 1 / Object(i.F)(t);return n.invert = function (n, r) {
        var o = Object(i.B)(n * n + (r = e - r) * r),
            c = e + t - o;return [o / Object(i.h)(c) * Object(i.g)(n, r), c];
      }, n;
    }n.a = r;var o = e(35),
        i = e(1),
        c = e(41);n.b = function () {
      return Object(o.a)(r).scale(123.082).center([0, 26.1441]).parallel(45);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, e) {
        var r = i.o - e,
            o = r ? n * t * Object(i.y)(r) / r : r;return [r * Object(i.y)(o) / t, i.o - r * Object(i.h)(o)];
      }return n.invert = function (n, e) {
        var r = n * t,
            o = i.o - e,
            c = Object(i.B)(r * r + o * o),
            u = Object(i.g)(r, o);return [(c ? c / Object(i.y)(c) : 1) * u / t, i.o - c];
      }, n;
    }n.a = r;var o = e(0),
        i = e(1);n.b = function () {
      var t = .5,
          n = Object(o.geoProjectionMutator)(r),
          e = n(t);return e.fraction = function (e) {
        return arguments.length ? n(t = +e) : t;
      }, e.scale(158.837);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return c;
    });var r = e(0),
        o = e(1),
        i = e(22),
        c = Object(i.b)(1, 4 / o.s, o.s);n.b = function () {
      return Object(r.geoProjection)(c).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e, r, o, i) {
      var c,
          u = Object(s.h)(i);if (Object(s.a)(t) > 1 || Object(s.a)(i) > 1) c = Object(s.b)(e * o + n * r * u);else {
        var a = Object(s.y)(t / 2),
            f = Object(s.y)(i / 2);c = 2 * Object(s.e)(Object(s.B)(a * a + n * r * f * f));
      }return Object(s.a)(c) > s.k ? [c, Object(s.g)(r * Object(s.y)(i), n * o - e * r * u)] : [0, 0];
    }function o(t, n, e) {
      return Object(s.b)((t * t + n * n - e * e) / (2 * t * n));
    }function i(t) {
      return t - 2 * s.s * Object(s.n)((t + s.s) / (2 * s.s));
    }function c(t, n, e) {
      for (var c, u = [[t[0], t[1], Object(s.y)(t[1]), Object(s.h)(t[1])], [n[0], n[1], Object(s.y)(n[1]), Object(s.h)(n[1])], [e[0], e[1], Object(s.y)(e[1]), Object(s.h)(e[1])]], a = u[2], f = 0; f < 3; ++f, a = c) {
        c = u[f], a.v = r(c[1] - a[1], a[3], a[2], c[3], c[2], c[0] - a[0]), a.point = [0, 0];
      }var l = o(u[0].v[0], u[2].v[0], u[1].v[0]),
          h = o(u[0].v[0], u[1].v[0], u[2].v[0]),
          p = s.s - l;u[2].point[1] = 0, u[0].point[0] = -(u[1].point[0] = u[0].v[0] / 2);var b = [u[2].point[0] = u[0].point[0] + u[2].v[0] * Object(s.h)(l), 2 * (u[0].point[1] = u[1].point[1] = u[2].v[0] * Object(s.y)(l))];return function (t, n) {
        var e,
            c = Object(s.y)(n),
            a = Object(s.h)(n),
            f = new Array(3);for (e = 0; e < 3; ++e) {
          var l = u[e];if (f[e] = r(n - l[1], l[3], l[2], a, c, t - l[0]), !f[e][0]) return l.point;f[e][1] = i(f[e][1] - l.v[1]);
        }var v = b.slice();for (e = 0; e < 3; ++e) {
          var g = 2 == e ? 0 : e + 1,
              d = o(u[e].v[0], f[e][0], f[g][0]);f[e][1] < 0 && (d = -d), e ? 1 == e ? (d = h - d, v[0] -= f[e][0] * Object(s.h)(d), v[1] -= f[e][0] * Object(s.y)(d)) : (d = p - d, v[0] += f[e][0] * Object(s.h)(d), v[1] += f[e][0] * Object(s.y)(d)) : (v[0] += f[e][0] * Object(s.h)(d), v[1] -= f[e][0] * Object(s.y)(d));
        }return v[0] /= 3, v[1] /= 3, v;
      };
    }function u(t) {
      return t[0] *= s.v, t[1] *= s.v, t;
    }function a(t, n, e) {
      var r = Object(f.geoCentroid)({ type: "MultiPoint", coordinates: [t, n, e] }),
          o = [-r[0], -r[1]],
          i = Object(f.geoRotation)(o),
          a = Object(f.geoProjection)(c(u(i(t)), u(i(n)), u(i(e)))).rotate(o),
          s = a.center;return delete a.rotate, a.center = function (t) {
        return arguments.length ? s(i(t)) : i.invert(s());
      }, a.clipAngle(90);
    }n.b = c, n.a = function () {
      return a([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);
    }, n.c = a;var f = e(0),
        s = e(1);
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        return [t, (t ? t / Object(o.y)(t) : 1) * (Object(o.y)(n) * Object(o.h)(t) - e * Object(o.h)(n))];
      }var e = Object(o.F)(t);return n.invert = e ? function (t, n) {
        t && (n *= Object(o.y)(t) / t);var r = Object(o.h)(t);return [t, 2 * Object(o.g)(Object(o.B)(r * r + e * e - n * n) - r, e - n)];
      } : function (t, n) {
        return [t, Object(o.e)(t ? n * Object(o.F)(t) / t : n)];
      }, n;
    }n.a = r;var o = e(1),
        i = e(35);n.b = function () {
      return Object(i.a)(r).scale(249.828).clipAngle(90);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [c * t * (2 * Object(i.h)(2 * n / 3) - 1) / i.E, c * i.E * Object(i.y)(n / 3)];
    }n.a = r;var o = e(0),
        i = e(1),
        c = Object(i.B)(3);r.invert = function (t, n) {
      var e = 3 * Object(i.e)(n / (c * i.E));return [i.E * t / (c * (2 * Object(i.h)(2 * e / 3) - 1)), e];
    }, n.b = function () {
      return Object(o.geoProjection)(r).scale(156.19);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        return [t * e, (1 + e) * Object(o.F)(n / 2)];
      }var e = Object(o.h)(t);return n.invert = function (t, n) {
        return [t / e, 2 * Object(o.f)(n / (1 + e))];
      }, n;
    }n.a = r;var o = e(1),
        i = e(35);n.b = function () {
      return Object(i.a)(r).scale(124.75);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.B)(8 / (3 * i.s));return [e * t * (1 - Object(i.a)(n) / i.s), e * n];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = Object(i.B)(8 / (3 * i.s)),
          r = n / e;return [t / (e * (1 - Object(i.a)(r) / i.s)), r];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(165.664);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.B)(4 - 3 * Object(i.y)(Object(i.a)(n)));return [2 / Object(i.B)(6 * i.s) * t * e, Object(i.x)(n) * Object(i.B)(2 * i.s / 3) * (2 - e)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = 2 - Object(i.a)(n) / Object(i.B)(2 * i.s / 3);return [t * Object(i.B)(6 * i.s) / (2 * e), Object(i.x)(n) * Object(i.e)((4 - e * e) / 3)];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(165.664);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.B)(i.s * (4 + i.s));return [2 / e * t * (1 + Object(i.B)(1 - 4 * n * n / (i.s * i.s))), 4 / e * n];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = Object(i.B)(i.s * (4 + i.s)) / 2;return [t * e / (1 + Object(i.B)(1 - n * n * (4 + i.s) / (4 * i.s))), n * e / 2];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(180.739);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = (2 + i.o) * Object(i.y)(n);n /= 2;for (var r = 0, o = 1 / 0; r < 10 && Object(i.a)(o) > i.k; r++) {
        var c = Object(i.h)(n);n -= o = (n + Object(i.y)(n) * (c + 2) - e) / (2 * c * (1 + c));
      }return [2 / Object(i.B)(i.s * (4 + i.s)) * t * (1 + Object(i.h)(n)), 2 * Object(i.B)(i.s / (4 + i.s)) * Object(i.y)(n)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = n * Object(i.B)((4 + i.s) / i.s) / 2,
          r = Object(i.e)(e),
          o = Object(i.h)(r);return [t / (2 / Object(i.B)(i.s * (4 + i.s)) * (1 + o)), Object(i.e)((r + e * (o + 2)) / (2 + i.o))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(180.739);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t * (1 + Object(i.h)(n)) / Object(i.B)(2 + i.s), 2 * n / Object(i.B)(2 + i.s)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = Object(i.B)(2 + i.s),
          r = n * e / 2;return [e * t / (1 + Object(i.h)(r)), r];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(173.044);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      for (var e = (1 + i.o) * Object(i.y)(n), r = 0, o = 1 / 0; r < 10 && Object(i.a)(o) > i.k; r++) {
        n -= o = (n + Object(i.y)(n) - e) / (1 + Object(i.h)(n));
      }return e = Object(i.B)(2 + i.s), [t * (1 + Object(i.h)(n)) / e, 2 * n / e];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = 1 + i.o,
          r = Object(i.B)(e / 2);return [2 * t * r / (1 + Object(i.h)(n *= r)), Object(i.e)((n + Object(i.y)(n)) / e)];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(173.044);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(c.y)(t /= 2),
          r = Object(c.h)(t),
          o = Object(c.B)(Object(c.h)(n)),
          i = Object(c.h)(n /= 2),
          a = Object(c.y)(n) / (i + c.D * r * o),
          f = Object(c.B)(2 / (1 + a * a)),
          s = Object(c.B)((c.D * i + (r + e) * o) / (c.D * i + (r - e) * o));return [u * (f * (s - 1 / s) - 2 * Object(c.p)(s)), u * (f * a * (s + 1 / s) - 2 * Object(c.f)(a))];
    }n.b = r;var o = e(0),
        i = e(172),
        c = e(1),
        u = 3 + 2 * c.D;r.invert = function (t, n) {
      if (!(e = i.a.invert(t / 1.2, 1.065 * n))) return null;var e,
          r = e[0],
          o = e[1],
          a = 20;t /= u, n /= u;do {
        var f = r / 2,
            s = o / 2,
            l = Object(c.y)(f),
            h = Object(c.h)(f),
            p = Object(c.y)(s),
            b = Object(c.h)(s),
            v = Object(c.h)(o),
            g = Object(c.B)(v),
            d = p / (b + c.D * h * g),
            j = d * d,
            O = Object(c.B)(2 / (1 + j)),
            y = (c.D * b + (h + l) * g) / (c.D * b + (h - l) * g),
            m = Object(c.B)(y),
            x = m - 1 / m,
            _ = m + 1 / m,
            w = O * x - 2 * Object(c.p)(m) - t,
            E = O * d * _ - 2 * Object(c.f)(d) - n,
            M = p && c.C * g * l * j / p,
            S = (c.D * h * b + g) / (2 * (b + c.D * h * g) * (b + c.D * h * g) * g),
            T = -.5 * d * O * O * O,
            P = T * M,
            k = T * S,
            A = (A = 2 * b + c.D * g * (h - l)) * A * m,
            C = (c.D * h * b * g + v) / A,
            B = -c.D * l * p / (g * A),
            R = x * P - 2 * C / m + O * (C + C / y),
            N = x * k - 2 * B / m + O * (B + B / y),
            q = d * _ * P - 2 * M / (1 + j) + O * _ * M + O * d * (C - C / y),
            z = d * _ * k - 2 * S / (1 + j) + O * _ * S + O * d * (B - B / y),
            L = N * q - z * R;if (!L) break;var F = (E * N - w * z) / L,
            I = (w * q - E * R) / L;r -= F, o = Object(c.q)(-c.o, Object(c.r)(c.o, o - I));
      } while ((Object(c.a)(F) > c.k || Object(c.a)(I) > c.k) && --a > 0);return Object(c.a)(Object(c.a)(o) - c.o) < c.k ? [0, o] : a && [r, o];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(62.5271);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.F)(n / 2);return [t * c * Object(i.B)(1 - e * e), (1 + c) * e];
    }n.b = r;var o = e(0),
        i = e(1),
        c = Object(i.h)(35 * i.v);r.invert = function (t, n) {
      var e = n / (1 + c);return [t && t / (c * Object(i.B)(1 - e * e)), 2 * Object(i.f)(e)];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(137.152);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = n / 2,
          r = Object(i.h)(e);return [2 * t / i.E * Object(i.h)(n) * r * r, i.E * Object(i.F)(e)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = Object(i.f)(n / i.E),
          r = Object(i.h)(e),
          o = 2 * e;return [t * i.E / 2 / (Object(i.h)(o) * r * r), o];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(135.264);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return [t[0] / 2, Object(c.e)(Object(c.F)(t[1] / 2 * c.v)) * c.j];
    }function o(t) {
      return [2 * t[0], 2 * Object(c.f)(Object(c.y)(t[1] * c.v)) * c.j];
    }var i = e(0),
        c = e(1);n.a = function (t) {
      function n(t) {
        return u(r(t));
      }function e(t) {
        n[t] = function (e) {
          return arguments.length ? (u[t](e), n) : u[t]();
        };
      }null == t && (t = i.geoOrthographic);var u = t(),
          a = Object(i.geoEquirectangular)().scale(c.j).precision(0).clipAngle(null).translate([0, 0]);return u.invert && (n.invert = function (t) {
        return o(u.invert(t));
      }), n.stream = function (t) {
        var n = u.stream(t),
            e = a.stream({ point: function point(t, e) {
            n.point(t / 2, Object(c.e)(Object(c.F)(-e / 2 * c.v)) * c.j);
          }, lineStart: function lineStart() {
            n.lineStart();
          }, lineEnd: function lineEnd() {
            n.lineEnd();
          }, polygonStart: function polygonStart() {
            n.polygonStart();
          }, polygonEnd: function polygonEnd() {
            n.polygonEnd();
          } });return e.sphere = n.sphere, e;
      }, n.rotate = function (t) {
        return arguments.length ? (a.rotate(t), n) : a.rotate();
      }, n.center = function (t) {
        return arguments.length ? (u.center(r(t)), n) : o(u.center());
      }, e("clipAngle"), e("clipExtent"), e("scale"), e("translate"), e("precision"), n.scale(249.5);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(n, e) {
        var f = Object(c.geoAzimuthalEquidistantRaw)(n, e),
            s = f[0],
            l = f[1],
            h = s * s + l * l;if (h > a) {
          var p = Object(u.B)(h),
              b = Object(u.g)(l, s),
              v = r * Object(u.w)(b / r),
              g = b - v,
              d = t * Object(u.h)(g),
              j = (t * Object(u.y)(g) - g * Object(u.y)(d)) / (u.o - d),
              O = o(g, j),
              y = (u.s - t) / i(O, d, u.s);s = p;var m,
              x = 50;do {
            s -= m = (t + i(O, d, s) * y - p) / (O(s) * y);
          } while (Object(u.a)(m) > u.k && --x > 0);l = g * Object(u.y)(s), s < u.o && (l -= j * (s - u.o));var _ = Object(u.y)(v),
              w = Object(u.h)(v);f[0] = s * w - l * _, f[1] = s * _ + l * w;
        }return f;
      }var r = 2 * u.s / n,
          a = t * t;return e.invert = function (n, e) {
        var f = n * n + e * e;if (f > a) {
          var s = Object(u.B)(f),
              l = Object(u.g)(e, n),
              h = r * Object(u.w)(l / r),
              p = l - h;n = s * Object(u.h)(p), e = s * Object(u.y)(p);for (var b = n - u.o, v = Object(u.y)(n), g = e / v, d = n < u.o ? 1 / 0 : 0, j = 10;;) {
            var O = t * Object(u.y)(g),
                y = t * Object(u.h)(g),
                m = Object(u.y)(y),
                x = u.o - y,
                _ = (O - g * m) / x,
                w = o(g, _);if (Object(u.a)(d) < u.l || ! --j) break;g -= d = (g * v - _ * b - e) / (v - 2 * b * (x * (y + g * O * Object(u.h)(y) - m) - O * (O - g * m)) / (x * x));
          }l = h + g, n = (s = t + i(w, y, n) * (u.s - t) / i(w, y, u.s)) * Object(u.h)(l), e = s * Object(u.y)(l);
        }return c.geoAzimuthalEquidistantRaw.invert(n, e);
      }, e;
    }function o(t, n) {
      return function (e) {
        var r = t * Object(u.h)(e);return e < u.o && (r -= n), Object(u.B)(1 + r * r);
      };
    }function i(t, n, e) {
      for (var r = (e - n) / 50, o = t(n) + t(e), i = 1, c = n; i < 50; ++i) {
        o += 2 * t(c += r);
      }return .5 * o * r;
    }n.b = r;var c = e(0),
        u = e(1);n.a = function () {
      var t = 6,
          n = 30 * u.v,
          e = Object(u.h)(n),
          o = Object(u.y)(n),
          i = Object(c.geoProjectionMutator)(r),
          a = i(n, t),
          f = a.stream,
          s = -Object(u.h)(.01 * u.v),
          l = Object(u.y)(.01 * u.v);return a.radius = function (r) {
        return arguments.length ? (e = Object(u.h)(n = r * u.v), o = Object(u.y)(n), i(n, t)) : n * u.j;
      }, a.lobes = function (e) {
        return arguments.length ? i(n, t = +e) : t;
      }, a.stream = function (n) {
        var r = a.rotate(),
            i = f(n),
            c = (a.rotate([0, 0]), f(n));return a.rotate(r), i.sphere = function () {
          c.polygonStart(), c.lineStart();for (var n = 0, r = 2 * u.s / t, i = 0; n < t; ++n, i -= r) {
            c.point(Object(u.g)(l * Object(u.h)(i), s) * u.j, Object(u.e)(l * Object(u.y)(i)) * u.j), c.point(Object(u.g)(o * Object(u.h)(i - r / 2), e) * u.j, Object(u.e)(o * Object(u.y)(i - r / 2)) * u.j);
          }c.lineEnd(), c.polygonEnd();
        }, i;
      }, a.rotate([90, -40]).scale(91.7095).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return i;
    });var r = e(0),
        o = e(60),
        i = Object(o.a)(2.8284, -1.6988, .75432, -.18071, 1.76003, -.38914, .042555);n.a = function () {
      return Object(r.geoProjection)(i).scale(149.995);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return i;
    });var r = e(0),
        o = e(60),
        i = Object(o.a)(2.583819, -.835827, .170354, -.038094, 1.543313, -.411435, .082742);n.a = function () {
      return Object(r.geoProjection)(i).scale(153.93);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return c;
    });var r = e(0),
        o = e(60),
        i = e(1),
        c = Object(o.a)(5 / 6 * i.s, -.62636, -.0344, 0, 1.3493, -.05524, 0, .045);n.a = function () {
      return Object(r.geoProjection)(c).scale(130.945);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = t * t,
          r = n * n;return [t * (1 - .162388 * r) * (.87 - 952426e-9 * e * e), n * (1 + r / 12)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e,
          r = t,
          o = n,
          c = 50;do {
        var u = o * o;o -= e = (o * (1 + u / 12) - n) / (1 + u / 4);
      } while (Object(i.a)(e) > i.k && --c > 0);c = 50, t /= 1 - .162388 * u;do {
        var a = (a = r * r) * a;r -= e = (r * (.87 - 952426e-9 * a) - t) / (.87 - .00476213 * a);
      } while (Object(i.a)(e) > i.k && --c > 0);return [r, o];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(131.747);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return i;
    });var r = e(0),
        o = e(60),
        i = Object(o.a)(2.6516, -.76534, .19123, -.047094, 1.36289, -.13965, .031762);n.a = function () {
      return Object(r.geoProjection)(i).scale(131.087);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e, r, o, c, u;if (n < i.k) return c = Object(i.y)(t), r = Object(i.h)(t), e = n * (t - c * r) / 4, [c - e * r, r + e * c, 1 - n * c * c / 2, t - e];if (n >= 1 - i.k) return e = (1 - n) / 4, r = Object(i.i)(t), c = Object(i.G)(t), o = 1 / r, u = r * Object(i.A)(t), [c + e * (u - t) / (r * r), o - e * c * o * (u - t), o + e * c * o * (u + t), 2 * Object(i.f)(Object(i.m)(t)) - i.o + e * (u - t) / r];var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],
          f = [Object(i.B)(n), 0, 0, 0, 0, 0, 0, 0, 0],
          s = 0;for (r = Object(i.B)(1 - n), u = 1; Object(i.a)(f[s] / a[s]) > i.k && s < 8;) {
        e = a[s++], f[s] = (e - r) / 2, a[s] = (e + r) / 2, r = Object(i.B)(e * r), u *= 2;
      }o = u * a[s] * t;do {
        c = f[s] * Object(i.y)(r = o) / a[s], o = (Object(i.e)(c) + o) / 2;
      } while (--s);return [Object(i.y)(o), c = Object(i.h)(o), c / Object(i.h)(o - r), o];
    }function o(t, n) {
      if (!n) return t;if (1 === n) return Object(i.p)(Object(i.F)(t / 2 + i.u));for (var e = 1, r = Object(i.B)(1 - n), o = Object(i.B)(n), c = 0; Object(i.a)(o) > i.k; c++) {
        if (t % i.s) {
          var u = Object(i.f)(r * Object(i.F)(t) / e);u < 0 && (u += i.s), t += u + ~~(t / i.s) * i.s;
        } else t += t;o = (e + r) / 2, r = Object(i.B)(e * r), o = ((e = o) - r) / 2;
      }return t / (Object(i.t)(2, c) * e);
    }n.c = function (t, n, e) {
      var o, i, c;return t ? (o = r(t, e), n ? (i = r(n, 1 - e), c = i[1] * i[1] + e * o[0] * o[0] * i[0] * i[0], [[o[0] * i[2] / c, o[1] * o[2] * i[0] * i[1] / c], [o[1] * i[1] / c, -o[0] * o[2] * i[0] * i[2] / c], [o[2] * i[1] * i[2] / c, -e * o[0] * o[1] * i[0] / c]]) : [[o[0], 0], [o[1], 0], [o[2], 0]]) : (i = r(n, 1 - e), [[0, i[0] / i[1]], [1 / i[1], 0], [i[2] / i[1], 0]]);
    }, n.b = function (t, n, e) {
      var r = Object(i.a)(t),
          c = Object(i.a)(n),
          u = Object(i.A)(c);if (r) {
        var a = 1 / Object(i.y)(r),
            f = 1 / (Object(i.F)(r) * Object(i.F)(r)),
            s = -(f + e * (u * u * a * a) - 1 + e),
            l = (e - 1) * f,
            h = (-s + Object(i.B)(s * s - 4 * l)) / 2;return [o(Object(i.f)(1 / Object(i.B)(h)), e) * Object(i.x)(t), o(Object(i.f)(Object(i.B)((h / f - 1) / e)), 1 - e) * Object(i.x)(n)];
      }return [0, o(Object(i.f)(u), 1 - e) * Object(i.x)(n)];
    }, n.a = o;var i = e(1);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(e, r) {
        var o = Object(i.geoAzimuthalEqualAreaRaw)(e / n, r);return o[0] *= t, o;
      }return arguments.length < 2 && (n = t), 1 === n ? i.geoAzimuthalEqualAreaRaw : n === 1 / 0 ? o : (e.invert = function (e, r) {
        var o = i.geoAzimuthalEqualAreaRaw.invert(e / t, r);return o[0] *= n, o;
      }, e);
    }function o(t, n) {
      return [t * Object(c.h)(n) / Object(c.h)(n /= 2), 2 * Object(c.y)(n)];
    }n.b = r;var i = e(0),
        c = e(1);o.invert = function (t, n) {
      var e = 2 * Object(c.e)(n / 2);return [t * Object(c.h)(e / 2) / Object(c.h)(e), e];
    }, n.a = function () {
      var t = 2,
          n = Object(i.geoProjectionMutator)(r),
          e = n(t);return e.coefficient = function (e) {
        return arguments.length ? n(t = +e) : t;
      }, e.scale(169.529);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        var o = i(t, n);t = o[0], n = o[1];var u = Object(c.y)(n),
            a = Object(c.h)(n),
            f = Object(c.h)(t),
            s = Object(c.b)(e * u + r * a * f),
            l = Object(c.y)(s),
            h = Object(c.a)(l) > c.k ? s / l : 1;return [h * r * Object(c.y)(t), (Object(c.a)(t) > c.o ? h : -h) * (e * a - r * u * f)];
      }var e = Object(c.y)(t),
          r = Object(c.h)(t),
          i = o(t);return i.invert = o(-t), n.invert = function (t, n) {
        var r = Object(c.B)(t * t + n * n),
            o = -Object(c.y)(r),
            u = Object(c.h)(r),
            a = r * u,
            f = -n * o,
            s = r * e,
            l = Object(c.B)(a * a + f * f - s * s),
            h = Object(c.g)(a * s + f * l, f * s - a * l),
            p = (r > c.o ? -1 : 1) * Object(c.g)(t * o, r * Object(c.h)(h) * u + n * Object(c.y)(h) * o);return i.invert(p, h);
      }, n;
    }function o(t) {
      var n = Object(c.y)(t),
          e = Object(c.h)(t);return function (t, r) {
        var o = Object(c.h)(r),
            i = Object(c.h)(t) * o,
            u = Object(c.y)(t) * o,
            a = Object(c.y)(r);return [Object(c.g)(u, i * e - a * n), Object(c.e)(a * e + i * n)];
      };
    }n.b = r;var i = e(0),
        c = e(1);n.a = function () {
      var t = 0,
          n = Object(i.geoProjectionMutator)(r),
          e = n(t),
          o = e.rotate,
          u = e.stream,
          a = Object(i.geoCircle)();return e.parallel = function (r) {
        if (!arguments.length) return t * c.j;var o = e.rotate();return n(t = r * c.v).rotate(o);
      }, e.rotate = function (n) {
        return arguments.length ? (o.call(e, [n[0], n[1] - t * c.j]), a.center([-n[0], -n[1]]), e) : (n = o.call(e), n[1] += t * c.j, n);
      }, e.stream = function (t) {
        return t = u(t), t.sphere = function () {
          t.polygonStart();var n,
              e = a.radius(89.99)().coordinates[0],
              r = e.length - 1,
              o = -1;for (t.lineStart(); ++o < r;) {
            t.point((n = e[o])[0], n[1]);
          }for (t.lineEnd(), r = (e = a.radius(90.01)().coordinates[0]).length - 1, t.lineStart(); --o >= 0;) {
            t.point((n = e[o])[0], n[1]);
          }t.lineEnd(), t.polygonEnd();
        }, t;
      }, e.scale(79.4187).parallel(45).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, f) {
        var b,
            v = Object(a.a)(f);if (v > e) {
          var g = Object(a.r)(t - 1, Object(a.q)(0, Object(a.n)((n + a.s) / l)));n += a.s * (t - 1) / t - g * l, (b = Object(c.a)(n, v))[0] = b[0] * a.H / r - a.H * (t - 1) / (2 * t) + g * a.H / t, b[1] = o + 4 * (b[1] - i) * u / a.H, f < 0 && (b[1] = -b[1]);
        } else b = s(n, f);return b[0] *= h, b[1] /= p, b;
      }var e = f * a.v,
          r = Object(c.a)(a.s, e)[0] - Object(c.a)(-a.s, e)[0],
          o = s(0, e)[1],
          i = Object(c.a)(0, e)[1],
          u = a.E - i,
          l = a.H / t,
          h = 4 / a.H,
          p = o + u * u * 4 / a.H;return n.invert = function (n, e) {
        n /= h, e *= p;var f = Object(a.a)(e);if (f > o) {
          var b = Object(a.r)(t - 1, Object(a.q)(0, Object(a.n)((n + a.s) / l)));n = (n + a.s * (t - 1) / t - b * l) * r / a.H;var v = c.a.invert(n, .25 * (f - o) * a.H / u + i);return v[0] -= a.s * (t - 1) / t - b * l, e < 0 && (v[1] = -v[1]), v;
        }return s.invert(n, e);
      }, n;
    }n.b = r;var o = e(14),
        i = e(0),
        c = e(92),
        u = e(174),
        a = e(1),
        f = 41 + 48 / 36 + 37 / 3600,
        s = Object(u.a)(0);n.a = function () {
      var t = 4,
          n = Object(i.geoProjectionMutator)(r),
          e = n(t),
          c = e.stream;return e.lobes = function (e) {
        return arguments.length ? n(t = +e) : t;
      }, e.stream = function (n) {
        var r = e.rotate(),
            u = c(n),
            a = (e.rotate([0, 0]), c(n));return e.rotate(r), u.sphere = function () {
          Object(i.geoStream)(function (t) {
            return { type: "Polygon", coordinates: [Object(o.d)(-180, 180 + t / 2, t).map(function (t, n) {
                return [t, 1 & n ? 90 - 1e-6 : f];
              }).concat(Object(o.d)(180, -180 - t / 2, -t).map(function (t, n) {
                return [t, 1 & n ? 1e-6 - 90 : -f];
              }))] };
          }(180 / t), a);
        }, u;
      }, e.scale(239.75);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, o) {
        var l,
            h,
            p = 1 - Object(i.y)(o);if (p && p < 2) {
          var b,
              v = i.o - o,
              g = 25;do {
            var d = Object(i.y)(v),
                j = Object(i.h)(v),
                O = c + Object(i.g)(d, r - j),
                y = 1 + s - 2 * r * j;v -= b = (v - f * c - r * d + y * O - .5 * p * e) / (2 * r * d * O);
          } while (Object(i.a)(b) > i.l && --g > 0);l = u * Object(i.B)(y), h = n * O / i.s;
        } else l = u * (t + p), h = n * c / i.s;return [l * Object(i.y)(h), a - l * Object(i.h)(h)];
      }var e,
          r = 1 + t,
          o = Object(i.y)(1 / r),
          c = Object(i.e)(o),
          u = 2 * Object(i.B)(i.s / (e = i.s + 4 * c * r)),
          a = .5 * u * (r + Object(i.B)(t * (2 + t))),
          f = t * t,
          s = r * r;return n.invert = function (t, n) {
        var o = t * t + (n -= a) * n,
            l = (1 + s - o / (u * u)) / (2 * r),
            h = Object(i.b)(l),
            p = Object(i.y)(h),
            b = c + Object(i.g)(p, r - l);return [Object(i.e)(t / Object(i.B)(o)) * i.s / b, Object(i.e)(1 - 2 * (h - f * c - r * p + (1 + s - 2 * r * l) * b) / e)];
      }, n;
    }n.b = r;var o = e(0),
        i = e(1);n.a = function () {
      var t = 1,
          n = Object(o.geoProjectionMutator)(r),
          e = n(t);return e.ratio = function (e) {
        return arguments.length ? n(t = +e) : t;
      }, e.scale(167.774).center([0, 18.67]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(173),
        o = e(26),
        i = [[[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];n.a = function () {
      return Object(o.a)(r.a, i).scale(160.857);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(178),
        o = e(26),
        i = [[[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];n.a = function () {
      return Object(o.a)(r.b, i).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(22),
        o = e(26),
        i = [[[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];n.a = function () {
      return Object(o.a)(r.d, i).scale(169.529);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(22),
        o = e(26),
        i = [[[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];n.a = function () {
      return Object(o.a)(r.d, i).scale(169.529).rotate([20, 0]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(93),
        o = e(26),
        i = [[[[-180, 35], [-30, 90], [0, 35]], [[0, 35], [30, 90], [180, 35]]], [[[-180, -10], [-102, -90], [-65, -10]], [[-65, -10], [5, -90], [77, -10]], [[77, -10], [103, -90], [180, -10]]]];n.a = function () {
      return Object(o.a)(r.c, i).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(41),
        o = e(26),
        i = [[[[-180, 0], [-110, 90], [-40, 0]], [[-40, 0], [0, 90], [40, 0]], [[40, 0], [110, 90], [180, 0]]], [[[-180, 0], [-110, -90], [-40, 0]], [[-40, 0], [0, -90], [40, 0]], [[40, 0], [110, -90], [180, 0]]]];n.a = function () {
      return Object(o.a)(r.b, i).scale(152.63).rotate([-20, 0]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [3 / i.H * t * Object(i.B)(i.s * i.s / 3 - n * n), n];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      return [i.H / 3 * t / Object(i.B)(i.s * i.s / 3 - n * n), n];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(158.837);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, e) {
        if (Object(i.a)(Object(i.a)(e) - i.o) < i.k) return [0, e < 0 ? -2 : 2];var r = Object(i.y)(e),
            o = Object(i.t)((1 + r) / (1 - r), t / 2),
            c = .5 * (o + 1 / o) + Object(i.h)(n *= t);return [2 * Object(i.y)(n) / c, (o - 1 / o) / c];
      }return n.invert = function (n, e) {
        var r = Object(i.a)(e);if (Object(i.a)(r - 2) < i.k) return n ? null : [0, Object(i.x)(e) * i.o];if (r > 2) return null;var o = (n /= 2) * n,
            c = (e /= 2) * e,
            u = 2 * e / (1 + o + c);return u = Object(i.t)((1 + u) / (1 - u), 1 / t), [Object(i.g)(2 * n, 1 - o - c) / t, Object(i.e)((u - 1) / (u + 1))];
      }, n;
    }n.b = r;var o = e(0),
        i = e(1);n.a = function () {
      var t = .5,
          n = Object(o.geoProjectionMutator)(r),
          e = n(t);return e.spacing = function (e) {
        return arguments.length ? n(t = +e) : t;
      }, e.scale(124.75);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t * (1 + Object(i.B)(Object(i.h)(n))) / 2, n / (Object(i.h)(n / 2) * Object(i.h)(t / 6))];
    }n.b = r;var o = e(0),
        i = e(1),
        c = i.s / i.D;r.invert = function (t, n) {
      var e = Object(i.a)(t),
          r = Object(i.a)(n),
          o = i.k,
          u = i.o;r < c ? u *= r / c : o += 6 * Object(i.b)(c / r);for (var a = 0; a < 25; a++) {
        var f = Object(i.y)(u),
            s = Object(i.B)(Object(i.h)(u)),
            l = Object(i.y)(u / 2),
            h = Object(i.h)(u / 2),
            p = Object(i.y)(o / 6),
            b = Object(i.h)(o / 6),
            v = .5 * o * (1 + s) - e,
            g = u / (h * b) - r,
            d = s ? -.25 * o * f / s : 0,
            j = .5 * (1 + s),
            O = (1 + .5 * u * l / h) / (h * b),
            y = u / h * (p / 6) / (b * b),
            m = d * y - O * j,
            x = (v * y - g * j) / m,
            _ = (g * d - v * O) / m;if (u -= x, o -= _, Object(i.a)(x) < i.k && Object(i.a)(_) < i.k) break;
      }return [t < 0 ? -o : o, n < 0 ? -u : u];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(97.2672);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = t * t,
          r = n * n;return [t * (.975534 + r * (-.0143059 * e - .119161 + -.0547009 * r)), n * (1.00384 + e * (.0802894 + -.02855 * r + 199025e-9 * e) + r * (.0998909 + -.0491032 * r))];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = Object(i.x)(t) * i.s,
          r = n / 2,
          o = 50;do {
        var c = e * e,
            u = r * r,
            a = e * r,
            f = e * (.975534 + u * (-.0143059 * c - .119161 + -.0547009 * u)) - t,
            s = r * (1.00384 + c * (.0802894 + -.02855 * u + 199025e-9 * c) + u * (.0998909 + -.0491032 * u)) - n,
            l = .975534 - u * (.119161 + 3 * c * .0143059 + .0547009 * u),
            h = -a * (.238322 + .2188036 * u + .0286118 * c),
            p = a * (.1605788 + 7961e-7 * c + -.0571 * u),
            b = 1.00384 + c * (.0802894 + 199025e-9 * c) + u * (3 * (.0998909 - .02855 * c) - .245516 * u),
            v = h * p - b * l,
            g = (s * h - f * b) / v,
            d = (f * p - s * l) / v;e -= g, r -= d;
      } while ((Object(i.a)(g) > i.k || Object(i.a)(d) > i.k) && --o > 0);return o && [e, r];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(139.98);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [Object(i.y)(t) / Object(i.h)(n), Object(i.F)(n) * Object(i.h)(t)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = t * t,
          r = n * n,
          o = r + 1,
          c = t ? i.C * Object(i.B)((o - Object(i.B)(e * e + 2 * e * (r - 1) + o * o)) / e + 1) : 1 / Object(i.B)(o);return [Object(i.e)(t * c), Object(i.x)(n) * Object(i.b)(c)];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(144.049).clipAngle(89.999);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, o) {
        var c = o - t,
            u = Object(i.a)(c) < i.k ? n * e : Object(i.a)(u = i.u + o / 2) < i.k || Object(i.a)(Object(i.a)(u) - i.o) < i.k ? 0 : n * c / Object(i.p)(Object(i.F)(u) / r);return [u, c];
      }var e = Object(i.h)(t),
          r = Object(i.F)(i.u + t / 2);return n.invert = function (n, o) {
        var c,
            u = o + t;return [Object(i.a)(o) < i.k ? n / e : Object(i.a)(c = i.u + u / 2) < i.k || Object(i.a)(Object(i.a)(c) - i.o) < i.k ? 0 : n * Object(i.p)(Object(i.F)(c) / r) / o, u];
      }, n;
    }n.b = r;var o = e(35),
        i = e(1);n.a = function () {
      return Object(o.a)(r).parallel(40).scale(158.837);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t, 1.25 * Object(i.p)(Object(i.F)(i.u + .4 * n))];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      return [t, 2.5 * Object(i.f)(Object(i.m)(.8 * n)) - .625 * i.s];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(108.318);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, r) {
        for (var o, i = Object(c.h)(r), u = 2 / (1 + i * Object(c.h)(n)), a = u * i * Object(c.y)(n), f = u * Object(c.y)(r), s = e, l = t[s], h = l[0], p = l[1]; --s >= 0;) {
          h = (l = t[s])[0] + a * (o = h) - f * p, p = l[1] + a * p + f * o;
        }return h = a * (o = h) - f * p, p = a * p + f * o, [h, p];
      }var e = t.length - 1;return n.invert = function (n, r) {
        var o = 20,
            i = n,
            u = r;do {
          for (var a, f = e, s = t[f], l = s[0], h = s[1], p = 0, b = 0; --f >= 0;) {
            p = l + i * (a = p) - u * b, b = h + i * b + u * a, l = (s = t[f])[0] + i * (a = l) - u * h, h = s[1] + i * h + u * a;
          }var v,
              g,
              d = (p = l + i * (a = p) - u * b) * p + (b = h + i * b + u * a) * b;i -= v = ((l = i * (a = l) - u * h - n) * p + (h = i * h + u * a - r) * b) / d, u -= g = (h * p - l * b) / d;
        } while (Object(c.a)(v) + Object(c.a)(g) > c.k * c.k && --o > 0);if (o) {
          var j = Object(c.B)(i * i + u * u),
              O = 2 * Object(c.f)(.5 * j),
              y = Object(c.y)(O);return [Object(c.g)(i * y, j * Object(c.h)(O)), j ? Object(c.e)(u * y / j) : 0];
        }
      }, n;
    }function o(t, n) {
      var e = Object(i.geoProjection)(r(t)).rotate(n).clipAngle(90),
          o = Object(i.geoRotation)(n),
          c = e.center;return delete e.rotate, e.center = function (t) {
        return arguments.length ? c(o(t)) : o.invert(c());
      }, e;
    }n.g = r, n.b = function () {
      return o(u, [152, -64]).scale(1500).center([-160.908, 62.4864]).clipAngle(25);
    }, n.c = function () {
      return o(a, [95, -38]).scale(1e3).clipAngle(55).center([-96.5563, 38.8675]);
    }, n.d = function () {
      return o(f, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);
    }, n.f = function () {
      return o(s, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);
    }, n.e = function () {
      return o(l, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);
    }, n.a = o;var i = e(0),
        c = e(1),
        u = [[.9972523, 0], [.0052513, -.0041175], [.0074606, .0048125], [-.0153783, -.1968253], [.0636871, -.1408027], [.3660976, -.2937382]],
        a = [[.98879, 0], [0, 0], [-.050909, 0], [0, 0], [.075528, 0]],
        f = [[.984299, 0], [.0211642, .0037608], [-.1036018, -.0575102], [-.0329095, -.0320119], [.0499471, .1223335], [.026046, .0899805], [7388e-7, -.1435792], [.0075848, -.1334108], [-.0216473, .0776645], [-.0225161, .0853673]],
        s = [[.9245, 0], [0, 0], [.01943, 0]],
        l = [[.721316, 0], [0, 0], [-.00881625, -.00617325]];
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.e)(7 * Object(i.y)(n) / (3 * c));return [c * t * (2 * Object(i.h)(2 * e / 3) - 1) / u, 9 * Object(i.y)(e / 3) / u];
    }n.b = r;var o = e(0),
        i = e(1),
        c = Object(i.B)(6),
        u = Object(i.B)(7);r.invert = function (t, n) {
      var e = 3 * Object(i.e)(n * u / 9);return [t * u / (c * (2 * Object(i.h)(2 * e / 3) - 1)), Object(i.e)(3 * Object(i.y)(e) * c / 7)];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(164.859);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      for (var e, r = (1 + i.C) * Object(i.y)(n), o = n, c = 0; c < 25 && (o -= e = (Object(i.y)(o / 2) + Object(i.y)(o) - r) / (.5 * Object(i.h)(o / 2) + Object(i.h)(o)), !(Object(i.a)(e) < i.k)); c++) {}return [t * (1 + 2 * Object(i.h)(o) / Object(i.h)(o / 2)) / (3 * i.D), 2 * Object(i.B)(3) * Object(i.y)(o / 2) / Object(i.B)(2 + i.D)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = n * Object(i.B)(2 + i.D) / (2 * Object(i.B)(3)),
          r = 2 * Object(i.e)(e);return [3 * i.D * t / (1 + 2 * Object(i.h)(r) / Object(i.h)(r / 2)), Object(i.e)((e + Object(i.y)(r)) / (1 + i.C))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(188.209);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      for (var e, r = Object(i.B)(6 / (4 + i.s)), o = (1 + i.s / 4) * Object(i.y)(n), c = n / 2, u = 0; u < 25 && (c -= e = (c / 2 + Object(i.y)(c) - o) / (.5 + Object(i.h)(c)), !(Object(i.a)(e) < i.k)); u++) {}return [r * (.5 + Object(i.h)(c)) * t / 1.5, r * c];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = Object(i.B)(6 / (4 + i.s)),
          r = n / e;return Object(i.a)(Object(i.a)(r) - i.o) < i.k && (r = r < 0 ? -i.o : i.o), [1.5 * t / (e * (.5 + Object(i.h)(r))), Object(i.e)((r / 2 + Object(i.y)(r)) / (1 + i.s / 4))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(166.518);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = n * n,
          r = e * e;return [t * (.8707 - .131979 * e + r * (r * (.003971 * e - .001529 * r) - .013791)), n * (1.007226 + e * (.015085 + r * (.028874 * e - .044475 - .005916 * r)))];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e,
          r = n,
          o = 25;do {
        var c = r * r,
            u = c * c;r -= e = (r * (1.007226 + c * (.015085 + u * (.028874 * c - .044475 - .005916 * u))) - n) / (1.007226 + c * (.045255 + u * (.259866 * c - .311325 - .005916 * 11 * u)));
      } while (Object(i.a)(e) > i.k && --o > 0);return [t / (.8707 + (c = r * r) * (c * (c * c * c * (.003971 - .001529 * c) - .013791) - .131979)), r];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(175.295);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = n * n,
          r = e * e,
          o = e * r;return [t * (.84719 - .13063 * e + o * o * (.05494 * e - .04515 - .02326 * r + .00331 * o)), n * (1.01183 + r * r * (.01926 * e - .02625 - .00396 * r))];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e,
          r,
          o,
          c,
          u = n,
          a = 25;do {
        u -= e = (u * (1.01183 + (o = (r = u * u) * r) * o * (.01926 * r - .02625 - .00396 * o)) - n) / (1.01183 + o * o * (.21186 * r - .23625 + -.05148 * o));
      } while (Object(i.a)(e) > i.l && --a > 0);return r = u * u, o = r * r, c = r * o, [t / (.84719 - .13063 * r + c * c * (.05494 * r - .04515 - .02326 * o + .00331 * c)), u];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(175.295);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t * (1 + Object(i.h)(n)) / 2, 2 * (n - Object(i.F)(n / 2))];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      for (var e = n / 2, r = 0, o = 1 / 0; r < 10 && Object(i.a)(o) > i.k; ++r) {
        var c = Object(i.h)(n / 2);n -= o = (n - Object(i.F)(n / 2) - e) / (1 - .5 / (c * c));
      }return [2 * t / (1 + Object(i.h)(n)), n];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = n * n;return [t, n * (c + e * e * (u + e * (a + f * e)))];
    }n.b = r;var o = e(0),
        i = e(1),
        c = 1.0148,
        u = .23185,
        a = -.14499,
        f = .02406,
        s = c,
        l = 5 * u,
        h = 7 * a,
        p = 9 * f;r.invert = function (t, n) {
      n > 1.790857183 ? n = 1.790857183 : n < -1.790857183 && (n = -1.790857183);var e,
          r = n;do {
        var o = r * r;r -= e = (r * (c + o * o * (u + o * (a + f * o))) - n) / (s + o * o * (l + o * (h + p * o)));
      } while (Object(i.a)(e) > i.k);return [t, r];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(139.319);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      if (Object(i.a)(n) < i.k) return [t, 0];var e = Object(i.F)(n),
          r = t * Object(i.y)(n);return [Object(i.y)(r) / e, n + (1 - Object(i.h)(r)) / e];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      if (Object(i.a)(n) < i.k) return [t, 0];var e,
          r = t * t + n * n,
          o = .5 * n,
          c = 10;do {
        var u = Object(i.F)(o),
            a = 1 / Object(i.h)(o),
            f = r - 2 * n * o + o * o;o -= e = (u * f + 2 * (o - n)) / (2 + f * a * a + 2 * (o - n) * u);
      } while (Object(i.a)(e) > i.k && --c > 0);return u = Object(i.F)(o), [(Object(i.a)(n) < Object(i.a)(o + 1 / u) ? Object(i.e)(t * u) : Object(i.x)(t) * (Object(i.b)(Object(i.a)(t * u)) + i.o)) / Object(i.y)(o), o];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(103.74);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t[0] * n[0] + t[1] * n[3], t[0] * n[1] + t[1] * n[4], t[0] * n[2] + t[1] * n[5] + t[2], t[3] * n[0] + t[4] * n[3], t[3] * n[1] + t[4] * n[4], t[3] * n[2] + t[4] * n[5] + t[5]];
    }function o(t, n) {
      return [t[0] - n[0], t[1] - n[1]];
    }function i(t) {
      return Object(c.B)(t[0] * t[0] + t[1] * t[1]);
    }n.b = function (t) {
      var n = 1 / (t[0] * t[4] - t[1] * t[3]);return [n * t[4], -n * t[1], n * (t[1] * t[5] - t[2] * t[4]), -n * t[3], n * t[0], n * (t[2] * t[3] - t[0] * t[5])];
    }, n.c = r;var c = e(1);n.a = function (t, n) {
      var e = o(t[1], t[0]),
          u = o(n[1], n[0]),
          a = function (t, n) {
        return Object(c.g)(t[0] * n[1] - t[1] * n[0], t[0] * n[0] + t[1] * n[1]);
      }(e, u),
          f = i(e) / i(u);return r([1, 0, t[0][0], 0, 1, t[0][1]], r([f, 0, 0, 0, f, 0], r([Object(c.h)(a), Object(c.y)(a), 0, -Object(c.y)(a), Object(c.h)(a), 0], [1, 0, -n[0][0], 0, 1, -n[0][1]])));
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(0),
        o = e(1),
        i = e(61),
        c = e(94);n.a = function (t) {
      t = t || function (t) {
        var n = Object(r.geoCentroid)({ type: "MultiPoint", coordinates: t });return Object(r.geoGnomonic)().scale(1).translate([0, 0]).rotate([-n[0], -n[1]]);
      };var n = c.a.map(function (n) {
        return { face: n, project: t(n) };
      });return [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (t, e) {
        var r = n[t];r && (r.children || (r.children = [])).push(n[e]);
      }), Object(i.a)(n[0], function (t, e) {
        return n[t < -o.s / 2 ? e < 0 ? 6 : 4 : t < 0 ? e < 0 ? 2 : 0 : t < o.s / 2 ? e < 0 ? 3 : 1 : e < 0 ? 7 : 5];
      }).scale(101.858).center([0, 45]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.a)(t, n);return [e[0] * f, e[1]];
    }var o = e(0),
        i = e(92),
        c = e(1),
        u = e(61),
        a = e(94),
        f = 2 / Object(c.B)(3);r.invert = function (t, n) {
      return i.a.invert(t / f, n);
    }, n.a = function (t) {
      t = t || function (t) {
        var n = Object(o.geoCentroid)({ type: "MultiPoint", coordinates: t });return Object(o.geoProjection)(r).translate([0, 0]).scale(1).rotate(n[1] > 0 ? [-n[0], 0] : [180 - n[0], 180]);
      };var n = a.a.map(function (n) {
        return { face: n, project: t(n) };
      });return [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (t, e) {
        var r = n[t];r && (r.children || (r.children = [])).push(n[e]);
      }), Object(u.a)(n[0], function (t, e) {
        return n[t < -c.s / 2 ? e < 0 ? 6 : 4 : t < 0 ? e < 0 ? 2 : 0 : t < c.s / 2 ? e < 0 ? 3 : 1 : e < 0 ? 7 : 5];
      }).scale(121.906).center([0, 48.5904]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      for (var e = 0, r = t.length, o = 0; e < r; ++e) {
        o += t[e] * n[e];
      }return o;
    }function o(t) {
      return [Object(u.g)(t[1], t[0]) * u.j, Object(u.e)(Object(u.q)(-1, Object(u.r)(1, t[2]))) * u.j];
    }function i(t) {
      var n = t[0] * u.v,
          e = t[1] * u.v,
          r = Object(u.h)(e);return [r * Object(u.h)(n), r * Object(u.y)(n), Object(u.y)(e)];
    }var c = e(0),
        u = e(1),
        a = e(61),
        f = e(94);n.a = function (t) {
      t = t || function (t) {
        var n = 6 === t.length ? Object(c.geoCentroid)({ type: "MultiPoint", coordinates: t }) : t[0];return Object(c.geoGnomonic)().scale(1).translate([0, 0]).rotate([-n[0], -n[1]]);
      };var n = f.a.map(function (t) {
        for (var n, e = t.map(i), r = e.length, c = e[r - 1], u = [], a = 0; a < r; ++a) {
          n = e[a], u.push(o([.9486832980505138 * c[0] + .31622776601683794 * n[0], .9486832980505138 * c[1] + .31622776601683794 * n[1], .9486832980505138 * c[2] + .31622776601683794 * n[2]]), o([.9486832980505138 * n[0] + .31622776601683794 * c[0], .9486832980505138 * n[1] + .31622776601683794 * c[1], .9486832980505138 * n[2] + .31622776601683794 * c[2]])), c = n;
        }return u;
      }),
          e = [],
          s = [-1, 0, 0, 1, 0, 1, 4, 5];n.forEach(function (t, r) {
        for (var o = f.a[r], c = o.length, u = e[r] = [], a = 0; a < c; ++a) {
          n.push([o[a], t[(2 * a + 2) % (2 * c)], t[(2 * a + 1) % (2 * c)]]), s.push(r), u.push(function (t, n) {
            return [t[1] * n[2] - t[2] * n[1], t[2] * n[0] - t[0] * n[2], t[0] * n[1] - t[1] * n[0]];
          }(i(t[(2 * a + 2) % (2 * c)]), i(t[(2 * a + 1) % (2 * c)])));
        }
      });var l = n.map(function (n) {
        return { project: t(n), face: n };
      });return s.forEach(function (t, n) {
        var e = l[t];e && (e.children || (e.children = [])).push(l[n]);
      }), Object(a.a)(l[0], function (t, n) {
        var o = Object(u.h)(n),
            i = [o * Object(u.h)(t), o * Object(u.y)(t), Object(u.y)(n)],
            c = t < -u.s / 2 ? n < 0 ? 6 : 4 : t < 0 ? n < 0 ? 2 : 0 : t < u.s / 2 ? n < 0 ? 3 : 1 : n < 0 ? 7 : 5,
            a = e[c];return l[r(a[0], i) < 0 ? 8 + 3 * c : r(a[1], i) < 0 ? 8 + 3 * c + 1 : r(a[2], i) < 0 ? 8 + 3 * c + 2 : c];
      }).scale(110.625).center([0, 45]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return { type: "FeatureCollection", features: t.features.map(function (t) {
          return o(t, n);
        }) };
    }function o(t, n) {
      return { type: "Feature", id: t.id, properties: t.properties, geometry: i(t.geometry, n) };
    }function i(t, n) {
      if (!t) return null;if ("GeometryCollection" === t.type) return function (t, n) {
        return { type: "GeometryCollection", geometries: t.geometries.map(function (t) {
            return i(t, n);
          }) };
      }(t, n);var e;switch (t.type) {case "Point":case "MultiPoint":
          e = h;break;case "LineString":case "MultiLineString":
          e = p;break;case "Polygon":case "MultiPolygon":case "Sphere":
          e = b;break;default:
          return null;}return Object(c.geoStream)(t, n(e)), e.result();
    }var c = e(0),
        u = e(394),
        a = e(395),
        f = e(396);n.a = function (t, n) {
      var e,
          c = n.stream;if (!c) throw new Error("invalid projection");switch (t && t.type) {case "Feature":
          e = o;break;case "FeatureCollection":
          e = r;break;default:
          e = i;}return e(t, c);
    };var s = [],
        l = [],
        h = { point: function point(t, n) {
        s.push([t, n]);
      }, result: function result() {
        var t = s.length ? s.length < 2 ? { type: "Point", coordinates: s[0] } : { type: "MultiPoint", coordinates: s } : null;return s = [], t;
      } },
        p = { lineStart: u.a, point: function point(t, n) {
        s.push([t, n]);
      }, lineEnd: function lineEnd() {
        s.length && (l.push(s), s = []);
      }, result: function result() {
        var t = l.length ? l.length < 2 ? { type: "LineString", coordinates: l[0] } : { type: "MultiLineString", coordinates: l } : null;return l = [], t;
      } },
        b = { polygonStart: u.a, lineStart: u.a, point: function point(t, n) {
        s.push([t, n]);
      }, lineEnd: function lineEnd() {
        var t = s.length;if (t) {
          do {
            s.push(s[0].slice());
          } while (++t < 4);l.push(s), s = [];
        }
      }, polygonEnd: u.a, result: function result() {
        if (!l.length) return null;var t = [],
            n = [];return l.forEach(function (e) {
          Object(a.a)(e) ? t.push([e]) : n.push(e);
        }), n.forEach(function (n) {
          var e = n[0];t.some(function (t) {
            if (Object(f.a)(t[0], e)) return t.push(n), !0;
          }) || t.push([n]);
        }), l = [], t.length ? t.length > 1 ? { type: "MultiPolygon", coordinates: t } : { type: "Polygon", coordinates: t[0] } : null;
      } };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {};
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      if ((n = t.length) < 4) return !1;for (var n, e = 0, r = t[n - 1][1] * t[0][0] - t[n - 1][0] * t[0][1]; ++e < n;) {
        r += t[e - 1][1] * t[e][0] - t[e - 1][0] * t[e][1];
      }return r <= 0;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      for (var e = n[0], r = n[1], o = !1, i = 0, c = t.length, u = c - 1; i < c; u = i++) {
        var a = t[i],
            f = a[0],
            s = a[1],
            l = t[u],
            h = l[0],
            p = l[1];s > r ^ p > r && e < (h - f) * (r - s) / (p - s) + f && (o = !o);
      }return o;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(175),
        o = e(95);n.a = function () {
      return Object(o.a)(r.b).scale(176.423);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      function e(t) {
        var e = t.length,
            r = 2,
            o = new Array(e);for (o[0] = +t[0].toFixed(n), o[1] = +t[1].toFixed(n); r < e;) {
          o[r] = t[r], ++r;
        }return o;
      }function r(t) {
        return t.map(e);
      }function o(t) {
        return t.map(r);
      }function i(t) {
        if (null == t) return t;var n;switch (t.type) {case "GeometryCollection":
            n = { type: "GeometryCollection", geometries: t.geometries.map(i) };break;case "Point":
            n = { type: "Point", coordinates: e(t.coordinates) };break;case "MultiPoint":case "LineString":
            n = { type: t.type, coordinates: r(t.coordinates) };break;case "MultiLineString":case "Polygon":
            n = { type: t.type, coordinates: o(t.coordinates) };break;case "MultiPolygon":
            n = { type: "MultiPolygon", coordinates: t.coordinates.map(o) };break;default:
            return t;}return null != t.bbox && (n.bbox = t.bbox), n;
      }function c(t) {
        var n = { type: "Feature", properties: t.properties, geometry: i(t.geometry) };return null != t.id && (n.id = t.id), null != t.bbox && (n.bbox = t.bbox), n;
      }if (!(0 <= (n = +n) && n <= 20)) throw new Error("invalid digits");if (null != t) switch (t.type) {case "Feature":
          return c(t);case "FeatureCollection":
          var u = { type: "FeatureCollection", features: t.features.map(c) };return null != t.bbox && (u.bbox = t.bbox), u;default:
          return i(t);}return t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, r) {
        var i = e ? Object(o.F)(n * e / 2) / e : n / 2;if (!r) return [2 * i, -t];var c = 2 * Object(o.f)(i * Object(o.y)(r)),
            u = 1 / Object(o.F)(r);return [Object(o.y)(c) * u, r + (1 - Object(o.h)(c)) * u - t];
      }var e = Object(o.y)(t);return n.invert = function (n, r) {
        if (Object(o.a)(r += t) < o.k) return [e ? 2 * Object(o.f)(e * n / 2) / e : n, 0];var i,
            c = n * n + r * r,
            u = 0,
            a = 10;do {
          var f = Object(o.F)(u),
              s = 1 / Object(o.h)(u),
              l = c - 2 * r * u + u * u;u -= i = (f * l + 2 * (u - r)) / (2 + l * s * s + 2 * (u - r) * f);
        } while (Object(o.a)(i) > o.k && --a > 0);var h = n * (f = Object(o.F)(u)),
            p = Object(o.F)(Object(o.a)(r) < Object(o.a)(u + 1 / f) ? .5 * Object(o.e)(h) : .5 * Object(o.b)(h) + o.s / 4) / Object(o.y)(u);return [e ? 2 * Object(o.f)(e * p) / e : 2 * p, u];
      }, n;
    }n.b = r;var o = e(1),
        i = e(35);n.a = function () {
      return Object(i.a)(r).scale(131.215);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e,
          r = Object(i.r)(18, 36 * Object(i.a)(n) / i.s),
          o = Object(i.n)(r),
          u = r - o,
          a = (e = c[o])[0],
          f = e[1],
          s = (e = c[++o])[0],
          l = e[1],
          h = (e = c[Object(i.r)(19, ++o)])[0],
          p = e[1];return [t * (s + u * (h - a) / 2 + u * u * (h - 2 * s + a) / 2), (n > 0 ? i.o : -i.o) * (l + u * (p - f) / 2 + u * u * (p - 2 * l + f) / 2)];
    }n.b = r;var o = e(0),
        i = e(1),
        c = [[.9986, -.062], [1, 0], [.9986, .062], [.9954, .124], [.99, .186], [.9822, .248], [.973, .31], [.96, .372], [.9427, .434], [.9216, .4958], [.8962, .5571], [.8679, .6176], [.835, .6769], [.7986, .7346], [.7597, .7903], [.7186, .8435], [.6732, .8936], [.6213, .9394], [.5722, .9761], [.5322, 1]];c.forEach(function (t) {
      t[1] *= 1.0144;
    }), r.invert = function (t, n) {
      var e = n / i.o,
          r = 90 * e,
          o = Object(i.r)(18, Object(i.a)(r / 5)),
          u = Object(i.q)(0, Object(i.n)(o));do {
        var a = c[u][1],
            f = c[u + 1][1],
            s = c[Object(i.r)(19, u + 2)][1],
            l = s - a,
            h = s - 2 * f + a,
            p = 2 * (Object(i.a)(e) - f) / l,
            b = h / l,
            v = p * (1 - b * p * (1 - 2 * b * p));if (v >= 0 || 1 === u) {
          r = (n >= 0 ? 5 : -5) * (v + o);var g,
              d = 50;do {
            v = (o = Object(i.r)(18, Object(i.a)(r) / 5)) - (u = Object(i.n)(o)), a = c[u][1], f = c[u + 1][1], s = c[Object(i.r)(19, u + 2)][1], r -= (g = (n >= 0 ? i.o : -i.o) * (f + v * (s - a) / 2 + v * v * (s - 2 * f + a) / 2) - n) * i.j;
          } while (Object(i.a)(g) > i.l && --d > 0);break;
        }
      } while (--u >= 0);var j = c[u][0],
          O = c[u + 1][0],
          y = c[Object(i.r)(19, u + 2)][0];return [t / (O + v * (y - j) / 2 + v * v * (y - 2 * O + j) / 2), r * i.v];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(n, e) {
        var i = r(n, e),
            u = i[1],
            a = u * c / (t - 1) + o;return [i[0] * o / a, u / a];
      }var r = function (t) {
        function n(n, e) {
          var r = Object(i.h)(e),
              o = (t - 1) / (t - r * Object(i.h)(n));return [o * r * Object(i.y)(n), o * Object(i.y)(e)];
        }return n.invert = function (n, e) {
          var r = n * n + e * e,
              o = Object(i.B)(r),
              c = (t - Object(i.B)(1 - r * (t + 1) / (t - 1))) / ((t - 1) / o + o / (t - 1));return [Object(i.g)(n * c, o * Object(i.B)(1 - c * c)), o ? Object(i.e)(e * c / o) : 0];
        }, n;
      }(t);if (!n) return r;var o = Object(i.h)(n),
          c = Object(i.y)(n);return e.invert = function (n, e) {
        var i = (t - 1) / (t - 1 - e * c);return r.invert(i * n, i * e * o);
      }, e;
    }n.b = r;var o = e(0),
        i = e(1);n.a = function () {
      var t = 2,
          n = 0,
          e = Object(o.geoProjectionMutator)(r),
          c = e(t, n);return c.distance = function (r) {
        return arguments.length ? e(t = +r, n) : t;
      }, c.tilt = function (r) {
        return arguments.length ? e(t, n = r * i.v) : n * i.j;
      }, c.scale(432.147).clipAngle(Object(i.b)(1 / t) * i.j - 1e-6);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.length > 0;
    }function o(t) {
      return t === g || t === j ? [0, t] : [h, function (t) {
        return Math.floor(t * l) / l;
      }(t)];
    }function i(t) {
      var n = t[0],
          e = t[1],
          r = !1;return n <= p ? (n = h, r = !0) : n >= v && (n = b, r = !0), e <= d ? (e = g, r = !0) : e >= O && (e = j, r = !0), r ? [n, e] : t;
    }function c(t) {
      return t.map(i);
    }function u(t, n, e) {
      for (var r = 0, c = t.length; r < c; ++r) {
        var u = t[r].slice();e.push({ index: -1, polygon: n, ring: u });for (var a = 0, f = u.length; a < f; ++a) {
          var s = u[a],
              l = s[0],
              h = s[1];if (l <= p || l >= v || h <= d || h >= O) {
            u[a] = i(s);for (var b = a + 1; b < f; ++b) {
              var g = u[b],
                  j = g[0],
                  y = g[1];if (j > p && j < v && y > d && y < O) break;
            }if (b === a + 1) continue;if (a) {
              var m = { index: -1, polygon: n, ring: u.slice(0, a + 1) };m.ring[m.ring.length - 1] = o(h), e[e.length - 1] = m;
            } else e.pop();if (b >= f) break;e.push({ index: -1, polygon: n, ring: u = u.slice(b - 1) }), u[0] = o(u[0][1]), a = -1, f = u.length;
          }
        }
      }
    }function a(t) {
      var n,
          e,
          r,
          o,
          i,
          c,
          u = t.length,
          a = {},
          f = {};for (n = 0; n < u; ++n) {
        r = (e = t[n]).ring[0], i = e.ring[e.ring.length - 1], r[0] !== i[0] || r[1] !== i[1] ? (e.index = n, a[r] = f[i] = e) : (e.polygon.push(e.ring), t[n] = null);
      }for (n = 0; n < u; ++n) {
        if (e = t[n]) {
          if (r = e.ring[0], i = e.ring[e.ring.length - 1], o = f[r], c = a[i], delete a[r], delete f[i], r[0] === i[0] && r[1] === i[1]) {
            e.polygon.push(e.ring);continue;
          }o ? (delete f[r], delete a[o.ring[0]], o.ring.pop(), t[o.index] = null, e = { index: -1, polygon: o.polygon, ring: o.ring.concat(e.ring) }, o === c ? e.polygon.push(e.ring) : (e.index = u++, t.push(a[e.ring[0]] = f[e.ring[e.ring.length - 1]] = e))) : c ? (delete a[i], delete f[c.ring[c.ring.length - 1]], e.ring.pop(), e = { index: u++, polygon: c.polygon, ring: e.ring.concat(c.ring) }, t[c.index] = null, t.push(a[e.ring[0]] = f[e.ring[e.ring.length - 1]] = e)) : (e.ring.push(e.ring[0]), e.polygon.push(e.ring));
        }
      }
    }function f(t) {
      var n = { type: "Feature", geometry: s(t.geometry) };return null != t.id && (n.id = t.id), null != t.bbox && (n.bbox = t.bbox), null != t.properties && (n.properties = t.properties), n;
    }function s(t) {
      if (null == t) return t;var n, e, o, f;switch (t.type) {case "GeometryCollection":
          n = { type: "GeometryCollection", geometries: t.geometries.map(s) };break;case "Point":
          n = { type: "Point", coordinates: i(t.coordinates) };break;case "MultiPoint":case "LineString":
          n = { type: t.type, coordinates: c(t.coordinates) };break;case "MultiLineString":
          n = { type: "MultiLineString", coordinates: t.coordinates.map(c) };break;case "Polygon":
          var l = [];u(t.coordinates, l, e = []), a(e), n = { type: "Polygon", coordinates: l };break;case "MultiPolygon":
          e = [], o = -1, f = t.coordinates.length;for (var h = new Array(f); ++o < f;) {
            u(t.coordinates[o], h[o] = [], e);
          }a(e), n = { type: "MultiPolygon", coordinates: h.filter(r) };break;default:
          return t;}return null != t.bbox && (n.bbox = t.bbox), n;
    }var l = 1e4,
        h = -180,
        p = h + 1e-4,
        b = 180,
        v = b - 1e-4,
        g = -90,
        d = g + 1e-4,
        j = 90,
        O = j - 1e-4;n.a = function (t) {
      if (null == t) return t;switch (t.type) {case "Feature":
          return f(t);case "FeatureCollection":
          var n = { type: "FeatureCollection", features: t.features.map(f) };return null != t.bbox && (n.bbox = t.bbox), n;default:
          return s(t);}
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.F)(n / 2),
          r = Object(i.y)(i.u * e);return [t * (.74482 - .34588 * r * r), 1.70711 * e];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = n / 1.70711,
          r = Object(i.y)(i.u * e);return [t / (.74482 - .34588 * r * r), 2 * Object(i.f)(e)];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(146.153);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(t, n) {
        var r = Object(i.geoGnomonicRaw)(t, n);return r[0] *= e, r;
      }var e = Object(c.h)(t);return n.invert = function (t, n) {
        return i.geoGnomonicRaw.invert(t / e, n);
      }, n;
    }function o(t, n) {
      return Object(u.a)(r, t, n);
    }n.b = r, n.c = function () {
      return o([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);
    }, n.a = o;var i = e(0),
        c = e(1),
        u = e(180);
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      function n(n, i) {
        var u = Object(c.b)(Object(c.h)(i) * Object(c.h)(n - e)),
            a = Object(c.b)(Object(c.h)(i) * Object(c.h)(n - r));return u *= u, a *= a, [(u - a) / (2 * t), (i < 0 ? -1 : 1) * Object(c.B)(4 * o * a - (o - u + a) * (o - u + a)) / (2 * t)];
      }if (!(t *= 2)) return i.geoAzimuthalEquidistantRaw;var e = -t / 2,
          r = -e,
          o = t * t,
          u = Object(c.F)(r),
          a = .5 / Object(c.y)(r);return n.invert = function (t, n) {
        var o,
            i,
            f = n * n,
            s = Object(c.h)(Object(c.B)(f + (o = t + e) * o)),
            l = Object(c.h)(Object(c.B)(f + (o = t + r) * o));return [Object(c.g)(i = s - l, o = (s + l) * u), (n < 0 ? -1 : 1) * Object(c.b)(Object(c.B)(o * o + i * i) * a)];
      }, n;
    }function o(t, n) {
      return Object(u.a)(r, t, n);
    }n.b = r, n.c = function () {
      return o([-158, 21.5], [-77, 39]).clipAngle(130).scale(122.571);
    }, n.a = o;var i = e(0),
        c = e(1),
        u = e(180);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      if (Object(i.a)(n) < i.k) return [t, 0];var e = Object(i.a)(n / i.o),
          r = Object(i.e)(e);if (Object(i.a)(t) < i.k || Object(i.a)(Object(i.a)(n) - i.o) < i.k) return [0, Object(i.x)(n) * i.s * Object(i.F)(r / 2)];var o = Object(i.h)(r),
          c = Object(i.a)(i.s / t - t / i.s) / 2,
          u = c * c,
          a = o / (e + o - 1),
          f = a * (2 / e - 1),
          s = f * f,
          l = s + u,
          h = a - s,
          p = u + a;return [Object(i.x)(t) * i.s * (c * h + Object(i.B)(u * h * h - l * (a * a - s))) / l, Object(i.x)(n) * i.s * (f * p - c * Object(i.B)((u + 1) * l - p * p)) / l];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      if (Object(i.a)(n) < i.k) return [t, 0];if (Object(i.a)(t) < i.k) return [0, i.o * Object(i.y)(2 * Object(i.f)(n / i.s))];var e = (t /= i.s) * t,
          r = (n /= i.s) * n,
          o = e + r,
          c = o * o,
          u = -Object(i.a)(n) * (1 + o),
          a = u - 2 * r + e,
          f = -2 * u + 1 + 2 * r + c,
          s = r / f + (2 * a * a * a / (f * f * f) - 9 * u * a / (f * f)) / 27,
          l = (u - a * a / (3 * f)) / f,
          h = 2 * Object(i.B)(-l / 3),
          p = Object(i.b)(3 * s / (l * h)) / 3;return [i.s * (o - 1 + Object(i.B)(1 + 2 * (e - r) + c)) / (2 * t), Object(i.x)(n) * i.s * (-h * Object(i.h)(p + i.s / 3) - a / (3 * f))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(79.4183);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      if (Object(i.a)(n) < i.k) return [t, 0];var e = Object(i.a)(n / i.o),
          r = Object(i.e)(e);if (Object(i.a)(t) < i.k || Object(i.a)(Object(i.a)(n) - i.o) < i.k) return [0, Object(i.x)(n) * i.s * Object(i.F)(r / 2)];var o = Object(i.h)(r),
          c = Object(i.a)(i.s / t - t / i.s) / 2,
          u = c * c,
          a = o * (Object(i.B)(1 + u) - c * o) / (1 + u * e * e);return [Object(i.x)(t) * i.s * a, Object(i.x)(n) * i.s * Object(i.B)(1 - a * (2 * c + a))];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      if (!t) return [0, i.o * Object(i.y)(2 * Object(i.f)(n / i.s))];var e = Object(i.a)(t / i.s),
          r = (1 - e * e - (n /= i.s) * n) / (2 * e),
          o = r * r,
          c = Object(i.B)(o + 1);return [Object(i.x)(t) * i.s * (c - r), Object(i.x)(n) * i.o * Object(i.y)(2 * Object(i.g)(Object(i.B)((1 - 2 * r * e) * (r + c) - e), Object(i.B)(c + r + e)))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(79.4183);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      if (Object(i.a)(n) < i.k) return [t, 0];var e = n / i.o,
          r = Object(i.e)(e);if (Object(i.a)(t) < i.k || Object(i.a)(Object(i.a)(n) - i.o) < i.k) return [0, i.s * Object(i.F)(r / 2)];var o = (i.s / t - t / i.s) / 2,
          c = e / (1 + Object(i.h)(r));return [i.s * (Object(i.x)(t) * Object(i.B)(o * o + 1 - c * c) - o), i.s * c];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      if (!n) return [t, 0];var e = n / i.s,
          r = (i.s * i.s * (1 - e * e) - t * t) / (2 * i.s * t);return [t ? i.s * (Object(i.x)(t) * Object(i.B)(r * r + 1) - r) : 0, i.o * Object(i.y)(2 * Object(i.f)(e))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(79.4183);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      if (!n) return [t, 0];var e = Object(i.a)(n);if (!t || e === i.o) return [0, n];var r = e / i.o,
          o = r * r,
          c = (8 * r - o * (o + 2) - 5) / (2 * o * (r - 1)),
          u = c * c,
          a = r * c,
          f = o + u + 2 * a,
          s = r + 3 * c,
          l = t / i.o,
          h = l + 1 / l,
          p = Object(i.x)(Object(i.a)(t) - i.o) * Object(i.B)(h * h - 4),
          b = p * p,
          v = f * (o + u * b - 1) + (1 - o) * (o * (s * s + 4 * u) + 12 * a * u + 4 * u * u),
          g = (p * (f + u - 1) + 2 * Object(i.B)(v)) / (4 * f + b);return [Object(i.x)(t) * i.o * g, Object(i.x)(n) * i.o * Object(i.B)(1 + p * Object(i.a)(g) - g * g)];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e;if (!t || !n) return [t, n];n /= i.s;var r = Object(i.x)(t) * t / i.o,
          o = (r * r - 1 + 4 * n * n) / Object(i.a)(r),
          c = o * o,
          u = 2 * n,
          a = 50;do {
        var f = u * u,
            s = (8 * u - f * (f + 2) - 5) / (2 * f * (u - 1)),
            l = (3 * u - f * u - 10) / (2 * f * u),
            h = s * s,
            p = u * s,
            b = u + s,
            v = b * b,
            g = u + 3 * s,
            d = v * (f + h * c - 1) + (1 - f) * (f * (g * g + 4 * h) + h * (12 * p + 4 * h)),
            j = -2 * b * (4 * p * h + (1 - 4 * f + 3 * f * f) * (1 + l) + h * (14 * f - 6 - c + (8 * f - 8 - 2 * c) * l) + p * (12 * f - 8 + (10 * f - 10 - c) * l)),
            O = Object(i.B)(d);u -= e = (o * (v + h - 1) + 2 * O - r * (4 * v + c)) / (o * (2 * s * l + 2 * b * (1 + l)) + j / O - 8 * b * (o * (-1 + h + v) + 2 * O) * (1 + l) / (c + 4 * v));
      } while (e > i.k && --a > 0);return [Object(i.x)(t) * (Object(i.B)(o * o + 4) + o) * i.s / 4, i.o * u];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(127.16);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return a;
    });var r = e(0),
        o = e(1),
        i = e(22),
        c = 4 * o.s + 3 * Object(o.B)(3),
        u = 2 * Object(o.B)(2 * o.s * Object(o.B)(3) / c),
        a = Object(i.b)(u * Object(o.B)(3) / o.s, u, c / 6);n.a = function () {
      return Object(r.geoProjection)(a).scale(176.84);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [t * Object(i.B)(1 - 3 * n * n / (i.s * i.s)), n];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      return [t / Object(i.B)(1 - 3 * n * n / (i.s * i.s)), n];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(152.63);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = .90631 * Object(i.y)(n),
          r = Object(i.B)(1 - e * e),
          o = Object(i.B)(2 / (1 + r * Object(i.h)(t /= 3)));return [2.66723 * r * o * Object(i.y)(t), 1.24104 * e * o];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = t / 2.66723,
          r = n / 1.24104,
          o = Object(i.B)(e * e + r * r),
          c = 2 * Object(i.e)(o / 2);return [3 * Object(i.g)(t * Object(i.F)(c), 2.66723 * o), o && Object(i.e)(n * Object(i.y)(c) / (1.24104 * .90631 * o))];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(172.632);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.h)(n),
          r = Object(i.h)(t) * e,
          o = 1 - r,
          c = Object(i.h)(t = Object(i.g)(Object(i.y)(t) * e, -Object(i.y)(n))),
          u = Object(i.y)(t);return e = Object(i.B)(1 - r * r), [u * e - c * o, -c * e - u * o];
    }n.b = r;var o = e(0),
        i = e(1);r.invert = function (t, n) {
      var e = (t * t + n * n) / -2,
          r = Object(i.B)(-e * (2 + e)),
          o = n * e + t * r,
          c = t * e - n * r,
          u = Object(i.B)(c * c + o * o);return [Object(i.g)(r * o, u * (1 + e)), u ? -Object(i.e)(r * c / u) : 0];
    }, n.a = function () {
      return Object(o.geoProjection)(r).rotate([0, -90, 45]).scale(124.75).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(i.a)(t, n);return [(e[0] + t / c.o) / 2, (e[1] + n) / 2];
    }n.b = r;var o = e(0),
        i = e(171),
        c = e(1);r.invert = function (t, n) {
      var e = t,
          r = n,
          o = 25;do {
        var i,
            u = Object(c.h)(r),
            a = Object(c.y)(r),
            f = Object(c.y)(2 * r),
            s = a * a,
            l = u * u,
            h = Object(c.y)(e),
            p = Object(c.h)(e / 2),
            b = Object(c.y)(e / 2),
            v = b * b,
            g = 1 - l * p * p,
            d = g ? Object(c.b)(u * p) * Object(c.B)(i = 1 / g) : i = 0,
            j = .5 * (2 * d * u * b + e / c.o) - t,
            O = .5 * (d * a + r) - n,
            y = .5 * i * (l * v + d * u * p * s) + .5 / c.o,
            m = i * (h * f / 4 - d * a * b),
            x = .125 * i * (f * b - d * a * l * h),
            _ = .5 * i * (s * p + d * v * u) + .5,
            w = m * x - _ * y,
            E = (O * m - j * _) / w,
            M = (j * x - O * y) / w;e -= E, r -= M;
      } while ((Object(c.a)(E) > c.k || Object(c.a)(M) > c.k) && --o > 0);return [e, r];
    }, n.a = function () {
      return Object(o.geoProjection)(r).scale(158.837);
    };
  }, function (t, n) {
    t.exports = function () {
      this.__data__ = [], this.size = 0;
    };
  }, function (t, n, e) {
    var r = e(63),
        o = Array.prototype.splice;t.exports = function (t) {
      var n = this.__data__,
          e = r(n, t);return !(e < 0 || (e == n.length - 1 ? n.pop() : o.call(n, e, 1), --this.size, 0));
    };
  }, function (t, n, e) {
    var r = e(63);t.exports = function (t) {
      var n = this.__data__,
          e = r(n, t);return e < 0 ? void 0 : n[e][1];
    };
  }, function (t, n, e) {
    var r = e(63);t.exports = function (t) {
      return r(this.__data__, t) > -1;
    };
  }, function (t, n, e) {
    var r = e(63);t.exports = function (t, n) {
      var e = this.__data__,
          o = r(e, t);return o < 0 ? (++this.size, e.push([t, n])) : e[o][1] = n, this;
    };
  }, function (t, n, e) {
    var r = e(62);t.exports = function () {
      this.__data__ = new r(), this.size = 0;
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = this.__data__,
          e = n.delete(t);return this.size = n.size, e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return this.__data__.get(t);
    };
  }, function (t, n) {
    t.exports = function (t) {
      return this.__data__.has(t);
    };
  }, function (t, n, e) {
    var r = e(62),
        o = e(97),
        i = e(98),
        c = 200;t.exports = function (t, n) {
      var e = this.__data__;if (e instanceof r) {
        var u = e.__data__;if (!o || u.length < c - 1) return u.push([t, n]), this.size = ++e.size, this;e = this.__data__ = new i(u);
      }return e.set(t, n), this.size = e.size, this;
    };
  }, function (t, n, e) {
    var r = e(426),
        o = e(62),
        i = e(97);t.exports = function () {
      this.size = 0, this.__data__ = { hash: new r(), map: new (i || o)(), string: new r() };
    };
  }, function (t, n, e) {
    function r(t) {
      var n = -1,
          e = null == t ? 0 : t.length;for (this.clear(); ++n < e;) {
        var r = t[n];this.set(r[0], r[1]);
      }
    }var o = e(427),
        i = e(428),
        c = e(429),
        u = e(430),
        a = e(431);r.prototype.clear = o, r.prototype.delete = i, r.prototype.get = c, r.prototype.has = u, r.prototype.set = a, t.exports = r;
  }, function (t, n, e) {
    var r = e(64);t.exports = function () {
      this.__data__ = r ? r(null) : {}, this.size = 0;
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = this.has(t) && delete this.__data__[t];return this.size -= n ? 1 : 0, n;
    };
  }, function (t, n, e) {
    var r = e(64),
        o = "__lodash_hash_undefined__",
        i = Object.prototype.hasOwnProperty;t.exports = function (t) {
      var n = this.__data__;if (r) {
        var e = n[t];return e === o ? void 0 : e;
      }return i.call(n, t) ? n[t] : void 0;
    };
  }, function (t, n, e) {
    var r = e(64),
        o = Object.prototype.hasOwnProperty;t.exports = function (t) {
      var n = this.__data__;return r ? void 0 !== n[t] : o.call(n, t);
    };
  }, function (t, n, e) {
    var r = e(64),
        o = "__lodash_hash_undefined__";t.exports = function (t, n) {
      var e = this.__data__;return this.size += this.has(t) ? 0 : 1, e[t] = r && void 0 === n ? o : n, this;
    };
  }, function (t, n, e) {
    var r = e(65);t.exports = function (t) {
      var n = r(this, t).delete(t);return this.size -= n ? 1 : 0, n;
    };
  }, function (t, n) {
    var e = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };t.exports = function (t) {
      var n = void 0 === t ? "undefined" : e(t);return "string" == n || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== t : null === t;
    };
  }, function (t, n, e) {
    var r = e(65);t.exports = function (t) {
      return r(this, t).get(t);
    };
  }, function (t, n, e) {
    var r = e(65);t.exports = function (t) {
      return r(this, t).has(t);
    };
  }, function (t, n, e) {
    var r = e(65);t.exports = function (t, n) {
      var e = r(this, t),
          o = e.size;return e.set(t, n), this.size += e.size == o ? 0 : 1, this;
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      for (var e = -1, r = null == t ? 0 : t.length; ++e < r && !1 !== n(t[e], e, t);) {}return t;
    };
  }, function (t, n, e) {
    var r = e(36),
        o = e(10);t.exports = function (t, n) {
      return t && r(n, o(n), t);
    };
  }, function (t, n, e) {
    var r = e(36),
        o = e(99);t.exports = function (t, n) {
      return t && r(n, o(n), t);
    };
  }, function (t, n, e) {
    var r = e(12),
        o = e(57),
        i = e(441),
        c = Object.prototype.hasOwnProperty;t.exports = function (t) {
      if (!r(t)) return i(t);var n = o(t),
          e = [];for (var u in t) {
        ("constructor" != u || !n && c.call(t, u)) && e.push(u);
      }return e;
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = [];if (null != t) for (var e in Object(t)) {
        n.push(e);
      }return n;
    };
  }, function (t, n, e) {
    (function (t) {
      var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
        return typeof t === "undefined" ? "undefined" : _typeof(t);
      } : function (t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
      },
          o = e(13),
          i = "object" == r(n) && n && !n.nodeType && n,
          c = i && "object" == r(t) && t && !t.nodeType && t,
          u = c && c.exports === i ? o.Buffer : void 0,
          a = u ? u.allocUnsafe : void 0;t.exports = function (t, n) {
        if (n) return t.slice();var e = t.length,
            r = a ? a(e) : new t.constructor(e);return t.copy(r), r;
      };
    }).call(n, e(83)(t));
  }, function (t, n) {
    t.exports = function (t, n) {
      var e = -1,
          r = t.length;for (n || (n = Array(r)); ++e < r;) {
        n[e] = t[e];
      }return n;
    };
  }, function (t, n, e) {
    var r = e(36),
        o = e(100);t.exports = function (t, n) {
      return r(t, o(t), n);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      for (var e = -1, r = null == t ? 0 : t.length, o = 0, i = []; ++e < r;) {
        var c = t[e];n(c, e, t) && (i[o++] = c);
      }return i;
    };
  }, function (t, n, e) {
    var r = e(36),
        o = e(185);t.exports = function (t, n) {
      return r(t, o(t), n);
    };
  }, function (t, n, e) {
    var r = e(187),
        o = e(185),
        i = e(99);t.exports = function (t) {
      return r(t, i, o);
    };
  }, function (t, n, e) {
    var r = e(24)(e(13), "DataView");t.exports = r;
  }, function (t, n, e) {
    var r = e(24)(e(13), "Promise");t.exports = r;
  }, function (t, n, e) {
    var r = e(24)(e(13), "WeakMap");t.exports = r;
  }, function (t, n) {
    var e = Object.prototype.hasOwnProperty;t.exports = function (t) {
      var n = t.length,
          r = t.constructor(n);return n && "string" == typeof t[0] && e.call(t, "index") && (r.index = t.index, r.input = t.input), r;
    };
  }, function (t, n, e) {
    var r = e(103),
        o = e(453),
        i = e(454),
        c = e(456),
        u = e(457),
        a = e(459),
        f = e(460),
        s = "[object Boolean]",
        l = "[object Date]",
        h = "[object Map]",
        p = "[object Number]",
        b = "[object RegExp]",
        v = "[object Set]",
        g = "[object String]",
        d = "[object Symbol]",
        j = "[object ArrayBuffer]",
        O = "[object DataView]",
        y = "[object Float32Array]",
        m = "[object Float64Array]",
        x = "[object Int8Array]",
        _ = "[object Int16Array]",
        w = "[object Int32Array]",
        E = "[object Uint8Array]",
        M = "[object Uint8ClampedArray]",
        S = "[object Uint16Array]",
        T = "[object Uint32Array]";t.exports = function (t, n, e, P) {
      var k = t.constructor;switch (n) {case j:
          return r(t);case s:case l:
          return new k(+t);case O:
          return o(t, P);case y:case m:case x:case _:case w:case E:case M:case S:case T:
          return f(t, P);case h:
          return i(t, P, e);case p:case g:
          return new k(t);case b:
          return c(t);case v:
          return u(t, P, e);case d:
          return a(t);}
    };
  }, function (t, n, e) {
    var r = e(103);t.exports = function (t, n) {
      var e = n ? r(t.buffer) : t.buffer;return new t.constructor(e, t.byteOffset, t.byteLength);
    };
  }, function (t, n, e) {
    var r = e(455),
        o = e(191),
        i = e(192),
        c = 1;t.exports = function (t, n, e) {
      var u = n ? e(i(t), c) : i(t);return o(u, r, new t.constructor());
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      return t.set(n[0], n[1]), t;
    };
  }, function (t, n) {
    var e = /\w*$/;t.exports = function (t) {
      var n = new t.constructor(t.source, e.exec(t));return n.lastIndex = t.lastIndex, n;
    };
  }, function (t, n, e) {
    var r = e(458),
        o = e(191),
        i = e(66),
        c = 1;t.exports = function (t, n, e) {
      var u = n ? e(i(t), c) : i(t);return o(u, r, new t.constructor());
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      return t.add(n), t;
    };
  }, function (t, n, e) {
    var r = e(32),
        o = r ? r.prototype : void 0,
        i = o ? o.valueOf : void 0;t.exports = function (t) {
      return i ? Object(i.call(t)) : {};
    };
  }, function (t, n, e) {
    var r = e(103);t.exports = function (t, n) {
      var e = n ? r(t.buffer) : t.buffer;return new t.constructor(e, t.byteOffset, t.length);
    };
  }, function (t, n, e) {
    var r = e(462),
        o = e(102),
        i = e(57);t.exports = function (t) {
      return "function" != typeof t.constructor || i(t) ? {} : r(o(t));
    };
  }, function (t, n, e) {
    var r = e(12),
        o = Object.create,
        i = function () {
      function t() {}return function (n) {
        if (!r(n)) return {};if (o) return o(n);t.prototype = n;var e = new t();return t.prototype = void 0, e;
      };
    }();t.exports = i;
  }, function (t, n, e) {
    var r = e(464)(e(482));t.exports = r;
  }, function (t, n, e) {
    var r = e(67),
        o = e(20),
        i = e(10);t.exports = function (t) {
      return function (n, e, c) {
        var u = Object(n);if (!o(n)) {
          var a = r(e, 3);n = i(n), e = function e(t) {
            return a(u[t], t, u);
          };
        }var f = t(n, e, c);return f > -1 ? u[a ? n[f] : f] : void 0;
      };
    };
  }, function (t, n, e) {
    var r = e(193),
        o = e(196),
        i = e(198);t.exports = function (t) {
      var n = o(t);return 1 == n.length && n[0][2] ? i(n[0][0], n[0][1]) : function (e) {
        return e === t || r(e, t, n);
      };
    };
  }, function (t, n, e) {
    var r = e(96),
        o = e(195),
        i = e(470),
        c = e(471),
        u = e(188),
        a = e(8),
        f = e(82),
        s = e(143),
        l = 1,
        h = "[object Arguments]",
        p = "[object Array]",
        b = "[object Object]",
        v = Object.prototype.hasOwnProperty;t.exports = function (t, n, e, g, d, j) {
      var O = a(t),
          y = a(n),
          m = O ? p : u(t),
          x = y ? p : u(n),
          _ = (m = m == h ? b : m) == b,
          w = (x = x == h ? b : x) == b,
          E = m == x;if (E && f(t)) {
        if (!f(n)) return !1;O = !0, _ = !1;
      }if (E && !_) return j || (j = new r()), O || s(t) ? o(t, n, e, g, d, j) : i(t, n, m, e, g, d, j);if (!(e & l)) {
        var M = _ && v.call(t, "__wrapped__"),
            S = w && v.call(n, "__wrapped__");if (M || S) {
          var T = M ? t.value() : t,
              P = S ? n.value() : n;return j || (j = new r()), d(T, P, e, g, j);
        }
      }return !!E && (j || (j = new r()), c(t, n, e, g, d, j));
    };
  }, function (t, n) {
    var e = "__lodash_hash_undefined__";t.exports = function (t) {
      return this.__data__.set(t, e), this;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return this.__data__.has(t);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      for (var e = -1, r = null == t ? 0 : t.length; ++e < r;) {
        if (n(t[e], e, t)) return !0;
      }return !1;
    };
  }, function (t, n, e) {
    var r = e(32),
        o = e(190),
        i = e(55),
        c = e(195),
        u = e(192),
        a = e(66),
        f = 1,
        s = 2,
        l = "[object Boolean]",
        h = "[object Date]",
        p = "[object Error]",
        b = "[object Map]",
        v = "[object Number]",
        g = "[object RegExp]",
        d = "[object Set]",
        j = "[object String]",
        O = "[object Symbol]",
        y = "[object ArrayBuffer]",
        m = "[object DataView]",
        x = r ? r.prototype : void 0,
        _ = x ? x.valueOf : void 0;t.exports = function (t, n, e, r, x, w, E) {
      switch (e) {case m:
          if (t.byteLength != n.byteLength || t.byteOffset != n.byteOffset) return !1;t = t.buffer, n = n.buffer;case y:
          return !(t.byteLength != n.byteLength || !w(new o(t), new o(n)));case l:case h:case v:
          return i(+t, +n);case p:
          return t.name == n.name && t.message == n.message;case g:case j:
          return t == n + "";case b:
          var M = u;case d:
          var S = r & f;if (M || (M = a), t.size != n.size && !S) return !1;var T = E.get(t);if (T) return T == n;r |= s, E.set(t, n);var P = c(M(t), M(n), r, x, w, E);return E.delete(t), P;case O:
          if (_) return _.call(t) == _.call(n);}return !1;
    };
  }, function (t, n, e) {
    var r = e(186),
        o = 1,
        i = Object.prototype.hasOwnProperty;t.exports = function (t, n, e, c, u, a) {
      var f = e & o,
          s = r(t),
          l = s.length;if (l != r(n).length && !f) return !1;for (var h = l; h--;) {
        var p = s[h];if (!(f ? p in n : i.call(n, p))) return !1;
      }var b = a.get(t);if (b && a.get(n)) return b == n;var v = !0;a.set(t, n), a.set(n, t);for (var g = f; ++h < l;) {
        var d = t[p = s[h]],
            j = n[p];if (c) var O = f ? c(j, d, p, n, t, a) : c(d, j, p, t, n, a);if (!(void 0 === O ? d === j || u(d, j, e, c, a) : O)) {
          v = !1;break;
        }g || (g = "constructor" == p);
      }if (v && !g) {
        var y = t.constructor,
            m = n.constructor;y != m && "constructor" in t && "constructor" in n && !("function" == typeof y && y instanceof y && "function" == typeof m && m instanceof m) && (v = !1);
      }return a.delete(t), a.delete(n), v;
    };
  }, function (t, n, e) {
    var r = e(194),
        o = e(473),
        i = e(200),
        c = e(107),
        u = e(197),
        a = e(198),
        f = e(44),
        s = 1,
        l = 2;t.exports = function (t, n) {
      return c(t) && u(n) ? a(f(t), n) : function (e) {
        var c = o(e, t);return void 0 === c && c === n ? i(e, t) : r(n, c, s | l);
      };
    };
  }, function (t, n, e) {
    var r = e(106);t.exports = function (t, n, e) {
      var o = null == t ? void 0 : r(t, n);return void 0 === o ? e : o;
    };
  }, function (t, n, e) {
    var r = /^\./,
        o = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
        i = /\\(\\)?/g,
        c = e(475)(function (t) {
      var n = [];return r.test(t) && n.push(""), t.replace(o, function (t, e, r, o) {
        n.push(r ? o.replace(i, "$1") : e || t);
      }), n;
    });t.exports = c;
  }, function (t, n, e) {
    var r = e(476),
        o = 500;t.exports = function (t) {
      var n = r(t, function (t) {
        return e.size === o && e.clear(), t;
      }),
          e = n.cache;return n;
    };
  }, function (t, n, e) {
    function r(t, n) {
      if ("function" != typeof t || null != n && "function" != typeof n) throw new TypeError(i);var e = function e() {
        var r = arguments,
            o = n ? n.apply(this, r) : r[0],
            i = e.cache;if (i.has(o)) return i.get(o);var c = t.apply(this, r);return e.cache = i.set(o, c) || i, c;
      };return e.cache = new (r.Cache || o)(), e;
    }var o = e(98),
        i = "Expected a function";r.Cache = o, t.exports = r;
  }, function (t, n, e) {
    function r(t) {
      if ("string" == typeof t) return t;if (c(t)) return i(t, r) + "";if (u(t)) return s ? s.call(t) : "";var n = t + "";return "0" == n && 1 / t == -a ? "-0" : n;
    }var o = e(32),
        i = e(69),
        c = e(8),
        u = e(43),
        a = 1 / 0,
        f = o ? o.prototype : void 0,
        s = f ? f.toString : void 0;t.exports = r;
  }, function (t, n) {
    t.exports = function (t, n) {
      return null != t && n in Object(t);
    };
  }, function (t, n, e) {
    var r = e(480),
        o = e(481),
        i = e(107),
        c = e(44);t.exports = function (t) {
      return i(t) ? r(c(t)) : o(t);
    };
  }, function (t, n) {
    t.exports = function (t) {
      return function (n) {
        return null == n ? void 0 : n[t];
      };
    };
  }, function (t, n, e) {
    var r = e(106);t.exports = function (t) {
      return function (n) {
        return r(n, t);
      };
    };
  }, function (t, n, e) {
    var r = e(202),
        o = e(67),
        i = e(483),
        c = Math.max;t.exports = function (t, n, e) {
      var u = null == t ? 0 : t.length;if (!u) return -1;var a = null == e ? 0 : i(e);return a < 0 && (a = c(u + a, 0)), r(t, o(n, 3), a);
    };
  }, function (t, n, e) {
    var r = e(484);t.exports = function (t) {
      var n = r(t),
          e = n % 1;return n == n ? e ? n - e : n : 0;
    };
  }, function (t, n, e) {
    var r = e(485),
        o = 1 / 0,
        i = 1.7976931348623157e308;t.exports = function (t) {
      if (!t) return 0 === t ? t : 0;if ((t = r(t)) === o || t === -o) return (t < 0 ? -1 : 1) * i;return t == t ? t : 0;
    };
  }, function (t, n, e) {
    var r = e(12),
        o = e(43),
        i = NaN,
        c = /^\s+|\s+$/g,
        u = /^[-+]0x[0-9a-f]+$/i,
        a = /^0b[01]+$/i,
        f = /^0o[0-7]+$/i,
        s = parseInt;t.exports = function (t) {
      if ("number" == typeof t) return t;if (o(t)) return i;if (r(t)) {
        var n = "function" == typeof t.valueOf ? t.valueOf() : t;t = r(n) ? n + "" : n;
      }if ("string" != typeof t) return 0 === t ? t : +t;t = t.replace(c, "");var e = a.test(t);return e || f.test(t) ? s(t.slice(2), e ? 2 : 8) : u.test(t) ? i : +t;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return function (n, e, r) {
        for (var o = -1, i = Object(n), c = r(n), u = c.length; u--;) {
          var a = c[t ? u : ++o];if (!1 === e(i[a], a, i)) break;
        }return n;
      };
    };
  }, function (t, n, e) {
    var r = e(37);t.exports = function (t) {
      return "function" == typeof t ? t : r;
    };
  }, function (t, n, e) {
    var r = e(193),
        o = e(196);t.exports = function (t, n) {
      return t === n || r(t, n, o(n));
    };
  }, function (t, n, e) {
    var r = e(490),
        o = e(200);t.exports = function (t, n) {
      return r(t, n, function (n, e) {
        return o(t, e);
      });
    };
  }, function (t, n, e) {
    var r = e(106),
        o = e(491),
        i = e(68);t.exports = function (t, n, e) {
      for (var c = -1, u = n.length, a = {}; ++c < u;) {
        var f = n[c],
            s = r(t, f);e(s, f) && o(a, i(f, t), s);
      }return a;
    };
  }, function (t, n, e) {
    var r = e(54),
        o = e(68),
        i = e(56),
        c = e(12),
        u = e(44);t.exports = function (t, n, e, a) {
      if (!c(t)) return t;for (var f = -1, s = (n = o(n, t)).length, l = s - 1, h = t; null != h && ++f < s;) {
        var p = u(n[f]),
            b = e;if (f != l) {
          var v = h[p];void 0 === (b = a ? a(v, p, h) : void 0) && (b = c(v) ? v : i(n[f + 1]) ? [] : {});
        }r(h, p, b), h = h[p];
      }return t;
    };
  }, function (t, n, e) {
    var r = e(493),
        o = e(139),
        i = e(140);t.exports = function (t) {
      return i(o(t, void 0, r), t + "");
    };
  }, function (t, n, e) {
    var r = e(71);t.exports = function (t) {
      return (null == t ? 0 : t.length) ? r(t, 1) : [];
    };
  }, function (t, n, e) {
    var r = e(32),
        o = e(81),
        i = e(8),
        c = r ? r.isConcatSpreadable : void 0;t.exports = function (t) {
      return i(t) || o(t) || !!(c && t && t[c]);
    };
  }, function (t, n, e) {
    var r = e(183),
        o = 1,
        i = 4;t.exports = function (t) {
      return r(t, o | i);
    };
  }, function (t, n, e) {
    var r,
        o,
        i,
        c = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };!function (u, a) {
      "object" === c(n) && void 0 !== t ? a(n, e(205), e(29)) : (o = [n, e(205), e(29)], r = a, void 0 !== (i = "function" == typeof r ? r.apply(n, o) : r) && (t.exports = i));
    }(0, function (t, n, e) {
      "use strict";
      function r() {}function o(t, e, r) {
        var o = e[1][0] - e[0][0],
            i = e[1][1] - e[0][1],
            c = t.clipExtent && t.clipExtent();t.scale(150).translate([0, 0]), null != c && t.clipExtent(null), n.geoStream(r, t.stream(l));var u = l.result(),
            a = Math.min(o / (u[1][0] - u[0][0]), i / (u[1][1] - u[0][1])),
            f = +e[0][0] + (o - a * (u[1][0] + u[0][0])) / 2,
            s = +e[0][1] + (i - a * (u[1][1] + u[0][1])) / 2;return null != c && t.clipExtent(c), t.scale(150 * a).translate([f, s]);
      }function i(t, n, e) {
        return o(t, [[0, 0], n], e);
      }var c = 1e-6,
          u = 1 / 0,
          a = u,
          f = -u,
          s = f,
          l = { point: function point(t, n) {
          t < u && (u = t), t > f && (f = t), n < a && (a = n), n > s && (s = n);
        }, lineStart: r, lineEnd: r, polygonStart: r, polygonEnd: r, result: function result() {
          var t = [[u, a], [f, s]];return f = s = -(a = u = 1 / 0), t;
        } };t.geoAlbersUsa = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return h = null, f.point(n, e), h || (s.point(n, e), h) || (l.point(n, e), h);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p = n.geoAlbers(),
            b = n.geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
            v = n.geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
            g = { point: function point(t, n) {
            h = [t, n];
          } };return t.invert = function (t) {
          var n = p.scale(),
              e = p.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= .12 && o < .234 && r >= -.425 && r < -.214 ? b : o >= .166 && o < .234 && r >= -.214 && r < -.115 ? v : p).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([p.stream(a = t), b.stream(t), v.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (p.precision(t), b.precision(t), v.precision(t), r()) : p.precision();
        }, t.scale = function (n) {
          return arguments.length ? (p.scale(n), b.scale(.35 * n), v.scale(n), t.translate(p.translate())) : p.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return p.translate();var n = p.scale(),
              e = +t[0],
              o = +t[1];return f = p.translate(t).clipExtent([[e - .455 * n, o - .238 * n], [e + .455 * n, o + .238 * n]]).stream(g), s = b.translate([e - .307 * n, o + .201 * n]).clipExtent([[e - .425 * n + c, o + .12 * n + c], [e - .214 * n - c, o + .234 * n - c]]).stream(g), l = v.translate([e - .205 * n, o + .212 * n]).clipExtent([[e - .214 * n + c, o + .166 * n + c], [e - .115 * n - c, o + .234 * n - c]]).stream(g), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = p([-102.91, 26.3]),
              e = p([-104, 27.5]),
              r = p([-108, 29.1]),
              o = p([-110, 29.1]),
              i = p([-110, 26.7]),
              c = p([-112.8, 27.6]),
              u = p([-114.3, 30.6]),
              a = p([-119.3, 30.1]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.moveTo(i[0], i[1]), t.lineTo(c[0], c[1]), t.lineTo(u[0], u[1]), t.lineTo(a[0], a[1]);
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(1070);
      }, t.geoAlbersUsaTerritories = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return v = null, f.point(n, e), v || (s.point(n, e), v) || (l.point(n, e), v) || (h.point(n, e), v) || (p.point(n, e), v) || (b.point(n, e), v);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p,
            b,
            v,
            g = n.geoAlbers(),
            d = n.geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
            j = n.geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
            O = n.geoConicEqualArea().rotate([66, 0]).center([0, 18]).parallels([8, 18]),
            y = n.geoEquirectangular().rotate([173, 14]),
            m = n.geoEquirectangular().rotate([-145, -16.8]),
            x = { point: function point(t, n) {
            v = [t, n];
          } };return t.invert = function (t) {
          var n = g.scale(),
              e = g.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= .12 && o < .234 && r >= -.425 && r < -.214 ? d : o >= .166 && o < .234 && r >= -.214 && r < -.115 ? j : o >= .2064 && o < .2413 && r >= .312 && r < .385 ? O : o >= .09 && o < .1197 && r >= -.4243 && r < -.3232 ? y : o >= -.0518 && o < .0895 && r >= -.4243 && r < -.3824 ? m : g).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([g.stream(a = t), d.stream(t), j.stream(t), O.stream(t), y.stream(t), m.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (g.precision(t), d.precision(t), j.precision(t), O.precision(t), y.precision(t), m.precision(t), r()) : g.precision();
        }, t.scale = function (n) {
          return arguments.length ? (g.scale(n), d.scale(.35 * n), j.scale(n), O.scale(n), y.scale(2 * n), m.scale(n), t.translate(g.translate())) : g.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return g.translate();var n = g.scale(),
              e = +t[0],
              o = +t[1];return f = g.translate(t).clipExtent([[e - .455 * n, o - .238 * n], [e + .455 * n, o + .238 * n]]).stream(x), s = d.translate([e - .307 * n, o + .201 * n]).clipExtent([[e - .425 * n + c, o + .12 * n + c], [e - .214 * n - c, o + .233 * n - c]]).stream(x), l = j.translate([e - .205 * n, o + .212 * n]).clipExtent([[e - .214 * n + c, o + .166 * n + c], [e - .115 * n - c, o + .233 * n - c]]).stream(x), h = O.translate([e + .35 * n, o + .224 * n]).clipExtent([[e + .312 * n + c, o + .2064 * n + c], [e + .385 * n - c, o + .233 * n - c]]).stream(x), p = y.translate([e - .492 * n, o + .09 * n]).clipExtent([[e - .4243 * n + c, o + .0903 * n + c], [e - .3233 * n - c, o + .1197 * n - c]]).stream(x), b = m.translate([e - .408 * n, o + .018 * n]).clipExtent([[e - .4244 * n + c, o - .0519 * n + c], [e - .3824 * n - c, o + .0895 * n - c]]).stream(x), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = g([-110.4641, 28.2805]),
              e = g([-104.0597, 28.9528]),
              r = g([-103.7049, 25.1031]),
              o = g([-109.8337, 24.4531]),
              i = g([-124.4745, 28.1407]),
              c = g([-110.931, 30.8844]),
              u = g([-109.8337, 24.4531]),
              a = g([-122.4628, 21.8562]),
              f = g([-76.8579, 25.1544]),
              s = g([-72.429, 24.2097]),
              l = g([-72.8265, 22.7056]),
              h = g([-77.1852, 23.6392]),
              p = g([-125.0093, 29.7791]),
              b = g([-118.5193, 31.3262]),
              v = g([-118.064, 29.6912]),
              d = g([-124.4369, 28.169]),
              j = g([-128.1314, 37.4582]),
              O = g([-125.2132, 38.214]),
              y = g([-122.3616, 30.5115]),
              m = g([-125.0315, 29.8211]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), t.moveTo(i[0], i[1]), t.lineTo(c[0], c[1]), t.lineTo(u[0], u[1]), t.lineTo(u[0], u[1]), t.lineTo(a[0], a[1]), t.closePath(), t.moveTo(f[0], f[1]), t.lineTo(s[0], s[1]), t.lineTo(l[0], l[1]), t.lineTo(l[0], l[1]), t.lineTo(h[0], h[1]), t.closePath(), t.moveTo(p[0], p[1]), t.lineTo(b[0], b[1]), t.lineTo(v[0], v[1]), t.lineTo(v[0], v[1]), t.lineTo(d[0], d[1]), t.closePath(), t.moveTo(j[0], j[1]), t.lineTo(O[0], O[1]), t.lineTo(y[0], y[1]), t.lineTo(y[0], y[1]), t.lineTo(m[0], m[1]), t.closePath();
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(1070);
      }, t.geoConicConformalSpain = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return l = null, f.point(n, e), l || (s.point(n, e), l);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h = n.geoConicConformal().rotate([5, -38.6]).parallels([0, 60]),
            p = n.geoConicConformal().rotate([5, -38.6]).parallels([0, 60]),
            b = { point: function point(t, n) {
            l = [t, n];
          } };return t.invert = function (t) {
          var n = h.scale(),
              e = h.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= .05346 && o < .0897 && r >= -.13388 && r < -.0322 ? p : h).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([h.stream(a = t), p.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (h.precision(t), p.precision(t), r()) : h.precision();
        }, t.scale = function (n) {
          return arguments.length ? (h.scale(n), p.scale(n), t.translate(h.translate())) : h.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return h.translate();var n = h.scale(),
              e = +t[0],
              o = +t[1];return f = h.translate(t).clipExtent([[e - .06857 * n, o - .1288 * n], [e + .13249 * n, o + .06 * n]]).stream(b), s = p.translate([e + .1 * n, o - .094 * n]).clipExtent([[e - .1331 * n + c, o + .053457 * n + c], [e - .0354 * n - c, o + .08969 * n - c]]).stream(b), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = h([-14.034675, 34.965007]),
              e = h([-7.4208899, 35.536988]),
              r = h([-7.3148275, 33.54359]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]);
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(2700);
      }, t.geoConicConformalPortugal = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return h = null, f.point(n, e), h || (s.point(n, e), h) || (l.point(n, e), h);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p = n.geoConicConformal().rotate([10, -39.3]).parallels([0, 60]),
            b = n.geoConicConformal().rotate([17, -32.7]).parallels([0, 60]),
            v = n.geoConicConformal().rotate([27.8, -38.6]).parallels([0, 60]),
            g = { point: function point(t, n) {
            h = [t, n];
          } };return t.invert = function (t) {
          var n = p.scale(),
              e = p.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= .0093 && o < .03678 && r >= -.03875 && r < -.0116 ? b : o >= -.0412 && o < .0091 && r >= -.07782 && r < -.01166 ? v : p).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([p.stream(a = t), b.stream(t), v.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (p.precision(t), b.precision(t), v.precision(t), r()) : p.precision();
        }, t.scale = function (n) {
          return arguments.length ? (p.scale(n), b.scale(n), v.scale(.6 * n), t.translate(p.translate())) : p.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return p.translate();var n = p.scale(),
              e = +t[0],
              o = +t[1];return f = p.translate(t).clipExtent([[e - .0115 * n, o - .1138 * n], [e + .2105 * n, o + .0673 * n]]).stream(g), s = b.translate([e - .0265 * n, o + .025 * n]).clipExtent([[e - .0388 * n + c, o + .0093 * n + c], [e - .0116 * n - c, o + .0368 * n - c]]).stream(g), l = v.translate([e - .045 * n, o + -.02 * n]).clipExtent([[e - .0778 * n + c, o - .0413 * n + c], [e - .0117 * n - c, o + .0091 * n - c]]).stream(g), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = p([-12.8351, 38.7113]),
              e = p([-10.8482, 38.7633]),
              r = p([-10.8181, 37.2072]),
              o = p([-12.7345, 37.1573]),
              i = p([-16.0753, 41.4436]),
              c = p([-10.9168, 41.6861]),
              u = p([-10.8557, 38.7747]),
              a = p([-15.6728, 38.5505]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), t.moveTo(i[0], i[1]), t.lineTo(c[0], c[1]), t.lineTo(u[0], u[1]), t.lineTo(u[0], u[1]), t.lineTo(a[0], a[1]), t.closePath();
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(4200);
      }, t.geoMercatorEcuador = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return l = null, f.point(n, e), l || (s.point(n, e), l);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h = n.geoMercator().rotate([80, 1.5]),
            p = n.geoMercator().rotate([90.73, 1]),
            b = { point: function point(t, n) {
            l = [t, n];
          } };return t.invert = function (t) {
          var n = h.scale(),
              e = h.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= -.0676 && o < -.026 && r >= -.0857 && r < -.0263 ? p : h).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([h.stream(a = t), p.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (h.precision(t), p.precision(t), r()) : h.precision();
        }, t.scale = function (n) {
          return arguments.length ? (h.scale(n), p.scale(n), t.translate(h.translate())) : h.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return h.translate();var n = h.scale(),
              e = +t[0],
              o = +t[1];return f = h.translate(t).clipExtent([[e - .0262 * n, o - .0734 * n], [e + .1741 * n, o + .079 * n]]).stream(b), s = p.translate([e - .06 * n, o - .04 * n]).clipExtent([[e - .0857 * n + c, o - .0676 * n + c], [e - .0263 * n - c, o - .026 * n - c]]).stream(b), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = h([-84.9032, 2.3757]),
              e = h([-81.5047, 2.3708]),
              r = h([-81.5063, -.01]),
              o = h([-84.9086, -.005]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath();
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(3500);
      }, t.geoTransverseMercatorChile = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return p = null, f.point(n, e), p || (s.point(n, e), p) || (l.point(n, e), p) || (h.point(n, e), p);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p,
            b = n.geoTransverseMercator().rotate([72, 37]),
            v = n.geoStereographic().rotate([72, 0]),
            g = n.geoMercator().rotate([80, 33.5]),
            d = n.geoMercator().rotate([110, 25]),
            j = { point: function point(t, n) {
            p = [t, n];
          } };return t.invert = function (t) {
          var n = b.scale(),
              e = b.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= .2582 && o < .32 && r >= -.1036 && r < -.087 ? v : o >= -.01298 && o < .0133 && r >= -.11396 && r < -.05944 ? g : o >= .01539 && o < .03911 && r >= -.089 && r < -.0588 ? d : b).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([b.stream(a = t), v.stream(t), g.stream(t), d.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (b.precision(t), v.precision(t), g.precision(t), d.precision(t), r()) : b.precision();
        }, t.scale = function (n) {
          return arguments.length ? (b.scale(n), v.scale(.15 * n), g.scale(1.5 * n), d.scale(1.5 * n), t.translate(b.translate())) : b.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return b.translate();var n = b.scale(),
              e = +t[0],
              o = +t[1];return f = b.translate(t).clipExtent([[e - .059 * n, o - .3835 * n], [e + .4498 * n, o + .3375 * n]]).stream(j), s = v.translate([e - .087 * n, o + .17 * n]).clipExtent([[e - .1166 * n + c, o + .2582 * n + c], [e - .06 * n - c, o + .32 * n - c]]).stream(j), l = g.translate([e - .092 * n, o - 0 * n]).clipExtent([[e - .114 * n + c, o - .013 * n + c], [e - .0594 * n - c, o + .0133 * n - c]]).stream(j), h = d.translate([e - .089 * n, o - .0265 * n]).clipExtent([[e - .089 * n + c, o + .0154 * n + c], [e - .0588 * n - c, o + .0391 * n - c]]).stream(j), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = b([-82.6999, -51.3043]),
              e = b([-77.5442, -51.6631]),
              r = b([-78.0254, -55.186]),
              o = b([-83.6106, -54.7785]),
              i = b([-80.0638, -35.984]),
              c = b([-76.2153, -36.1811]),
              u = b([-76.2994, -37.6839]),
              a = b([-80.2231, -37.4757]),
              f = b([-78.442, -37.706]),
              s = b([-76.263, -37.8054]),
              l = b([-76.344, -39.1595]),
              h = b([-78.5638, -39.0559]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), t.moveTo(i[0], i[1]), t.lineTo(c[0], c[1]), t.lineTo(u[0], u[1]), t.lineTo(u[0], u[1]), t.lineTo(a[0], a[1]), t.closePath(), t.moveTo(f[0], f[1]), t.lineTo(s[0], s[1]), t.lineTo(l[0], l[1]), t.lineTo(l[0], l[1]), t.lineTo(h[0], h[1]), t.closePath();
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(700);
      }, t.geoConicEquidistantJapan = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return h = null, f.point(n, e), h || (s.point(n, e), h) || (l.point(n, e), h);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p = n.geoConicEquidistant().rotate([-136, -22]).parallels([40, 34]),
            b = n.geoConicEquidistant().rotate([-146, -26]).parallels([40, 34]),
            v = n.geoConicEquidistant().rotate([-126, -19]).parallels([40, 34]),
            g = { point: function point(t, n) {
            h = [t, n];
          } };return t.invert = function (t) {
          var n = p.scale(),
              e = p.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= -.10925 && o < -.02701 && r >= -.135 && r < -.0397 ? b : o >= .04713 && o < .11138 && r >= -.03986 && r < .051 ? v : p).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([p.stream(a = t), b.stream(t), v.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (p.precision(t), b.precision(t), v.precision(t), r()) : p.precision();
        }, t.scale = function (n) {
          return arguments.length ? (p.scale(n), b.scale(n), v.scale(.7 * n), t.translate(p.translate())) : p.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return p.translate();var n = p.scale(),
              e = +t[0],
              o = +t[1];return f = p.translate(t).clipExtent([[e - .1352 * n, o - .1091 * n], [e + .117 * n, o + .098 * n]]).stream(g), s = b.translate([e - .0425 * n, o - .005 * n]).clipExtent([[e - .135 * n + c, o - .1093 * n + c], [e - .0397 * n - c, o - .027 * n - c]]).stream(g), l = v.translate(t).clipExtent([[e - .0399 * n + c, o + .0471 * n + c], [e + .051 * n - c, o + .1114 * n - c]]).stream(g), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = p([126.01320483689143, 41.621090310215585]),
              e = p([133.04304387025903, 42.15087523707186]),
              r = p([133.3021766080688, 37.43975444725098]),
              o = p([126.87889168628224, 36.95488945159779]),
              i = p([132.9, 29.8]),
              c = p([134, 33]),
              u = p([139.3, 33.2]),
              a = p([139.16, 30.5]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), t.moveTo(i[0], i[1]), t.lineTo(c[0], c[1]), t.lineTo(u[0], u[1]), t.lineTo(a[0], a[1]);
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(2200);
      }, t.geoConicConformalFrance = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return m = null, f.point(n, e), m || (s.point(n, e), m) || (l.point(n, e), m) || (h.point(n, e), m) || (p.point(n, e), m) || (b.point(n, e), m) || (v.point(n, e), m) || (g.point(n, e), m) || (d.point(n, e), m) || (j.point(n, e), m) || (O.point(n, e), m) || (y.point(n, e), m);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p,
            b,
            v,
            g,
            d,
            j,
            O,
            y,
            m,
            x = n.geoConicConformal().rotate([-3, -46.2]).parallels([0, 60]),
            _ = n.geoMercator().center([-53.2, 3.9]),
            w = n.geoMercator().center([-61.03, 14.67]),
            E = n.geoMercator().center([-61.46, 16.14]),
            M = n.geoMercator().center([-62.85, 17.92]),
            S = n.geoMercator().center([-56.23, 46.93]),
            T = n.geoMercator().center([45.16, -12.8]),
            P = n.geoMercator().center([55.52, -21.13]),
            k = n.geoMercator().center([165.8, -21.07]),
            A = n.geoMercator().center([-178.1, -14.3]),
            C = n.geoMercator().center([-150.55, -17.11]),
            B = n.geoMercator().center([-150.55, -17.11]),
            R = { point: function point(t, n) {
            m = [t, n];
          } };return t.invert = function (t) {
          var n = x.scale(),
              e = x.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= .029 && o < .0864 && r >= -.14 && r < -.0996 ? _ : o >= 0 && o < .029 && r >= -.14 && r < -.0996 ? w : o >= -.032 && o < 0 && r >= -.14 && r < -.0996 ? E : o >= -.052 && o < -.032 && r >= -.14 && r < -.0996 ? M : o >= -.076 && o < .052 && r >= -.14 && r < -.0996 ? S : o >= -.076 && o < -.052 && r >= .0967 && r < .1371 ? T : o >= -.052 && o < -.02 && r >= .0967 && r < .1371 ? P : o >= -.02 && o < .012 && r >= .0967 && r < .1371 ? k : o >= .012 && o < .033 && r >= .0967 && r < .1371 ? A : o >= .033 && o < .0864 && r >= .0967 && r < .1371 ? C : x).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([x.stream(a = t), _.stream(t), w.stream(t), E.stream(t), M.stream(t), S.stream(t), T.stream(t), P.stream(t), k.stream(t), A.stream(t), C.stream(t), B.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (x.precision(t), _.precision(t), w.precision(t), E.precision(t), M.precision(t), S.precision(t), T.precision(t), P.precision(t), k.precision(t), A.precision(t), C.precision(t), B.precision(t), r()) : x.precision();
        }, t.scale = function (n) {
          return arguments.length ? (x.scale(n), _.scale(.6 * n), w.scale(1.6 * n), E.scale(1.4 * n), M.scale(5 * n), S.scale(1.3 * n), T.scale(1.6 * n), P.scale(1.2 * n), k.scale(.3 * n), A.scale(2.7 * n), C.scale(.5 * n), B.scale(.06 * n), t.translate(x.translate())) : x.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return x.translate();var n = x.scale(),
              e = +t[0],
              o = +t[1];return f = x.translate(t).clipExtent([[e - .0996 * n, o - .0908 * n], [e + .0967 * n, o + .0864 * n]]).stream(R), s = _.translate([e - .12 * n, o + .0575 * n]).clipExtent([[e - .14 * n + c, o + .029 * n + c], [e - .0996 * n - c, o + .0864 * n - c]]).stream(R), l = w.translate([e - .12 * n, o + .013 * n]).clipExtent([[e - .14 * n + c, o + 0 * n + c], [e - .0996 * n - c, o + .029 * n - c]]).stream(R), h = E.translate([e - .12 * n, o - .014 * n]).clipExtent([[e - .14 * n + c, o - .032 * n + c], [e - .0996 * n - c, o + 0 * n - c]]).stream(R), p = M.translate([e - .12 * n, o - .044 * n]).clipExtent([[e - .14 * n + c, o - .052 * n + c], [e - .0996 * n - c, o - .032 * n - c]]).stream(R), b = S.translate([e - .12 * n, o - .065 * n]).clipExtent([[e - .14 * n + c, o - .076 * n + c], [e - .0996 * n - c, o - .052 * n - c]]).stream(R), v = T.translate([e + .117 * n, o - .064 * n]).clipExtent([[e + .0967 * n + c, o - .076 * n + c], [e + .1371 * n - c, o - .052 * n - c]]).stream(R), g = P.translate([e + .116 * n, o - .0355 * n]).clipExtent([[e + .0967 * n + c, o - .052 * n + c], [e + .1371 * n - c, o - .02 * n - c]]).stream(R), d = k.translate([e + .116 * n, o - .0048 * n]).clipExtent([[e + .0967 * n + c, o - .02 * n + c], [e + .1371 * n - c, o + .012 * n - c]]).stream(R), j = A.translate([e + .116 * n, o + .022 * n]).clipExtent([[e + .0967 * n + c, o + .012 * n + c], [e + .1371 * n - c, o + .033 * n - c]]).stream(R), y = B.translate([e + .11 * n, o + .045 * n]).clipExtent([[e + .0967 * n + c, o + .033 * n + c], [e + .1371 * n - c, o + .06 * n - c]]).stream(R), O = C.translate([e + .115 * n, o + .075 * n]).clipExtent([[e + .0967 * n + c, o + .06 * n + c], [e + .1371 * n - c, o + .0864 * n - c]]).stream(R), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n, e, r, o;n = x([-7.938886725111036, 43.7219460918835]), e = x([-4.832080896458295, 44.12930268549372]), r = x([-4.205299743793263, 40.98096346967365]), o = x([-7.071796453126152, 40.610037319181444]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([-8.42751373617692, 45.32889452553031]), e = x([-5.18599305777107, 45.7566442062976]), r = x([-4.832080905154431, 44.129302726751426]), o = x([-7.938886737126192, 43.72194613263854]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([-9.012656899657046, 47.127733821030176]), e = x([-5.6105244772793155, 47.579777861410626]), r = x([-5.185993067168585, 45.756644248170346]), o = x([-8.427513749141811, 45.32889456686326]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([-9.405747558985553, 48.26506375557457]), e = x([-5.896175018439575, 48.733352850851624]), r = x([-5.610524487556043, 47.57977790393761]), o = x([-9.012656913808351, 47.127733862971255]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([-9.908436061346974, 49.642448789505856]), e = x([-6.262026716233124, 50.131426841787174]), r = x([-5.896175029331232, 48.73335289377258]), o = x([-9.40574757396393, 48.26506379787767]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([11.996907706504462, 50.16039028163579]), e = x([15.649907879773343, 49.68279246765253]), r = x([15.156712840526632, 48.30371557625831]), o = x([11.64122661754411, 48.761078240546816]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([11.641226606955788, 48.7610781975889]), e = x([15.156712825832164, 48.30371553390465]), r = x([14.549932166241172, 46.4866532486199]), o = x([11.204443787952183, 46.91899233914248]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([11.204443778297161, 46.918992296823646]), e = x([14.549932152815039, 46.486653206856396]), r = x([13.994409796764009, 44.695833444323256]), o = x([10.805306599253848, 45.105133870684924]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([10.805306590412085, 45.10513382903308]), e = x([13.99440978444733, 44.695833403183606]), r = x([13.654633799024392, 43.53552468558152]), o = x([10.561516803980956, 43.930671459798624]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([10.561516795617383, 43.93067141859757]), e = x([13.654633787361952, 43.5355246448671]), r = x([12.867691604239901, 40.640701985019405]), o = x([9.997809515987688, 41.00288343254471]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([10.8, 42.4]), e = x([12.8, 42.13]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]);
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(2700);
      }, t.geoConicConformalEurope = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return m = null, f.point(n, e), m || (l.point(n, e), m) || (d.point(n, e), m) || (s.point(n, e), m) || (g.point(n, e), m) || (v.point(n, e), m) || (j.point(n, e), m) || (O.point(n, e), m) || (y.point(n, e), m) || (h.point(n, e), m) || (p.point(n, e), m) || (b.point(n, e), m);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p,
            b,
            v,
            g,
            d,
            j,
            O,
            y,
            m,
            x = n.geoConicConformal().rotate([-10, -53]).parallels([0, 60]),
            _ = n.geoMercator().center([-61.46, 16.14]),
            w = n.geoMercator().center([-53.2, 3.9]),
            E = n.geoConicConformal().rotate([27.8, -38.9]).parallels([0, 60]),
            M = n.geoConicConformal().rotate([25.43, -37.398]).parallels([0, 60]),
            S = n.geoConicConformal().rotate([31.17, -39.539]).parallels([0, 60]),
            T = n.geoConicConformal().rotate([17, -32.7]).parallels([0, 60]),
            P = n.geoConicConformal().rotate([16, -28.5]).parallels([0, 60]),
            k = n.geoMercator().center([-61.03, 14.67]),
            A = n.geoMercator().center([45.16, -12.8]),
            C = n.geoMercator().center([55.52, -21.13]),
            B = n.geoConicConformal().rotate([-14.4, -35.95]).parallels([0, 60]),
            R = { point: function point(t, n) {
            m = [t, n];
          } };return t.invert = function (t) {
          var n = x.scale(),
              e = x.translate(),
              r = (t[0] - (e[0] + .08 * n)) / n,
              o = (t[1] - e[1]) / n;return (o >= -.31 && o < -.24 && r >= .14 && r < .24 ? _ : o >= -.24 && o < -.17 && r >= .14 && r < .24 ? w : o >= -.17 && o < -.12 && r >= .21 && r < .24 ? M : o >= -.17 && o < -.14 && r >= .14 && r < .165 ? S : o >= -.17 && o < -.1 && r >= .14 && r < .24 ? E : o >= -.1 && o < -.03 && r >= .14 && r < .24 ? T : o >= -.03 && o < .04 && r >= .14 && r < .24 ? P : o >= -.31 && o < -.24 && r >= .24 && r < .34 ? k : o >= -.24 && o < -.17 && r >= .24 && r < .34 ? A : o >= -.17 && o < -.1 && r >= .24 && r < .34 ? C : o >= -.1 && o < -.03 && r >= .24 && r < .34 ? B : x).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([x.stream(a = t), w.stream(t), k.stream(t), _.stream(t), P.stream(t), T.stream(t), A.stream(t), C.stream(t), B.stream(t), E.stream(t), M.stream(t), S.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (x.precision(t), w.precision(t), k.precision(t), _.precision(t), P.precision(t), T.precision(t), A.precision(t), C.precision(t), B.precision(t), E.precision(t), M.precision(t), S.precision(t), r()) : x.precision();
        }, t.scale = function (n) {
          return arguments.length ? (x.scale(n), _.scale(3 * n), w.scale(.8 * n), k.scale(3.5 * n), C.scale(2.7 * n), E.scale(2 * n), M.scale(2 * n), S.scale(2 * n), T.scale(3 * n), P.scale(n), A.scale(5.5 * n), B.scale(6 * n), t.translate(x.translate())) : x.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return x.translate();var n = x.scale(),
              e = +t[0],
              o = +t[1];return f = x.translate([e - .08 * n, o]).clipExtent([[e - .51 * n, o - .33 * n], [e + .5 * n, o + .33 * n]]).stream(R), s = _.translate([e + .19 * n, o - .275 * n]).clipExtent([[e + .14 * n + c, o - .31 * n + c], [e + .24 * n - c, o - .24 * n - c]]).stream(R), l = w.translate([e + .19 * n, o - .205 * n]).clipExtent([[e + .14 * n + c, o - .24 * n + c], [e + .24 * n - c, o - .17 * n - c]]).stream(R), h = E.translate([e + .19 * n, o - .135 * n]).clipExtent([[e + .14 * n + c, o - .17 * n + c], [e + .24 * n - c, o - .1 * n - c]]).stream(R), p = M.translate([e + .225 * n, o - .147 * n]).clipExtent([[e + .21 * n + c, o - .17 * n + c], [e + .24 * n - c, o - .12 * n - c]]).stream(R), b = S.translate([e + .153 * n, o - .15 * n]).clipExtent([[e + .14 * n + c, o - .17 * n + c], [e + .165 * n - c, o - .14 * n - c]]).stream(R), v = T.translate([e + .19 * n, o - .065 * n]).clipExtent([[e + .14 * n + c, o - .1 * n + c], [e + .24 * n - c, o - .03 * n - c]]).stream(R), g = P.translate([e + .19 * n, o + .005 * n]).clipExtent([[e + .14 * n + c, o - .03 * n + c], [e + .24 * n - c, o + .04 * n - c]]).stream(R), d = k.translate([e + .29 * n, o - .275 * n]).clipExtent([[e + .24 * n + c, o - .31 * n + c], [e + .34 * n - c, o - .24 * n - c]]).stream(R), j = A.translate([e + .29 * n, o - .205 * n]).clipExtent([[e + .24 * n + c, o - .24 * n + c], [e + .34 * n - c, o - .17 * n - c]]).stream(R), O = C.translate([e + .29 * n, o - .135 * n]).clipExtent([[e + .24 * n + c, o - .17 * n + c], [e + .34 * n - c, o - .1 * n - c]]).stream(R), y = B.translate([e + .29 * n, o - .065 * n]).clipExtent([[e + .24 * n + c, o - .1 * n + c], [e + .34 * n - c, o - .03 * n - c]]).stream(R), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n, e, r, o;n = x([42.45755610828648, 63.343658547914934]), e = x([52.65837266667029, 59.35045080290929]), r = x([47.19754502247785, 56.12653496548117]), o = x([37.673034273363044, 59.61638268506111]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([59.41110754003403, 62.35069727399336]), e = x([66.75050228640794, 57.11797303636038]), r = x([60.236065725110436, 54.63331433818992]), o = x([52.65837313153311, 59.350450804599355]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([48.81091130080243, 66.93353402634641]), e = x([59.41110730654679, 62.35069740653086]), r = x([52.6583728974441, 59.3504509222445]), o = x([42.45755631675751, 63.34365868805821]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([31.054198418446475, 52.1080673766184]), e = x([39.09869284884117, 49.400700047190554]), r = x([36.0580811499175, 46.02944174908498]), o = x([28.690508588835726, 48.433126979386415]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([33.977877745912025, 55.849945501331]), e = x([42.75328432167726, 52.78455122462353]), r = x([39.09869297540224, 49.400700176148625]), o = x([31.05419851807008, 52.10806751810923]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([52.658372900759296, 59.35045068526415]), e = x([60.23606549583304, 54.63331423800264]), r = x([54.6756370953122, 51.892298789399455]), o = x([47.19754524788189, 56.126534861222794]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([47.19754506082455, 56.126534735591456]), e = x([54.675636900123514, 51.892298681337095]), r = x([49.94448648951486, 48.98775484983285]), o = x([42.75328468716108, 52.78455126060818]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([42.75328453416769, 52.78455113209101]), e = x([49.94448632339758, 48.98775473706457]), r = x([45.912339990394315, 45.99361784987003]), o = x([39.09869317356607, 49.40070009378711]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([37.673034114296634, 59.61638254183119]), e = x([47.197544835420544, 56.126534839849846]), r = x([42.75328447467064, 52.78455135314068]), o = x([33.977877870363905, 55.849945644671145]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([44.56748486446032, 57.26489367845818]), r = x([43.9335791193588, 53.746540942601726]), o = x([43, 56]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = x([37.673034114296634, 59.61638254183119]), e = x([40.25902691953466, 58.83002044222639]), r = x([38.458270492742024, 57.26232178028002]), o = x([35.97754948030156, 58.00266637992386]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath();
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(750);
      }, t.geoMercatorMalaysia = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return l = null, f.point(n, e), l || (s.point(n, e), l);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h = n.geoMercator().center([105.25, 4]),
            p = n.geoMercator().center([118.65, 2.86]),
            b = { point: function point(t, n) {
            l = [t, n];
          } };return t.invert = function (t) {
          var n = h.scale(),
              e = h.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= -.0521 && o < .0229 && r >= -.0111 && r < .1 ? p : h).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([h.stream(a = t), p.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (h.precision(t), p.precision(t), r()) : h.precision();
        }, t.scale = function (n) {
          return arguments.length ? (h.scale(n), p.scale(.615 * n), t.translate(h.translate())) : h.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return h.translate();var n = h.scale(),
              e = +t[0],
              o = +t[1];return f = h.translate(t).clipExtent([[e - .11 * n, o - .0521 * n], [e - .0111 * n, o + .0521 * n]]).stream(b), s = p.translate([e + .09 * n, o - 0 * n]).clipExtent([[e - .0111 * n + c, o - .0521 * n + c], [e + .1 * n - c, o + .024 * n - c]]).stream(b), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n = h([106.3214, 2.0228]),
              e = h([105.1843, 2.3761]),
              r = h([104.2151, 3.3618]),
              o = h([104.215, 4.5651]);t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]);
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(4800);
      }, t.geoMercatorEquatorialGuinea = function () {
        function t(t) {
          var n = t[0],
              e = t[1];return h = null, f.point(n, e), h || (s.point(n, e), h) || (l.point(n, e), h);
        }function r() {
          return u = a = null, t;
        }var u,
            a,
            f,
            s,
            l,
            h,
            p = n.geoMercator().rotate([-9.5, -1.5]),
            b = n.geoMercator().rotate([-8.6, -3.5]),
            v = n.geoMercator().rotate([-5.6, 1.45]),
            g = { point: function point(t, n) {
            h = [t, n];
          } };return t.invert = function (t) {
          var n = p.scale(),
              e = p.translate(),
              r = (t[0] - e[0]) / n,
              o = (t[1] - e[1]) / n;return (o >= -.02 && o < 0 && r >= -.038 && r < -.005 ? b : o >= 0 && o < .02 && r >= -.038 && r < -.005 ? v : p).invert(t);
        }, t.stream = function (t) {
          return u && a === t ? u : u = function (t) {
            var n = t.length;return { point: function point(e, r) {
                for (var o = -1; ++o < n;) {
                  t[o].point(e, r);
                }
              }, sphere: function sphere() {
                for (var e = -1; ++e < n;) {
                  t[e].sphere();
                }
              }, lineStart: function lineStart() {
                for (var e = -1; ++e < n;) {
                  t[e].lineStart();
                }
              }, lineEnd: function lineEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].lineEnd();
                }
              }, polygonStart: function polygonStart() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonStart();
                }
              }, polygonEnd: function polygonEnd() {
                for (var e = -1; ++e < n;) {
                  t[e].polygonEnd();
                }
              } };
          }([p.stream(a = t), b.stream(t), v.stream(t)]);
        }, t.precision = function (t) {
          return arguments.length ? (p.precision(t), b.precision(t), v.precision(t), r()) : p.precision();
        }, t.scale = function (n) {
          return arguments.length ? (p.scale(n), b.scale(1.5 * n), v.scale(4 * n), t.translate(p.translate())) : p.scale();
        }, t.translate = function (t) {
          if (!arguments.length) return p.translate();var n = p.scale(),
              e = +t[0],
              o = +t[1];return f = p.translate(t).clipExtent([[e - .005 * n, o - .02 * n], [e + .038 * n, o + .02 * n]]).stream(g), s = b.translate([e - .025 * n, o - .01 * n]).clipExtent([[e - .038 * n + c, o - .02 * n + c], [e - .005 * n - c, o + 0 * n - c]]).stream(g), l = v.translate([e - .025 * n, o + .01 * n]).clipExtent([[e - .038 * n + c, o - 0 * n + c], [e - .005 * n - c, o + .02 * n - c]]).stream(g), r();
        }, t.fitExtent = function (n, e) {
          return o(t, n, e);
        }, t.fitSize = function (n, e) {
          return i(t, n, e);
        }, t.drawCompositionBorders = function (t) {
          var n, e, r, o;n = p([9.21327272751682, 2.645820439454123]), e = p([11.679126293239872, 2.644755519268689]), r = p([11.676845389029227, .35307824637606433]), o = p([9.213572917774014, .35414205204417754]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = p([7.320873711543669, 2.64475551449975]), e = p([9.213272722738658, 2.645820434679803]), r = p([9.213422896480349, 1.4999812505283054]), o = p([7.322014760520787, 1.4989168878985566]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath(), n = p([7.3220147605302905, 1.4989168783492766]), e = p([9.213422896481598, 1.499981240979021]), r = p([9.213572912999604, .354142056817247]), o = p([7.323154615739809, .353078251154504]), t.moveTo(n[0], n[1]), t.lineTo(e[0], e[1]), t.lineTo(r[0], r[1]), t.lineTo(o[0], o[1]), t.closePath();
        }, t.getCompositionBorders = function () {
          var t = e.path();return this.drawCompositionBorders(t), t.toString();
        }, t.scale(12e3);
      }, Object.defineProperty(t, "__esModule", { value: !0 });
    });
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      m.push(x = [p = t, v = t]), n < b && (b = n), n > g && (g = n);
    }function o(t, n) {
      var e = Object(E.a)([t * M.r, n * M.r]);if (y) {
        var o = Object(E.c)(y, e),
            i = [o[1], -o[0], 0],
            c = Object(E.c)(i, o);Object(E.e)(c), c = Object(E.g)(c);var u,
            a = t - d,
            f = a > 0 ? 1 : -1,
            l = c[0] * M.h * f,
            h = Object(M.a)(a) > 180;h ^ (f * d < l && l < f * t) ? (u = c[1] * M.h) > g && (g = u) : (l = (l + 360) % 360 - 180, h ^ (f * d < l && l < f * t) ? (u = -c[1] * M.h) < b && (b = u) : (n < b && (b = n), n > g && (g = n))), h ? t < d ? s(p, t) > s(p, v) && (v = t) : s(t, v) > s(p, v) && (p = t) : v >= p ? (t < p && (p = t), t > v && (v = t)) : t > d ? s(p, t) > s(p, v) && (v = t) : s(t, v) > s(p, v) && (p = t);
      } else r(t, n);y = e, d = t;
    }function i() {
      P.point = o;
    }function c() {
      x[0] = p, x[1] = v, P.point = r, y = null;
    }function u(t, n) {
      if (y) {
        var e = t - d;T.add(Object(M.a)(e) > 180 ? e + (e > 0 ? 360 : -360) : e);
      } else j = t, O = n;w.b.point(t, n), o(t, n);
    }function a() {
      w.b.lineStart();
    }function f() {
      u(j, O), w.b.lineEnd(), Object(M.a)(T) > M.i && (p = -(v = 180)), x[0] = p, x[1] = v, y = null;
    }function s(t, n) {
      return (n -= t) < 0 ? n + 360 : n;
    }function l(t, n) {
      return t[0] - n[0];
    }function h(t, n) {
      return t[0] <= t[1] ? t[0] <= n && n <= t[1] : n < t[0] || t[1] < n;
    }var p,
        b,
        v,
        g,
        d,
        j,
        O,
        y,
        m,
        x,
        _ = e(45),
        w = e(206),
        E = e(46),
        M = e(4),
        S = e(28),
        T = Object(_.a)(),
        P = { point: r, lineStart: i, lineEnd: c, polygonStart: function polygonStart() {
        P.point = u, P.lineStart = a, P.lineEnd = f, T.reset(), w.b.polygonStart();
      }, polygonEnd: function polygonEnd() {
        w.b.polygonEnd(), P.point = r, P.lineStart = i, P.lineEnd = c, w.a < 0 ? (p = -(v = 180), b = -(g = 90)) : T > M.i ? g = 90 : T < -M.i && (b = -90), x[0] = p, x[1] = v;
      } };n.a = function (t) {
      var n, e, r, o, i, c, u;if (g = v = -(p = b = 1 / 0), m = [], Object(S.a)(t, P), e = m.length) {
        for (m.sort(l), n = 1, i = [r = m[0]]; n < e; ++n) {
          h(r, (o = m[n])[0]) || h(r, o[1]) ? (s(r[0], o[1]) > s(r[0], r[1]) && (r[1] = o[1]), s(o[0], r[1]) > s(r[0], r[1]) && (r[0] = o[0])) : i.push(r = o);
        }for (c = -1 / 0, n = 0, r = i[e = i.length - 1]; n <= e; r = o, ++n) {
          o = i[n], (u = s(r[1], o[0])) > c && (c = u, p = o[0], v = r[1]);
        }
      }return m = x = null, p === 1 / 0 || b === 1 / 0 ? [[NaN, NaN], [NaN, NaN]] : [[p, b], [v, g]];
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n);o(e * Object(P.g)(t), e * Object(P.t)(t), Object(P.t)(n));
    }function o(t, n, e) {
      v += (t - v) / ++p, g += (n - g) / p, d += (e - d) / p;
    }function i() {
      C.point = c;
    }function c(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n);M = e * Object(P.g)(t), S = e * Object(P.t)(t), T = Object(P.t)(n), C.point = u, o(M, S, T);
    }function u(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n),
          r = e * Object(P.g)(t),
          i = e * Object(P.t)(t),
          c = Object(P.t)(n),
          u = Object(P.e)(Object(P.u)((u = S * c - T * i) * u + (u = T * r - M * c) * u + (u = M * i - S * r) * u), M * r + S * i + T * c);b += u, j += u * (M + (M = r)), O += u * (S + (S = i)), y += u * (T + (T = c)), o(M, S, T);
    }function a() {
      C.point = r;
    }function f() {
      C.point = l;
    }function s() {
      h(w, E), C.point = r;
    }function l(t, n) {
      w = t, E = n, t *= P.r, n *= P.r, C.point = h;var e = Object(P.g)(n);M = e * Object(P.g)(t), S = e * Object(P.t)(t), T = Object(P.t)(n), o(M, S, T);
    }function h(t, n) {
      t *= P.r, n *= P.r;var e = Object(P.g)(n),
          r = e * Object(P.g)(t),
          i = e * Object(P.t)(t),
          c = Object(P.t)(n),
          u = S * c - T * i,
          a = T * r - M * c,
          f = M * i - S * r,
          s = Object(P.u)(u * u + a * a + f * f),
          l = M * r + S * i + T * c,
          h = s && -Object(P.b)(l) / s,
          p = Object(P.e)(s, l);m += h * u, x += h * a, _ += h * f, b += p, j += p * (M + (M = r)), O += p * (S + (S = i)), y += p * (T + (T = c)), o(M, S, T);
    }var p,
        b,
        v,
        g,
        d,
        j,
        O,
        y,
        m,
        x,
        _,
        w,
        E,
        M,
        S,
        T,
        P = e(4),
        k = e(27),
        A = e(28),
        C = { sphere: k.a, point: r, lineStart: i, lineEnd: a, polygonStart: function polygonStart() {
        C.lineStart = f, C.lineEnd = s;
      }, polygonEnd: function polygonEnd() {
        C.lineStart = i, C.lineEnd = a;
      } };n.a = function (t) {
      p = b = v = g = d = j = O = y = m = x = _ = 0, Object(A.a)(t, C);var n = m,
          e = x,
          r = _,
          o = n * n + e * e + r * r;return o < P.j && (n = j, e = O, r = y, b < P.i && (n = v, e = g, r = d), (o = n * n + e * e + r * r) < P.j) ? [NaN, NaN] : [Object(P.e)(e, n) * P.h, Object(P.c)(r / Object(P.u)(o)) * P.h];
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e, r, o, i) {
      var c,
          u = t[0],
          a = t[1],
          f = 0,
          s = 1,
          l = n[0] - u,
          h = n[1] - a;if (c = e - u, l || !(c > 0)) {
        if (c /= l, l < 0) {
          if (c < f) return;c < s && (s = c);
        } else if (l > 0) {
          if (c > s) return;c > f && (f = c);
        }if (c = o - u, l || !(c < 0)) {
          if (c /= l, l < 0) {
            if (c > s) return;c > f && (f = c);
          } else if (l > 0) {
            if (c < f) return;c < s && (s = c);
          }if (c = r - a, h || !(c > 0)) {
            if (c /= h, h < 0) {
              if (c < f) return;c < s && (s = c);
            } else if (h > 0) {
              if (c > s) return;c > f && (f = c);
            }if (c = i - a, h || !(c < 0)) {
              if (c /= h, h < 0) {
                if (c > s) return;c > f && (f = c);
              } else if (h > 0) {
                if (c < f) return;c < s && (s = c);
              }return f > 0 && (t[0] = u + f * l, t[1] = a + f * h), s < 1 && (n[0] = u + s * l, n[1] = a + s * h), !0;
            }
          }
        }
      }
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(213),
        o = [null, null],
        i = { type: "LineString", coordinates: o };n.a = function (t, n) {
      return o[0] = t, o[1] = n, Object(r.a)(i);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r = Object(i.d)(t, n - c.i, e).concat(n);return function (t) {
        return r.map(function (n) {
          return [t, n];
        });
      };
    }function o(t, n, e) {
      var r = Object(i.d)(t, n - c.i, e).concat(n);return function (t) {
        return r.map(function (n) {
          return [n, t];
        });
      };
    }var i = e(14),
        c = e(4);n.a = function () {
      function t() {
        return { type: "MultiLineString", coordinates: n() };
      }function n() {
        return Object(i.d)(Object(c.f)(f / y) * y, a, y).map(g).concat(Object(i.d)(Object(c.f)(p / m) * m, h, m).map(d)).concat(Object(i.d)(Object(c.f)(u / j) * j, e, j).filter(function (t) {
          return Object(c.a)(t % y) > c.i;
        }).map(b)).concat(Object(i.d)(Object(c.f)(l / O) * O, s, O).filter(function (t) {
          return Object(c.a)(t % m) > c.i;
        }).map(v));
      }var e,
          u,
          a,
          f,
          s,
          l,
          h,
          p,
          b,
          v,
          g,
          d,
          j = 10,
          O = j,
          y = 90,
          m = 360,
          x = 2.5;return t.lines = function () {
        return n().map(function (t) {
          return { type: "LineString", coordinates: t };
        });
      }, t.outline = function () {
        return { type: "Polygon", coordinates: [g(f).concat(d(h).slice(1), g(a).reverse().slice(1), d(p).reverse().slice(1))] };
      }, t.extent = function (n) {
        return arguments.length ? t.extentMajor(n).extentMinor(n) : t.extentMinor();
      }, t.extentMajor = function (n) {
        return arguments.length ? (f = +n[0][0], a = +n[1][0], p = +n[0][1], h = +n[1][1], f > a && (n = f, f = a, a = n), p > h && (n = p, p = h, h = n), t.precision(x)) : [[f, p], [a, h]];
      }, t.extentMinor = function (n) {
        return arguments.length ? (u = +n[0][0], e = +n[1][0], l = +n[0][1], s = +n[1][1], u > e && (n = u, u = e, e = n), l > s && (n = l, l = s, s = n), t.precision(x)) : [[u, l], [e, s]];
      }, t.step = function (n) {
        return arguments.length ? t.stepMajor(n).stepMinor(n) : t.stepMinor();
      }, t.stepMajor = function (n) {
        return arguments.length ? (y = +n[0], m = +n[1], t) : [y, m];
      }, t.stepMinor = function (n) {
        return arguments.length ? (j = +n[0], O = +n[1], t) : [j, O];
      }, t.precision = function (n) {
        return arguments.length ? (x = +n, b = r(l, s, 90), v = o(u, e, x), g = r(p, h, 90), d = o(f, a, x), t) : x;
      }, t.extentMajor([[-180, -90 + c.i], [180, 90 - c.i]]).extentMinor([[-180, -80 - c.i], [180, 80 + c.i]]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(4);n.a = function (t, n) {
      var e = t[0] * r.r,
          o = t[1] * r.r,
          i = n[0] * r.r,
          c = n[1] * r.r,
          u = Object(r.g)(o),
          a = Object(r.t)(o),
          f = Object(r.g)(c),
          s = Object(r.t)(c),
          l = u * Object(r.g)(e),
          h = u * Object(r.t)(e),
          p = f * Object(r.g)(i),
          b = f * Object(r.t)(i),
          v = 2 * Object(r.c)(Object(r.u)(Object(r.m)(c - o) + u * f * Object(r.m)(i - e))),
          g = Object(r.t)(v),
          d = v ? function (t) {
        var n = Object(r.t)(t *= v) / g,
            e = Object(r.t)(v - t) / g,
            o = e * l + n * p,
            i = e * h + n * b,
            c = e * a + n * s;return [Object(r.e)(i, o) * r.h, Object(r.e)(c, Object(r.u)(o * o + i * i)) * r.h];
      } : function () {
        return [e * r.h, o * r.h];
      };return d.distance = v, d;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(214),
        o = e(28),
        i = e(505),
        c = e(215),
        u = e(506),
        a = e(507),
        f = e(508);n.a = function () {
      function t(t) {
        return t && ("function" == typeof h && l.pointRadius(+h.apply(this, arguments)), Object(o.a)(t, e(l))), l.result();
      }var n,
          e,
          s,
          l,
          h = 4.5;return t.area = function (t) {
        return Object(o.a)(t, e(i.a)), i.a.result();
      }, t.bounds = function (t) {
        return Object(o.a)(t, e(c.a)), c.a.result();
      }, t.centroid = function (t) {
        return Object(o.a)(t, e(u.a)), u.a.result();
      }, t.projection = function (o) {
        return arguments.length ? (e = null == (n = o) ? r.a : o.stream, t) : n;
      }, t.context = function (n) {
        return arguments.length ? (l = null == (s = n) ? new f.a() : new a.a(n), "function" != typeof h && l.pointRadius(h), t) : s;
      }, t.pointRadius = function (n) {
        return arguments.length ? (h = "function" == typeof n ? n : (l.pointRadius(+n), +n), t) : h;
      }, t.projection(null).context(null);
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      g.point = o;
    }function o(t, n) {
      g.point = i, u = f = t, a = s = n;
    }function i(t, n) {
      v.add(s * t - f * n), f = t, s = n;
    }function c() {
      i(u, a);
    }var u,
        a,
        f,
        s,
        l = e(45),
        h = e(4),
        p = e(27),
        b = Object(l.a)(),
        v = Object(l.a)(),
        g = { point: p.a, lineStart: p.a, lineEnd: p.a, polygonStart: function polygonStart() {
        g.lineStart = r, g.lineEnd = c;
      }, polygonEnd: function polygonEnd() {
        g.lineStart = g.lineEnd = g.point = p.a, b.add(Object(h.a)(v)), v.reset();
      }, result: function result() {
        var t = b / 2;return b.reset(), t;
      } };n.a = g;
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      d += t, j += n, ++O;
    }function o() {
      M.point = i;
    }function i(t, n) {
      M.point = c, r(b = t, v = n);
    }function c(t, n) {
      var e = t - b,
          o = n - v,
          i = Object(g.u)(e * e + o * o);y += i * (b + t) / 2, m += i * (v + n) / 2, x += i, r(b = t, v = n);
    }function u() {
      M.point = r;
    }function a() {
      M.point = s;
    }function f() {
      l(h, p);
    }function s(t, n) {
      M.point = l, r(h = b = t, p = v = n);
    }function l(t, n) {
      var e = t - b,
          o = n - v,
          i = Object(g.u)(e * e + o * o);y += i * (b + t) / 2, m += i * (v + n) / 2, x += i, _ += (i = v * t - b * n) * (b + t), w += i * (v + n), E += 3 * i, r(b = t, v = n);
    }var h,
        p,
        b,
        v,
        g = e(4),
        d = 0,
        j = 0,
        O = 0,
        y = 0,
        m = 0,
        x = 0,
        _ = 0,
        w = 0,
        E = 0,
        M = { point: r, lineStart: o, lineEnd: u, polygonStart: function polygonStart() {
        M.lineStart = a, M.lineEnd = f;
      }, polygonEnd: function polygonEnd() {
        M.point = r, M.lineStart = o, M.lineEnd = u;
      }, result: function result() {
        var t = E ? [_ / E, w / E] : x ? [y / x, m / x] : O ? [d / O, j / O] : [NaN, NaN];return d = j = O = y = m = x = _ = w = E = 0, t;
      } };n.a = M;
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }n.a = r;var o = e(4),
        i = e(27);r.prototype = { _radius: 4.5, pointRadius: function pointRadius(t) {
        return this._radius = t, this;
      }, polygonStart: function polygonStart() {
        this._line = 0;
      }, polygonEnd: function polygonEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._point = 0;
      }, lineEnd: function lineEnd() {
        0 === this._line && this._context.closePath(), this._point = NaN;
      }, point: function point(t, n) {
        switch (this._point) {case 0:
            this._context.moveTo(t, n), this._point = 1;break;case 1:
            this._context.lineTo(t, n);break;default:
            this._context.moveTo(t + this._radius, n), this._context.arc(t, n, this._radius, 0, o.w);}
      }, result: i.a };
  }, function (t, n, e) {
    "use strict";
    function r() {
      this._string = [];
    }function o(t) {
      return "m0," + t + "a" + t + "," + t + " 0 1,1 0," + -2 * t + "a" + t + "," + t + " 0 1,1 0," + 2 * t + "z";
    }n.a = r, r.prototype = { _circle: o(4.5), pointRadius: function pointRadius(t) {
        return this._circle = o(t), this;
      }, polygonStart: function polygonStart() {
        this._line = 0;
      }, polygonEnd: function polygonEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._point = 0;
      }, lineEnd: function lineEnd() {
        0 === this._line && this._string.push("Z"), this._point = NaN;
      }, point: function point(t, n) {
        switch (this._point) {case 0:
            this._string.push("M", t, ",", n), this._point = 1;break;case 1:
            this._string.push("L", t, ",", n);break;default:
            this._string.push("M", t, ",", n, this._circle);}
      }, result: function result() {
        if (this._string.length) {
          var t = this._string.join("");return this._string = [], t;
        }
      } };
  }, function (t, n, e) {
    "use strict";
    var r = e(217),
        o = e(4);n.a = Object(r.a)(function () {
      return !0;
    }, function (t) {
      var n,
          e = NaN,
          r = NaN,
          i = NaN;return { lineStart: function lineStart() {
          t.lineStart(), n = 1;
        }, point: function point(c, u) {
          var a = c > 0 ? o.o : -o.o,
              f = Object(o.a)(c - e);Object(o.a)(f - o.o) < o.i ? (t.point(e, r = (r + u) / 2 > 0 ? o.l : -o.l), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(a, r), t.point(c, r), n = 0) : i !== a && f >= o.o && (Object(o.a)(e - i) < o.i && (e -= i * o.i), Object(o.a)(c - a) < o.i && (c -= a * o.i), r = function (t, n, e, r) {
            var i,
                c,
                u = Object(o.t)(t - e);return Object(o.a)(u) > o.i ? Object(o.d)((Object(o.t)(n) * (c = Object(o.g)(r)) * Object(o.t)(e) - Object(o.t)(r) * (i = Object(o.g)(n)) * Object(o.t)(t)) / (i * c * u)) : (n + r) / 2;
          }(e, r, c, u), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(a, r), n = 0), t.point(e = c, r = u), i = a;
        }, lineEnd: function lineEnd() {
          t.lineEnd(), e = r = NaN;
        }, clean: function clean() {
          return 2 - n;
        } };
    }, function (t, n, e, r) {
      var i;if (null == t) i = e * o.l, r.point(-o.o, i), r.point(0, i), r.point(o.o, i), r.point(o.o, 0), r.point(o.o, -i), r.point(0, -i), r.point(-o.o, -i), r.point(-o.o, 0), r.point(-o.o, i);else if (Object(o.a)(t[0] - n[0]) > o.i) {
        var c = t[0] < n[0] ? o.o : -o.o;i = e * c / 2, r.point(-c, i), r.point(0, i), r.point(c, i);
      } else r.point(n[0], n[1]);
    }, [-o.o, -o.l]);
  }, function (t, n, e) {
    "use strict";
    var r = e(45),
        o = e(46),
        i = e(4),
        c = Object(r.a)();n.a = function (t, n) {
      var e = n[0],
          r = n[1],
          u = [Object(i.t)(e), -Object(i.g)(e), 0],
          a = 0,
          f = 0;c.reset();for (var s = 0, l = t.length; s < l; ++s) {
        if (p = (h = t[s]).length) for (var h, p, b = h[p - 1], v = b[0], g = b[1] / 2 + i.q, d = Object(i.t)(g), j = Object(i.g)(g), O = 0; O < p; ++O, v = m, d = _, j = w, b = y) {
          var y = h[O],
              m = y[0],
              x = y[1] / 2 + i.q,
              _ = Object(i.t)(x),
              w = Object(i.g)(x),
              E = m - v,
              M = E >= 0 ? 1 : -1,
              S = M * E,
              T = S > i.o,
              P = d * _;if (c.add(Object(i.e)(P * M * Object(i.t)(S), j * w + P * Object(i.g)(S))), a += T ? E + M * i.w : E, T ^ v >= e ^ m >= e) {
            var k = Object(o.c)(Object(o.a)(b), Object(o.a)(y));Object(o.e)(k);var A = Object(o.c)(u, k);Object(o.e)(A);var C = (T ^ E >= 0 ? -1 : 1) * Object(i.c)(A[2]);(r > C || r === C && (k[0] || k[1])) && (f += T ^ E >= 0 ? 1 : -1);
          }
        }
      }return (a < -i.i || a < i.i && c < -i.i) ^ 1 & f;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(46),
        o = e(207),
        i = e(4),
        c = e(212),
        u = e(217);n.a = function (t, n) {
      function e(t, n) {
        return Object(i.g)(t) * Object(i.g)(n) > s;
      }function a(t, n, e) {
        var o = Object(r.a)(t),
            c = Object(r.a)(n),
            u = [1, 0, 0],
            a = Object(r.c)(o, c),
            f = Object(r.d)(a, a),
            l = a[0],
            h = f - l * l;if (!h) return !e && t;var p = s * f / h,
            b = -s * l / h,
            v = Object(r.c)(u, a),
            g = Object(r.f)(u, p),
            d = Object(r.f)(a, b);Object(r.b)(g, d);var j = v,
            O = Object(r.d)(g, j),
            y = Object(r.d)(j, j),
            m = O * O - y * (Object(r.d)(g, g) - 1);if (!(m < 0)) {
          var x = Object(i.u)(m),
              _ = Object(r.f)(j, (-O - x) / y);if (Object(r.b)(_, g), _ = Object(r.g)(_), !e) return _;var w,
              E = t[0],
              M = n[0],
              S = t[1],
              T = n[1];M < E && (w = E, E = M, M = w);var P = M - E,
              k = Object(i.a)(P - i.o) < i.i,
              A = k || P < i.i;if (!k && T < S && (w = S, S = T, T = w), A ? k ? S + T > 0 ^ _[1] < (Object(i.a)(_[0] - E) < i.i ? S : T) : S <= _[1] && _[1] <= T : P > i.o ^ (E <= _[0] && _[0] <= M)) {
            var C = Object(r.f)(j, (-O + x) / y);return Object(r.b)(C, g), [_, Object(r.g)(C)];
          }
        }
      }function f(n, e) {
        var r = l ? t : i.o - t,
            o = 0;return n < -r ? o |= 1 : n > r && (o |= 2), e < -r ? o |= 4 : e > r && (o |= 8), o;
      }var s = Object(i.g)(t),
          l = s > 0,
          h = Object(i.a)(s) > i.i;return Object(u.a)(e, function (t) {
        var n, r, o, u, s;return { lineStart: function lineStart() {
            u = o = !1, s = 1;
          }, point: function point(p, b) {
            var v,
                g = [p, b],
                d = e(p, b),
                j = l ? d ? 0 : f(p, b) : d ? f(p + (p < 0 ? i.o : -i.o), b) : 0;if (!n && (u = o = d) && t.lineStart(), d !== o && (v = a(n, g), (Object(c.a)(n, v) || Object(c.a)(g, v)) && (g[0] += i.i, g[1] += i.i, d = e(g[0], g[1]))), d !== o) s = 0, d ? (t.lineStart(), v = a(g, n), t.point(v[0], v[1])) : (v = a(n, g), t.point(v[0], v[1]), t.lineEnd()), n = v;else if (h && n && l ^ d) {
              var O;j & r || !(O = a(g, n, !0)) || (s = 0, l ? (t.lineStart(), t.point(O[0][0], O[0][1]), t.point(O[1][0], O[1][1]), t.lineEnd()) : (t.point(O[1][0], O[1][1]), t.lineEnd(), t.lineStart(), t.point(O[0][0], O[0][1])));
            }!d || n && Object(c.a)(n, g) || t.point(g[0], g[1]), n = g, o = d, r = j;
          }, lineEnd: function lineEnd() {
            o && t.lineEnd(), n = null;
          }, clean: function clean() {
            return s | (u && o) << 1;
          } };
      }, function (e, r, i, c) {
        Object(o.a)(c, t, n, i, e, r);
      }, l ? [0, -t] : [-i.o, t - i.o]);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(46),
        o = e(4),
        i = e(112),
        c = 16,
        u = Object(o.g)(30 * o.r);n.a = function (t, n) {
      return +n ? function (t, n) {
        function e(r, i, c, a, f, s, l, h, p, b, v, g, d, j) {
          var O = l - r,
              y = h - i,
              m = O * O + y * y;if (m > 4 * n && d--) {
            var x = a + b,
                _ = f + v,
                w = s + g,
                E = Object(o.u)(x * x + _ * _ + w * w),
                M = Object(o.c)(w /= E),
                S = Object(o.a)(Object(o.a)(w) - 1) < o.i || Object(o.a)(c - p) < o.i ? (c + p) / 2 : Object(o.e)(_, x),
                T = t(S, M),
                P = T[0],
                k = T[1],
                A = P - r,
                C = k - i,
                B = y * A - O * C;(B * B / m > n || Object(o.a)((O * A + y * C) / m - .5) > .3 || a * b + f * v + s * g < u) && (e(r, i, c, a, f, s, P, k, S, x /= E, _ /= E, w, d, j), j.point(P, k), e(P, k, S, x, _, w, l, h, p, b, v, g, d, j));
          }
        }return function (n) {
          function o(e, r) {
            e = t(e, r), n.point(e[0], e[1]);
          }function i() {
            O = NaN, w.point = u, n.lineStart();
          }function u(o, i) {
            var u = Object(r.a)([o, i]),
                a = t(o, i);e(O, y, j, m, x, _, O = a[0], y = a[1], j = o, m = u[0], x = u[1], _ = u[2], c, n), n.point(O, y);
          }function a() {
            w.point = o, n.lineEnd();
          }function f() {
            i(), w.point = s, w.lineEnd = l;
          }function s(t, n) {
            u(h = t, n), p = O, b = y, v = m, g = x, d = _, w.point = u;
          }function l() {
            e(O, y, j, m, x, _, p, b, h, v, g, d, c, n), w.lineEnd = a, a();
          }var h,
              p,
              b,
              v,
              g,
              d,
              j,
              O,
              y,
              m,
              x,
              _,
              w = { point: o, lineStart: i, lineEnd: a, polygonStart: function polygonStart() {
              n.polygonStart(), w.lineStart = f;
            }, polygonEnd: function polygonEnd() {
              n.polygonEnd(), w.lineStart = i;
            } };return w;
        };
      }(t, n) : function (t) {
        return Object(i.b)({ point: function point(n, e) {
            n = t(n, e), this.stream.point(n[0], n[1]);
          } });
      }(t);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(4),
        o = e(216),
        i = e(110),
        c = e(218);n.a = function () {
      function t(t) {
        var n = t[0],
            e = t[1];return s = null, u.point(n, e), s || (a.point(n, e), s) || (f.point(n, e), s);
      }var n,
          e,
          u,
          a,
          f,
          s,
          l = Object(o.a)(),
          h = Object(i.b)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
          p = Object(i.b)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
          b = { point: function point(t, n) {
          s = [t, n];
        } };return t.invert = function (t) {
        var n = l.scale(),
            e = l.translate(),
            r = (t[0] - e[0]) / n,
            o = (t[1] - e[1]) / n;return (o >= .12 && o < .234 && r >= -.425 && r < -.214 ? h : o >= .166 && o < .234 && r >= -.214 && r < -.115 ? p : l).invert(t);
      }, t.stream = function (t) {
        return n && e === t ? n : n = function (t) {
          var n = t.length;return { point: function point(e, r) {
              for (var o = -1; ++o < n;) {
                t[o].point(e, r);
              }
            }, sphere: function sphere() {
              for (var e = -1; ++e < n;) {
                t[e].sphere();
              }
            }, lineStart: function lineStart() {
              for (var e = -1; ++e < n;) {
                t[e].lineStart();
              }
            }, lineEnd: function lineEnd() {
              for (var e = -1; ++e < n;) {
                t[e].lineEnd();
              }
            }, polygonStart: function polygonStart() {
              for (var e = -1; ++e < n;) {
                t[e].polygonStart();
              }
            }, polygonEnd: function polygonEnd() {
              for (var e = -1; ++e < n;) {
                t[e].polygonEnd();
              }
            } };
        }([l.stream(e = t), h.stream(t), p.stream(t)]);
      }, t.precision = function (n) {
        return arguments.length ? (l.precision(n), h.precision(n), p.precision(n), t) : l.precision();
      }, t.scale = function (n) {
        return arguments.length ? (l.scale(n), h.scale(.35 * n), p.scale(n), t.translate(l.translate())) : l.scale();
      }, t.translate = function (n) {
        if (!arguments.length) return l.translate();var e = l.scale(),
            o = +n[0],
            i = +n[1];return u = l.translate(n).clipExtent([[o - .455 * e, i - .238 * e], [o + .455 * e, i + .238 * e]]).stream(b), a = h.translate([o - .307 * e, i + .201 * e]).clipExtent([[o - .425 * e + r.i, i + .12 * e + r.i], [o - .214 * e - r.i, i + .234 * e - r.i]]).stream(b), f = p.translate([o - .205 * e, i + .212 * e]).clipExtent([[o - .214 * e + r.i, i + .166 * e + r.i], [o - .115 * e - r.i, i + .234 * e - r.i]]).stream(b), t;
      }, t.fitExtent = Object(c.a)(t), t.fitSize = Object(c.b)(t), t.scale(1070);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return c;
    });var r = e(4),
        o = e(47),
        i = e(17),
        c = Object(o.b)(function (t) {
      return Object(r.u)(2 / (1 + t));
    });c.invert = Object(o.a)(function (t) {
      return 2 * Object(r.c)(t / 2);
    }), n.b = function () {
      return Object(i.a)(c).scale(124.75).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "a", function () {
      return c;
    });var r = e(4),
        o = e(47),
        i = e(17),
        c = Object(o.b)(function (t) {
      return (t = Object(r.b)(t)) && t / Object(r.t)(t);
    });c.invert = Object(o.a)(function (t) {
      return t;
    }), n.b = function () {
      return Object(i.a)(c).scale(79.4188).clipAngle(179.999);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return Object(i.v)((i.l + t) / 2);
    }function o(t, n) {
      function e(t, n) {
        a > 0 ? n < -i.l + i.i && (n = -i.l + i.i) : n > i.l - i.i && (n = i.l - i.i);var e = a / Object(i.p)(r(n), c);return [e * Object(i.t)(c * t), a - e * Object(i.g)(c * t)];
      }var o = Object(i.g)(t),
          c = t === n ? Object(i.t)(t) : Object(i.n)(o / Object(i.g)(n)) / Object(i.n)(r(n) / r(t)),
          a = o * Object(i.p)(r(t), c) / c;return c ? (e.invert = function (t, n) {
        var e = a - n,
            r = Object(i.s)(c) * Object(i.u)(t * t + e * e);return [Object(i.e)(t, e) / c, 2 * Object(i.d)(Object(i.p)(a / r, 1 / c)) - i.l];
      }, e) : u.c;
    }n.a = o;var i = e(4),
        c = e(111),
        u = e(113);n.b = function () {
      return Object(c.a)(o).scale(109.5).parallels([30, 30]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(t, n) {
        var e = u - n,
            r = i * t;return [e * Object(o.t)(r), u - e * Object(o.g)(r)];
      }var r = Object(o.g)(t),
          i = t === n ? Object(o.t)(t) : (r - Object(o.g)(n)) / (n - t),
          u = r / i + t;return Object(o.a)(i) < o.i ? c.b : (e.invert = function (t, n) {
        var e = u - n;return [Object(o.e)(t, e) / i, u - Object(o.s)(i) * Object(o.u)(t * t + e * e)];
      }, e);
    }n.a = r;var o = e(4),
        i = e(111),
        c = e(219);n.b = function () {
      return Object(i.a)(r).scale(131.154).center([0, 13.9389]);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(o.g)(n),
          r = Object(o.g)(t) * e;return [e * Object(o.t)(t) / r, Object(o.t)(n) / r];
    }n.b = r;var o = e(4),
        i = e(47),
        c = e(17);r.invert = Object(i.a)(o.d), n.a = function () {
      return Object(c.a)(r).scale(144.049).clipAngle(60);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [Object(o.g)(n) * Object(o.t)(t), Object(o.t)(n)];
    }n.b = r;var o = e(4),
        i = e(47),
        c = e(17);r.invert = Object(i.a)(o.c), n.a = function () {
      return Object(c.a)(r).scale(249.5).clipAngle(90 + o.i);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      var e = Object(o.g)(n),
          r = 1 + Object(o.g)(t) * e;return [e * Object(o.t)(t) / r, Object(o.t)(n) / r];
    }n.b = r;var o = e(4),
        i = e(47),
        c = e(17);r.invert = Object(i.a)(function (t) {
      return 2 * Object(o.d)(t);
    }), n.a = function () {
      return Object(c.a)(r).scale(250).clipAngle(142);
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return [Object(o.n)(Object(o.v)((o.l + n) / 2)), -t];
    }n.b = r;var o = e(4),
        i = e(113);r.invert = function (t, n) {
      return [-n, 2 * Object(o.d)(Object(o.k)(t)) - o.l];
    }, n.a = function () {
      var t = Object(i.b)(r),
          n = t.center,
          e = t.rotate;return t.center = function (t) {
        return arguments.length ? n([-t[1], t[0]]) : (t = n(), [t[1], -t[0]]);
      }, t.rotate = function (t) {
        return arguments.length ? e([t[0], t[1], t.length > 2 ? t[2] + 90 : 90]) : (t = e(), [t[0], t[1], t[2] - 90]);
      }, e([0, 0, 90]).scale(159.155);
    };
  }, function (t, n, e) {
    "use strict";
    function r() {
      this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "";
    }function o() {
      return new r();
    }var i = Math.PI,
        c = 2 * i,
        u = c - 1e-6;r.prototype = o.prototype = { constructor: r, moveTo: function moveTo(t, n) {
        this._ += "M" + (this._x0 = this._x1 = +t) + "," + (this._y0 = this._y1 = +n);
      }, closePath: function closePath() {
        null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");
      }, lineTo: function lineTo(t, n) {
        this._ += "L" + (this._x1 = +t) + "," + (this._y1 = +n);
      }, quadraticCurveTo: function quadraticCurveTo(t, n, e, r) {
        this._ += "Q" + +t + "," + +n + "," + (this._x1 = +e) + "," + (this._y1 = +r);
      }, bezierCurveTo: function bezierCurveTo(t, n, e, r, o, i) {
        this._ += "C" + +t + "," + +n + "," + +e + "," + +r + "," + (this._x1 = +o) + "," + (this._y1 = +i);
      }, arcTo: function arcTo(t, n, e, r, o) {
        t = +t, n = +n, e = +e, r = +r, o = +o;var c = this._x1,
            u = this._y1,
            a = e - t,
            f = r - n,
            s = c - t,
            l = u - n,
            h = s * s + l * l;if (o < 0) throw new Error("negative radius: " + o);if (null === this._x1) this._ += "M" + (this._x1 = t) + "," + (this._y1 = n);else if (h > 1e-6) {
          if (Math.abs(l * a - f * s) > 1e-6 && o) {
            var p = e - c,
                b = r - u,
                v = a * a + f * f,
                g = p * p + b * b,
                d = Math.sqrt(v),
                j = Math.sqrt(h),
                O = o * Math.tan((i - Math.acos((v + h - g) / (2 * d * j))) / 2),
                y = O / j,
                m = O / d;Math.abs(y - 1) > 1e-6 && (this._ += "L" + (t + y * s) + "," + (n + y * l)), this._ += "A" + o + "," + o + ",0,0," + +(l * p > s * b) + "," + (this._x1 = t + m * a) + "," + (this._y1 = n + m * f);
          } else this._ += "L" + (this._x1 = t) + "," + (this._y1 = n);
        } else ;
      }, arc: function arc(t, n, e, r, o, a) {
        t = +t, n = +n;var f = (e = +e) * Math.cos(r),
            s = e * Math.sin(r),
            l = t + f,
            h = n + s,
            p = 1 ^ a,
            b = a ? r - o : o - r;if (e < 0) throw new Error("negative radius: " + e);null === this._x1 ? this._ += "M" + l + "," + h : (Math.abs(this._x1 - l) > 1e-6 || Math.abs(this._y1 - h) > 1e-6) && (this._ += "L" + l + "," + h), e && (b < 0 && (b = b % c + c), b > u ? this._ += "A" + e + "," + e + ",0,1," + p + "," + (t - f) + "," + (n - s) + "A" + e + "," + e + ",0,1," + p + "," + (this._x1 = l) + "," + (this._y1 = h) : b > 1e-6 && (this._ += "A" + e + "," + e + ",0," + +(b >= i) + "," + p + "," + (this._x1 = t + e * Math.cos(o)) + "," + (this._y1 = n + e * Math.sin(o))));
      }, rect: function rect(t, n, e, r) {
        this._ += "M" + (this._x0 = this._x1 = +t) + "," + (this._y0 = this._y1 = +n) + "h" + +e + "v" + +r + "h" + -e + "Z";
      }, toString: function toString() {
        return this._;
      } }, n.a = o;
  }, function (t, n, e) {
    var r = e(5),
        o = e(42);r(o.prototype, { getAllNodes: function getAllNodes() {
        var t = [];return this.root.each(function (n) {
          t.push(n);
        }), t;
      }, getAllLinks: function getAllLinks() {
        for (var t = [], n = [this.root], e = void 0; e = n.pop();) {
          var r = e.children;r && r.forEach(function (r) {
            t.push({ source: e, target: r }), n.push(r);
          });
        }return t;
      } }), r(o.prototype, { getAllEdges: o.prototype.getAllLinks });
  }, function (t, n, e) {
    var r = e(5),
        o = e(114),
        i = e(18);r(e(42).prototype, { partition: function partition() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];return i(this.rows, t, n);
      }, group: function group(t, n) {
        var e = this.partition(t, n);return o(e);
      }, groups: function groups(t, n) {
        return this.group(t, n);
      } });
  }, function (t, n, e) {
    var r = e(69);t.exports = function (t, n) {
      return r(n, function (n) {
        return t[n];
      });
    };
  }, function (t, n, e) {
    var r = e(78),
        o = e(527),
        i = Object.prototype.hasOwnProperty,
        c = o(function (t, n, e) {
      i.call(t, e) ? t[e].push(n) : r(t, e, [n]);
    });t.exports = c;
  }, function (t, n, e) {
    var r = e(528),
        o = e(529),
        i = e(67),
        c = e(8);t.exports = function (t, n) {
      return function (e, u) {
        var a = c(e) ? r : o,
            f = n ? n() : {};return a(e, t, i(u, 2), f);
      };
    };
  }, function (t, n) {
    t.exports = function (t, n, e, r) {
      for (var o = -1, i = null == t ? 0 : t.length; ++o < i;) {
        var c = t[o];n(r, c, e(c), t);
      }return r;
    };
  }, function (t, n, e) {
    var r = e(220);t.exports = function (t, n, e, o) {
      return r(t, function (t, r, i) {
        n(o, t, e(t), i);
      }), o;
    };
  }, function (t, n, e) {
    var r = e(203),
        o = e(10);t.exports = function (t, n) {
      return t && r(t, n, o);
    };
  }, function (t, n, e) {
    var r = e(20);t.exports = function (t, n) {
      return function (e, o) {
        if (null == e) return e;if (!r(e)) return t(e, o);for (var i = e.length, c = n ? i : -1, u = Object(e); (n ? c-- : ++c < i) && !1 !== o(u[c], c, u);) {}return e;
      };
    };
  }, function (t, n, e) {
    var r = e(9),
        o = e(7);t.exports = function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
          e = void 0;return r(n) ? e = n : Array.isArray(n) ? e = function e(t, _e) {
        for (var r = 0; r < n.length; r++) {
          var o = n[r];if (t[o] < _e[o]) return -1;if (t[o] > _e[o]) return 1;
        }return 0;
      } : o(n) && (e = function e(t, _e2) {
        return t[n] < _e2[n] ? -1 : t[n] > _e2[n] ? 1 : 0;
      }), t.sort(e);
    };
  }, function (t, n, e) {
    function r(t, n) {
      var e = t.getColumn(n);return c(e) && c(e[0]) && (e = i(e)), e;
    }var o = e(5),
        i = e(221),
        c = e(8),
        u = e(30),
        a = e(42),
        f = e(238);e(119).STATISTICS_METHODS.forEach(function (t) {
      a.prototype[t] = function (n) {
        return u[t](r(this, n));
      };
    });var s = u.quantile;o(a.prototype, { average: a.prototype.mean, quantile: function quantile(t, n) {
        return s(r(this, t), n);
      }, quantiles: function quantiles(t, n) {
        var e = r(this, t);return n.map(function (t) {
          return s(e, t);
        });
      }, quantilesByFraction: function quantilesByFraction(t, n) {
        return this.quantiles(t, f(n));
      }, range: function range(t) {
        return [this.min(t), this.max(t)];
      }, extent: function extent(t) {
        return this.range(t);
      } });
  }, function (t, n) {
    t.exports = function (t) {
      var n,
          e,
          r = t.length;if (1 === r) n = 0, e = t[0][1];else {
        for (var o, i, c, u = 0, a = 0, f = 0, s = 0, l = 0; l < r; l++) {
          u += i = (o = t[l])[0], a += c = o[1], f += i * i, s += i * c;
        }e = a / r - (n = (r * s - u * a) / (r * f - u * u)) * u / r;
      }return { m: n, b: e };
    };
  }, function (t, n) {
    t.exports = function (t) {
      return function (n) {
        return t.b + t.m * n;
      };
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      if (t.length < 2) return 1;for (var e, r = 0, o = 0; o < t.length; o++) {
        r += t[o][1];
      }e = r / t.length;for (var i = 0, c = 0; c < t.length; c++) {
        i += Math.pow(e - t[c][1], 2);
      }for (var u = 0, a = 0; a < t.length; a++) {
        u += Math.pow(t[a][1] - n(t[a][0]), 2);
      }return 1 - u / i;
    };
  }, function (t, n, e) {
    var r = e(225),
        o = e(226);t.exports = function (t) {
      return o(r(t));
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n, e = new Map(), r = 0, o = 0; o < t.length; o++) {
        var i = e.get(t[o]);void 0 === i ? i = 1 : i++, i > r && (n = t[o], r = i), e.set(t[o], i);
      }if (0 === r) throw new Error("mode requires at last one data point");return n;
    };
  }, function (t, n) {
    t.exports = function (t) {
      return t[0];
    };
  }, function (t, n) {
    t.exports = function (t) {
      return t[t.length - 1];
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n = 0, e = 0; e < t.length; e++) {
        n += t[e];
      }return n;
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n = 1, e = 0; e < t.length; e++) {
        n *= t[e];
      }return n;
    };
  }, function (t, n) {
    function e(t, n, o, i) {
      for (o = o || 0, i = i || t.length - 1; i > o;) {
        if (i - o > 600) {
          var c = i - o + 1,
              u = n - o + 1,
              a = Math.log(c),
              f = .5 * Math.exp(2 * a / 3),
              s = .5 * Math.sqrt(a * f * (c - f) / c);u - c / 2 < 0 && (s *= -1);e(t, n, Math.max(o, Math.floor(n - u * f / c + s)), Math.min(i, Math.floor(n + (c - u) * f / c + s)));
        }var l = t[n],
            h = o,
            p = i;for (r(t, o, n), t[i] > l && r(t, o, i); h < p;) {
          for (r(t, h, p), h++, p--; t[h] < l;) {
            h++;
          }for (; t[p] > l;) {
            p--;
          }
        }t[o] === l ? r(t, o, p) : r(t, ++p, i), p <= n && (o = p + 1), n <= p && (i = p - 1);
      }
    }function r(t, n, e) {
      var r = t[n];t[n] = t[e], t[e] = r;
    }t.exports = e;
  }, function (t, n, e) {
    var r = e(116);t.exports = function (t) {
      var n = r(t, .75),
          e = r(t, .25);if ("number" == typeof n && "number" == typeof e) return n - e;
    };
  }, function (t, n, e) {
    var r = e(229);t.exports = function (t) {
      for (var n = r(t), e = [], o = 0; o < t.length; o++) {
        e.push(Math.abs(t[o] - n));
      }return r(e);
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      var e = [];if (n < 1) throw new Error("chunk size must be a positive number");if (Math.floor(n) !== n) throw new Error("chunk size must be an integer");for (var r = 0; r < t.length; r += n) {
        e.push(t.slice(r, r + n));
      }return e;
    };
  }, function (t, n) {
    t.exports = function (t, n, e) {
      if (0 === t.length) return [];e = e || Math.random;for (var r = t.length, o = [], i = 0; i < n; i++) {
        var c = Math.floor(e() * r);o.push(t[c]);
      }return o;
    };
  }, function (t, n, e) {
    var r = e(230);t.exports = function (t, n, e) {
      return r(t, e).slice(0, n);
    };
  }, function (t, n, e) {
    function r(t, n) {
      for (var e = [], r = 0; r < t; r++) {
        for (var o = [], i = 0; i < n; i++) {
          o.push(0);
        }e.push(o);
      }return e;
    }function o(t, n, e, r) {
      var o;if (t > 0) {
        var i = (e[n] - e[t - 1]) / (n - t + 1);o = r[n] - r[t - 1] - (n - t + 1) * i * i;
      } else o = r[n] - e[n] * e[n] / (n + 1);return o < 0 ? 0 : o;
    }function i(t, n, e, r, c, u, a) {
      if (!(t > n)) {
        var f = Math.floor((t + n) / 2);r[e][f] = r[e - 1][f - 1], c[e][f] = f;var s = e;t > e && (s = Math.max(s, c[e][t - 1] || 0)), s = Math.max(s, c[e - 1][f] || 0);var l = f - 1;n < r.length - 1 && (l = Math.min(l, c[e][n + 1] || 0));for (var h, p, b, v = l; v >= s && !((h = o(v, f, u, a)) + r[e - 1][s - 1] >= r[e][f]); --v) {
          (p = o(s, f, u, a) + r[e - 1][s - 1]) < r[e][f] && (r[e][f] = p, c[e][f] = s), s++, (b = h + r[e - 1][v - 1]) < r[e][f] && (r[e][f] = b, c[e][f] = v);
        }i(t, f - 1, e, r, c, u, a), i(f + 1, n, e, r, c, u, a);
      }
    }var c = e(232),
        u = e(225);t.exports = function (t, n) {
      if (n > t.length) throw new Error("cannot generate more classes than there are data values");var e = u(t);if (1 === c(e)) return [e];var a = r(n, e.length),
          f = r(n, e.length);!function (t, n, e) {
        for (var r, c = n[0].length, u = t[Math.floor(c / 2)], a = [], f = [], s = 0; s < c; ++s) {
          r = t[s] - u, 0 === s ? (a.push(r), f.push(r * r)) : (a.push(a[s - 1] + r), f.push(f[s - 1] + r * r)), n[0][s] = o(0, s, a, f), e[0][s] = 0;
        }for (var l = 1; l < n.length; ++l) {
          i(l < n.length - 1 ? l : c - 1, c - 1, l, n, e, a, f);
        }
      }(e, a, f);for (var s = [], l = f[0].length - 1, h = f.length - 1; h >= 0; h--) {
        var p = f[h][l];s[h] = e.slice(p, l + 1), h > 0 && (l = p - 1);
      }return s;
    };
  }, function (t, n, e) {
    var r = e(228),
        o = e(227);t.exports = function (t, n) {
      if (t.length < 2) return t;for (var e = o(t), i = r(t), c = [e], u = (i - e) / n, a = 1; a < n; a++) {
        c.push(c[0] + u * a);
      }return c.push(i), c;
    };
  }, function (t, n, e) {
    var r = e(233),
        o = e(234);t.exports = function (t, n) {
      return r(t, n) / o(t) / o(n);
    };
  }, function (t, n, e) {
    var r = e(23);t.exports = function (t) {
      if (t.length < 3) throw new Error("sampleSkewness requires at least three data points");for (var n, e = r(t), o = 0, i = 0, c = 0; c < t.length; c++) {
        o += (n = t[c] - e) * n, i += n * n * n;
      }var u = t.length - 1,
          a = Math.sqrt(o / u),
          f = t.length;return f * i / ((f - 1) * (f - 2) * Math.pow(a, 3));
    };
  }, function (t, n, e) {
    var r = e(23);t.exports = function (t) {
      var n = t.length;if (n < 4) throw new Error("sampleKurtosis requires at least four data points");for (var e, o = r(t), i = 0, c = 0, u = 0; u < n; u++) {
        i += (e = t[u] - o) * e, c += e * e * e * e;
      }return (n - 1) / ((n - 2) * (n - 3)) * (n * (n + 1) * c / (i * i) - 3 * (n - 1));
    };
  }, function (t, n) {
    t.exports = function (t) {
      for (var n = new Array(t.length), e = [t.slice()], r = 0; r < t.length; r++) {
        n[r] = 0;
      }for (r = 0; r < t.length;) {
        if (n[r] < r) {
          var o = 0;r % 2 != 0 && (o = n[r]);var i = t[o];t[o] = t[r], t[r] = i, e.push(t.slice()), n[r]++, r = 0;
        } else n[r] = 0, r++;
      }return e;
    };
  }, function (t, n) {
    function e(t, n) {
      var r,
          o,
          i,
          c,
          u = [];for (r = 0; r < t.length; r++) {
        if (1 === n) u.push([t[r]]);else for (i = e(t.slice(r + 1, t.length), n - 1), o = 0; o < i.length; o++) {
          (c = i[o]).unshift(t[r]), u.push(c);
        }
      }return u;
    }t.exports = e;
  }, function (t, n) {
    function e(t, n) {
      for (var r = [], o = 0; o < t.length; o++) {
        if (1 === n) r.push([t[o]]);else for (var i = e(t.slice(o, t.length), n - 1), c = 0; c < i.length; c++) {
          r.push([t[o]].concat(i[c]));
        }
      }return r;
    }t.exports = e;
  }, function (t, n) {
    t.exports = function (t, n, e) {
      return t + (e - t) / (n + 1);
    };
  }, function (t, n, e) {
    var r = e(235);t.exports = function (t, n, e, o, i, c) {
      var u = r(n, e, i, c);return (e * (t + Math.pow(n - u, 2)) + c * (o + Math.pow(i - u, 2))) / (e + c);
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) throw new Error("geometricMean requires at least one data point");for (var n = 1, e = 0; e < t.length; e++) {
        if (t[e] <= 0) throw new Error("geometricMean requires only positive numbers as input");n *= t[e];
      }return Math.pow(n, 1 / t.length);
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) throw new Error("harmonicMean requires at least one data point");for (var n = 0, e = 0; e < t.length; e++) {
        if (t[e] <= 0) throw new Error("harmonicMean requires only positive numbers as input");n += 1 / t[e];
      }return t.length / n;
    };
  }, function (t, n, e) {
    var r = e(117);t.exports = function (t) {
      return r(t, .5);
    };
  }, function (t, n) {
    t.exports = function (t, n, e) {
      return (t * n - e) / (n - 1);
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (0 === t.length) throw new Error("rootMeanSquare requires at least one data point");for (var n = 0, e = 0; e < t.length; e++) {
        n += Math.pow(t[e], 2);
      }return Math.sqrt(n / t.length);
    };
  }, function (t, n, e) {
    var r = e(222),
        o = e(23);t.exports = function (t, n) {
      return (o(t) - n) / (r(t) / Math.sqrt(t.length));
    };
  }, function (t, n, e) {
    var r = e(23),
        o = e(118);t.exports = function (t, n, e) {
      var i = t.length,
          c = n.length;if (!i || !c) return null;e || (e = 0);var u = r(t),
          a = r(n),
          f = o(t),
          s = o(n);if ("number" == typeof u && "number" == typeof a && "number" == typeof f && "number" == typeof s) {
        var l = ((i - 1) * f + (c - 1) * s) / (i + c - 2);return (u - a - e) / Math.sqrt(l * (1 / i + 1 / c));
      }
    };
  }, function (t, n) {
    function e() {
      this.totalCount = 0, this.data = {};
    }e.prototype.train = function (t, n) {
      this.data[n] || (this.data[n] = {});for (var e in t) {
        var r = t[e];void 0 === this.data[n][e] && (this.data[n][e] = {}), void 0 === this.data[n][e][r] && (this.data[n][e][r] = 0), this.data[n][e][r]++;
      }this.totalCount++;
    }, e.prototype.score = function (t) {
      var n,
          e = {};for (var r in t) {
        var o = t[r];for (n in this.data) {
          e[n] = {}, this.data[n][r] ? e[n][r + "_" + o] = (this.data[n][r][o] || 0) / this.totalCount : e[n][r + "_" + o] = 0;
        }
      }var i = {};for (n in e) {
        i[n] = 0;for (var c in e[n]) {
          i[n] += e[n][c];
        }
      }return i;
    }, t.exports = e;
  }, function (t, n) {
    function e() {
      this.weights = [], this.bias = 0;
    }e.prototype.predict = function (t) {
      if (t.length !== this.weights.length) return null;for (var n = 0, e = 0; e < this.weights.length; e++) {
        n += this.weights[e] * t[e];
      }return (n += this.bias) > 0 ? 1 : 0;
    }, e.prototype.train = function (t, n) {
      if (0 !== n && 1 !== n) return null;t.length !== this.weights.length && (this.weights = t, this.bias = 1);var e = this.predict(t);if (e !== n) {
        for (var r = n - e, o = 0; o < this.weights.length; o++) {
          this.weights[o] += r * t[o];
        }this.bias += r;
      }return this;
    }, t.exports = e;
  }, function (t, n) {
    t.exports = function (t) {
      if (t < 0) throw new Error("factorial requires a non-negative value");if (Math.floor(t) !== t) throw new Error("factorial requires an integer input");for (var n = 1, e = 2; e <= t; e++) {
        n *= e;
      }return n;
    };
  }, function (t, n) {
    t.exports = function (t) {
      if (t < 0 || t > 1) throw new Error("bernoulliDistribution requires probability to be between 0 and 1 inclusive");return [1 - t, t];
    };
  }, function (t, n, e) {
    var r = e(72);t.exports = function (t, n) {
      if (!(n < 0 || n > 1 || t <= 0 || t % 1 != 0)) {
        var e = 0,
            o = 0,
            i = [],
            c = 1;do {
          i[e] = c * Math.pow(n, e) * Math.pow(1 - n, t - e), o += i[e], c = c * (t - ++e + 1) / e;
        } while (o < 1 - r);return i;
      }
    };
  }, function (t, n, e) {
    var r = e(72);t.exports = function (t) {
      if (!(t <= 0)) {
        var n = 0,
            e = 0,
            o = [],
            i = 1;do {
          o[n] = Math.exp(-t) * Math.pow(t, n) / i, e += o[n], i *= ++n;
        } while (e < 1 - r);return o;
      }
    };
  }, function (t, n, e) {
    var r = e(23),
        o = e(573);t.exports = function (t, n, e) {
      for (var i, c, u = 0, a = n(r(t)), f = [], s = [], l = 0; l < t.length; l++) {
        void 0 === f[t[l]] && (f[t[l]] = 0), f[t[l]]++;
      }for (l = 0; l < f.length; l++) {
        void 0 === f[l] && (f[l] = 0);
      }for (c in a) {
        c in f && (s[+c] = a[c] * t.length);
      }for (c = s.length - 1; c >= 0; c--) {
        s[c] < 3 && (s[c - 1] += s[c], s.pop(), f[c - 1] += f[c], f.pop());
      }for (c = 0; c < f.length; c++) {
        u += Math.pow(f[c] - s[c], 2) / s[c];
      }return i = f.length - 1 - 1, o[i][e] < u;
    };
  }, function (t, n) {
    t.exports = { 1: { .995: 0, .99: 0, .975: 0, .95: 0, .9: .02, .5: .45, .1: 2.71, .05: 3.84, .025: 5.02, .01: 6.63, .005: 7.88 }, 2: { .995: .01, .99: .02, .975: .05, .95: .1, .9: .21, .5: 1.39, .1: 4.61, .05: 5.99, .025: 7.38, .01: 9.21, .005: 10.6 }, 3: { .995: .07, .99: .11, .975: .22, .95: .35, .9: .58, .5: 2.37, .1: 6.25, .05: 7.81, .025: 9.35, .01: 11.34, .005: 12.84 }, 4: { .995: .21, .99: .3, .975: .48, .95: .71, .9: 1.06, .5: 3.36, .1: 7.78, .05: 9.49, .025: 11.14, .01: 13.28, .005: 14.86 }, 5: { .995: .41, .99: .55, .975: .83, .95: 1.15, .9: 1.61, .5: 4.35, .1: 9.24, .05: 11.07, .025: 12.83, .01: 15.09, .005: 16.75 }, 6: { .995: .68, .99: .87, .975: 1.24, .95: 1.64, .9: 2.2, .5: 5.35, .1: 10.65, .05: 12.59, .025: 14.45, .01: 16.81, .005: 18.55 }, 7: { .995: .99, .99: 1.25, .975: 1.69, .95: 2.17, .9: 2.83, .5: 6.35, .1: 12.02, .05: 14.07, .025: 16.01, .01: 18.48, .005: 20.28 }, 8: { .995: 1.34, .99: 1.65, .975: 2.18, .95: 2.73, .9: 3.49, .5: 7.34, .1: 13.36, .05: 15.51, .025: 17.53, .01: 20.09, .005: 21.96 }, 9: { .995: 1.73, .99: 2.09, .975: 2.7, .95: 3.33, .9: 4.17, .5: 8.34, .1: 14.68, .05: 16.92, .025: 19.02, .01: 21.67, .005: 23.59 }, 10: { .995: 2.16, .99: 2.56, .975: 3.25, .95: 3.94, .9: 4.87, .5: 9.34, .1: 15.99, .05: 18.31, .025: 20.48, .01: 23.21, .005: 25.19 }, 11: { .995: 2.6, .99: 3.05, .975: 3.82, .95: 4.57, .9: 5.58, .5: 10.34, .1: 17.28, .05: 19.68, .025: 21.92, .01: 24.72, .005: 26.76 }, 12: { .995: 3.07, .99: 3.57, .975: 4.4, .95: 5.23, .9: 6.3, .5: 11.34, .1: 18.55, .05: 21.03, .025: 23.34, .01: 26.22, .005: 28.3 }, 13: { .995: 3.57, .99: 4.11, .975: 5.01, .95: 5.89, .9: 7.04, .5: 12.34, .1: 19.81, .05: 22.36, .025: 24.74, .01: 27.69, .005: 29.82 }, 14: { .995: 4.07, .99: 4.66, .975: 5.63, .95: 6.57, .9: 7.79, .5: 13.34, .1: 21.06, .05: 23.68, .025: 26.12, .01: 29.14, .005: 31.32 }, 15: { .995: 4.6, .99: 5.23, .975: 6.27, .95: 7.26, .9: 8.55, .5: 14.34, .1: 22.31, .05: 25, .025: 27.49, .01: 30.58, .005: 32.8 }, 16: { .995: 5.14, .99: 5.81, .975: 6.91, .95: 7.96, .9: 9.31, .5: 15.34, .1: 23.54, .05: 26.3, .025: 28.85, .01: 32, .005: 34.27 }, 17: { .995: 5.7, .99: 6.41, .975: 7.56, .95: 8.67, .9: 10.09, .5: 16.34, .1: 24.77, .05: 27.59, .025: 30.19, .01: 33.41, .005: 35.72 }, 18: { .995: 6.26, .99: 7.01, .975: 8.23, .95: 9.39, .9: 10.87, .5: 17.34, .1: 25.99, .05: 28.87, .025: 31.53, .01: 34.81, .005: 37.16 }, 19: { .995: 6.84, .99: 7.63, .975: 8.91, .95: 10.12, .9: 11.65, .5: 18.34, .1: 27.2, .05: 30.14, .025: 32.85, .01: 36.19, .005: 38.58 }, 20: { .995: 7.43, .99: 8.26, .975: 9.59, .95: 10.85, .9: 12.44, .5: 19.34, .1: 28.41, .05: 31.41, .025: 34.17, .01: 37.57, .005: 40 }, 21: { .995: 8.03, .99: 8.9, .975: 10.28, .95: 11.59, .9: 13.24, .5: 20.34, .1: 29.62, .05: 32.67, .025: 35.48, .01: 38.93, .005: 41.4 }, 22: { .995: 8.64, .99: 9.54, .975: 10.98, .95: 12.34, .9: 14.04, .5: 21.34, .1: 30.81, .05: 33.92, .025: 36.78, .01: 40.29, .005: 42.8 }, 23: { .995: 9.26, .99: 10.2, .975: 11.69, .95: 13.09, .9: 14.85, .5: 22.34, .1: 32.01, .05: 35.17, .025: 38.08, .01: 41.64, .005: 44.18 }, 24: { .995: 9.89, .99: 10.86, .975: 12.4, .95: 13.85, .9: 15.66, .5: 23.34, .1: 33.2, .05: 36.42, .025: 39.36, .01: 42.98, .005: 45.56 }, 25: { .995: 10.52, .99: 11.52, .975: 13.12, .95: 14.61, .9: 16.47, .5: 24.34, .1: 34.28, .05: 37.65, .025: 40.65, .01: 44.31, .005: 46.93 }, 26: { .995: 11.16, .99: 12.2, .975: 13.84, .95: 15.38, .9: 17.29, .5: 25.34, .1: 35.56, .05: 38.89, .025: 41.92, .01: 45.64, .005: 48.29 }, 27: { .995: 11.81, .99: 12.88, .975: 14.57, .95: 16.15, .9: 18.11, .5: 26.34, .1: 36.74, .05: 40.11, .025: 43.19, .01: 46.96, .005: 49.65 }, 28: { .995: 12.46, .99: 13.57, .975: 15.31, .95: 16.93, .9: 18.94, .5: 27.34, .1: 37.92, .05: 41.34, .025: 44.46, .01: 48.28, .005: 50.99 }, 29: { .995: 13.12, .99: 14.26, .975: 16.05, .95: 17.71, .9: 19.77, .5: 28.34, .1: 39.09, .05: 42.56, .025: 45.72, .01: 49.59, .005: 52.34 }, 30: { .995: 13.79, .99: 14.95, .975: 16.79, .95: 18.49, .9: 20.6, .5: 29.34, .1: 40.26, .05: 43.77, .025: 46.98, .01: 50.89, .005: 53.67 }, 40: { .995: 20.71, .99: 22.16, .975: 24.43, .95: 26.51, .9: 29.05, .5: 39.34, .1: 51.81, .05: 55.76, .025: 59.34, .01: 63.69, .005: 66.77 }, 50: { .995: 27.99, .99: 29.71, .975: 32.36, .95: 34.76, .9: 37.69, .5: 49.33, .1: 63.17, .05: 67.5, .025: 71.42, .01: 76.15, .005: 79.49 }, 60: { .995: 35.53, .99: 37.48, .975: 40.48, .95: 43.19, .9: 46.46, .5: 59.33, .1: 74.4, .05: 79.08, .025: 83.3, .01: 88.38, .005: 91.95 }, 70: { .995: 43.28, .99: 45.44, .975: 48.76, .95: 51.74, .9: 55.33, .5: 69.33, .1: 85.53, .05: 90.53, .025: 95.02, .01: 100.42, .005: 104.22 }, 80: { .995: 51.17, .99: 53.54, .975: 57.15, .95: 60.39, .9: 64.28, .5: 79.33, .1: 96.58, .05: 101.88, .025: 106.63, .01: 112.33, .005: 116.32 }, 90: { .995: 59.2, .99: 61.75, .975: 65.65, .95: 69.13, .9: 73.29, .5: 89.33, .1: 107.57, .05: 113.14, .025: 118.14, .01: 124.12, .005: 128.3 }, 100: { .995: 67.33, .99: 70.06, .975: 74.22, .95: 77.93, .9: 82.36, .5: 99.33, .1: 118.5, .05: 124.34, .025: 129.56, .01: 135.81, .005: 140.17 } };
  }, function (t, n) {
    t.exports = function (t, n, e) {
      return (t - n) / e;
    };
  }, function (t, n, e) {
    var r = e(236);t.exports = function (t) {
      var n = Math.abs(t),
          e = Math.min(Math.round(100 * n), r.length - 1);return t >= 0 ? r[e] : +(1 - r[e]).toFixed(4);
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = 1 / (1 + .5 * Math.abs(t)),
          e = n * Math.exp(-Math.pow(t, 2) - 1.26551223 + 1.00002368 * n + .37409196 * Math.pow(n, 2) + .09678418 * Math.pow(n, 3) - .18628806 * Math.pow(n, 4) + .27886807 * Math.pow(n, 5) - 1.13520398 * Math.pow(n, 6) + 1.48851587 * Math.pow(n, 7) - .82215223 * Math.pow(n, 8) + .17087277 * Math.pow(n, 9));return t >= 0 ? 1 - e : e - 1;
    };
  }, function (t, n, e) {
    var r = e(72),
        o = e(237);t.exports = function (t) {
      return 0 === t ? t = r : t >= 1 && (t = 1 - r), Math.sqrt(2) * o(2 * t - 1);
    };
  }, function (t, n, e) {
    var r = e(579);t.exports = function (t, n, e, o, i) {
      if ("function" != typeof t) throw new TypeError("func must be a function");for (var c = 0; c < o; c++) {
        var u = (n + e) / 2;if (0 === t(u) || Math.abs((e - n) / 2) < i) return u;r(t(u)) === r(t(n)) ? n = u : e = u;
      }throw new Error("maximum number of iterations exceeded");
    };
  }, function (t, n) {
    t.exports = function (t) {
      if ("number" == typeof t) return t < 0 ? -1 : 0 === t ? 0 : 1;throw new TypeError("not a number");
    };
  }, function (t, n, e) {
    var r = e(7),
        o = e(108);(0, e(2).registerConnector)("default", function (t, n) {
      if (r(t) && (t = n.getView(t)), !t) throw new TypeError("Invalid dataView");return o(t.rows);
    });
  }, function (t, n, e) {
    var r = e(199),
        o = 0;t.exports = function (t) {
      var n = ++o;return r(t) + n;
    };
  }, function (t, n, e) {
    var r = e(7),
        o = e(583),
        i = o.dsvFormat,
        c = o.csvParse,
        u = o.tsvParse,
        a = e(2).registerConnector;a("dsv", function (t) {
      var n = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).delimiter || ",";if (!r(n)) throw new TypeError("Invalid delimiter: must be a string!");return i(n).parse(t);
    }), a("csv", function (t) {
      return c(t);
    }), a("tsv", function (t) {
      return u(t);
    });
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(120);e.d(n, "dsvFormat", function () {
      return r.a;
    });var o = e(584);e.d(n, "csvParse", function () {
      return o.c;
    }), e.d(n, "csvParseRows", function () {
      return o.d;
    }), e.d(n, "csvFormat", function () {
      return o.a;
    }), e.d(n, "csvFormatRows", function () {
      return o.b;
    });var i = e(585);e.d(n, "tsvParse", function () {
      return i.c;
    }), e.d(n, "tsvParseRows", function () {
      return i.d;
    }), e.d(n, "tsvFormat", function () {
      return i.a;
    }), e.d(n, "tsvFormatRows", function () {
      return i.b;
    });
  }, function (t, n, e) {
    "use strict";
    e.d(n, "c", function () {
      return i;
    }), e.d(n, "d", function () {
      return c;
    }), e.d(n, "a", function () {
      return u;
    }), e.d(n, "b", function () {
      return a;
    });var r = e(120),
        o = Object(r.a)(","),
        i = o.parse,
        c = o.parseRows,
        u = o.format,
        a = o.formatRows;
  }, function (t, n, e) {
    "use strict";
    e.d(n, "c", function () {
      return i;
    }), e.d(n, "d", function () {
      return c;
    }), e.d(n, "a", function () {
      return u;
    }), e.d(n, "b", function () {
      return a;
    });var r = e(120),
        o = Object(r.a)("\t"),
        i = o.parse,
        c = o.parseRows,
        u = o.format,
        a = o.formatRows;
  }, function (t, n, e) {
    function r(t, n) {
      n.dataType = "geo-graticule";var e = o().lines();return e.map(function (t, n) {
        return t.index = "" + n, t;
      }), n.rows = e, e;
    }var o = e(0).geoGraticule;(0, e(2).registerConnector)("geo-graticule", r), t.exports = r;
  }, function (t, n) {
    t.exports = function (t) {
      var n = [];return t.replace(r, function (t, r, i) {
        var c = r.toLowerCase();for (i = function (t) {
          var n = t.match(o);return n ? n.map(Number) : [];
        }(i), "m" == c && i.length > 2 && (n.push([r].concat(i.splice(0, 2))), c = "l", r = "m" == r ? "l" : "L");;) {
          if (i.length == e[c]) return i.unshift(r), n.push(i);if (i.length < e[c]) throw new Error("malformed path data");n.push([r].concat(i.splice(0, e[c])));
        }
      }), n;
    };var e = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },
        r = /([astvzqmhlc])([^astvzqmhlc]*)/gi,
        o = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi;
  }, function (t, n) {
    t.exports = Array.isArray || function (t) {
      return "[object Array]" == Object.prototype.toString.call(t);
    };
  }, function (t, n) {
    t.exports = function (t) {
      var n = 0,
          e = 0,
          r = 0,
          o = 0;return t.map(function (t) {
        var i = (t = t.slice())[0],
            c = i.toUpperCase();if (i != c) switch (t[0] = c, i) {case "a":
            t[6] += r, t[7] += o;break;case "v":
            t[1] += o;break;case "h":
            t[1] += r;break;default:
            for (var u = 1; u < t.length;) {
              t[u++] += r, t[u++] += o;
            }}switch (c) {case "Z":
            r = n, o = e;break;case "H":
            r = t[1];break;case "V":
            o = t[1];break;case "M":
            r = n = t[1], o = e = t[2];break;default:
            r = t[t.length - 2], o = t[t.length - 1];}return t;
      });
    };
  }, function (t, n, e) {
    function r(t, n, e) {
      n = o({}, f, n), e.dataType = u;var r = n,
          c = r.nodes,
          a = r.edges;if (c && !i(c)) throw new TypeError("Invalid nodes: must be a function!");if (a && !i(a)) throw new TypeError("Invalid edges: must be a function!");return e.rows = e.graph = { nodes: c(t), edges: a(t) }, o(e, e.graph), e.rows;
    }var o = e(5),
        i = e(9),
        c = e(2),
        u = c.GRAPH,
        a = c.registerConnector,
        f = { nodes: function nodes(t) {
        return t.nodes;
      }, edges: function edges(t) {
        return t.edges;
      } };a("graph", r), a("diagram", r);
  }, function (t, n, e) {
    function r(t, n, e) {
      e.dataType = u;var r = n && n.children ? n.children : null;if (r && !o(r)) throw new TypeError("Invalid children: must be a function!");return e.rows = e.root = i(t, r), t;
    }var o = e(9),
        i = e(48).hierarchy,
        c = e(2),
        u = c.HIERARCHY,
        a = c.registerConnector;a("hierarchy", r), a("tree", r);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return t.parent === n.parent ? 1 : 2;
    }function o(t, n) {
      return t + n.x;
    }function i(t, n) {
      return Math.max(t, n.y);
    }n.a = function () {
      function t(t) {
        var r,
            a = 0;t.eachAfter(function (t) {
          var e = t.children;e ? (t.x = function (t) {
            return t.reduce(o, 0) / t.length;
          }(e), t.y = function (t) {
            return 1 + t.reduce(i, 0);
          }(e)) : (t.x = r ? a += n(t, r) : 0, t.y = 0, r = t);
        });var f = function (t) {
          for (var n; n = t.children;) {
            t = n[0];
          }return t;
        }(t),
            s = function (t) {
          for (var n; n = t.children;) {
            t = n[n.length - 1];
          }return t;
        }(t),
            l = f.x - n(f, s) / 2,
            h = s.x + n(s, f) / 2;return t.eachAfter(u ? function (n) {
          n.x = (n.x - t.x) * e, n.y = (t.y - n.y) * c;
        } : function (n) {
          n.x = (n.x - l) / (h - l) * e, n.y = (1 - (t.y ? n.y / t.y : 1)) * c;
        });
      }var n = r,
          e = 1,
          c = 1,
          u = !1;return t.separation = function (e) {
        return arguments.length ? (n = e, t) : n;
      }, t.size = function (n) {
        return arguments.length ? (u = !1, e = +n[0], c = +n[1], t) : u ? null : [e, c];
      }, t.nodeSize = function (n) {
        return arguments.length ? (u = !0, e = +n[0], c = +n[1], t) : u ? [e, c] : null;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      var n = 0,
          e = t.children,
          r = e && e.length;if (r) for (; --r >= 0;) {
        n += e[r].value;
      } else n = 1;t.value = n;
    }n.a = function () {
      return this.eachAfter(r);
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      var n,
          e,
          r,
          o,
          i = this,
          c = [i];do {
        for (n = c.reverse(), c = []; i = n.pop();) {
          if (t(i), e = i.children) for (r = 0, o = e.length; r < o; ++r) {
            c.push(e[r]);
          }
        }
      } while (c.length);return this;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      for (var n, e, r = this, o = [r]; r = o.pop();) {
        if (t(r), n = r.children) for (e = n.length - 1; e >= 0; --e) {
          o.push(n[e]);
        }
      }return this;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      for (var n, e, r, o = this, i = [o], c = []; o = i.pop();) {
        if (c.push(o), n = o.children) for (e = 0, r = n.length; e < r; ++e) {
          i.push(n[e]);
        }
      }for (; o = c.pop();) {
        t(o);
      }return this;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return this.eachAfter(function (n) {
        for (var e = +t(n.data) || 0, r = n.children, o = r && r.length; --o >= 0;) {
          e += r[o].value;
        }n.value = e;
      });
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return this.eachBefore(function (n) {
        n.children && n.children.sort(t);
      });
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      for (var n = this, e = function (t, n) {
        if (t === n) return t;var e = t.ancestors(),
            r = n.ancestors(),
            o = null;for (t = e.pop(), n = r.pop(); t === n;) {
          o = t, t = e.pop(), n = r.pop();
        }return o;
      }(n, t), r = [n]; n !== e;) {
        n = n.parent, r.push(n);
      }for (var o = r.length; t !== e;) {
        r.splice(o, 0, t), t = t.parent;
      }return r;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {
      for (var t = this, n = [t]; t = t.parent;) {
        n.push(t);
      }return n;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {
      var t = [];return this.each(function (n) {
        t.push(n);
      }), t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {
      var t = [];return this.eachBefore(function (n) {
        n.children || t.push(n);
      }), t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function () {
      var t = this,
          n = [];return t.each(function (e) {
        e !== t && n.push({ source: e.parent, target: e });
      }), n;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return Math.sqrt(t.value);
    }function o(t) {
      return function (n) {
        n.children || (n.r = Math.max(0, +t(n) || 0));
      };
    }function i(t, n) {
      return function (e) {
        if (r = e.children) {
          var r,
              o,
              i,
              c = r.length,
              a = t(e) * n || 0;if (a) for (o = 0; o < c; ++o) {
            r[o].r += a;
          }if (i = Object(u.b)(r), a) for (o = 0; o < c; ++o) {
            r[o].r -= a;
          }e.r = i + a;
        }
      };
    }function c(t) {
      return function (n) {
        var e = n.parent;n.r *= t, e && (n.x = e.x + t * n.x, n.y = e.y + t * n.y);
      };
    }var u = e(242),
        a = e(122),
        f = e(244);n.a = function () {
      function t(t) {
        return t.x = e / 2, t.y = u / 2, n ? t.eachBefore(o(n)).eachAfter(i(s, .5)).eachBefore(c(1)) : t.eachBefore(o(r)).eachAfter(i(f.a, 1)).eachAfter(i(s, t.r / Math.min(e, u))).eachBefore(c(Math.min(e, u) / (2 * t.r))), t;
      }var n = null,
          e = 1,
          u = 1,
          s = f.a;return t.radius = function (e) {
        return arguments.length ? (n = Object(a.a)(e), t) : n;
      }, t.size = function (n) {
        return arguments.length ? (e = +n[0], u = +n[1], t) : [e, u];
      }, t.padding = function (n) {
        return arguments.length ? (s = "function" == typeof n ? n : Object(f.b)(+n), t) : s;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    e.d(n, "b", function () {
      return r;
    }), n.a = function (t) {
      for (var n, e, r = t.length; r;) {
        e = Math.random() * r-- | 0, n = t[r], t[r] = t[e], t[e] = n;
      }return t;
    };var r = Array.prototype.slice;
  }, function (t, n, e) {
    "use strict";
    var r = e(245),
        o = e(49);n.a = function () {
      function t(t) {
        var u = t.height + 1;return t.x0 = t.y0 = i, t.x1 = n, t.y1 = e / u, t.eachBefore(function (t, n) {
          return function (e) {
            e.children && Object(o.a)(e, e.x0, t * (e.depth + 1) / n, e.x1, t * (e.depth + 2) / n);var r = e.x0,
                c = e.y0,
                u = e.x1 - i,
                a = e.y1 - i;u < r && (r = u = (r + u) / 2), a < c && (c = a = (c + a) / 2), e.x0 = r, e.y0 = c, e.x1 = u, e.y1 = a;
          };
        }(e, u)), c && t.eachBefore(r.a), t;
      }var n = 1,
          e = 1,
          i = 0,
          c = !1;return t.round = function (n) {
        return arguments.length ? (c = !!n, t) : c;
      }, t.size = function (r) {
        return arguments.length ? (n = +r[0], e = +r[1], t) : [n, e];
      }, t.padding = function (n) {
        return arguments.length ? (i = +n, t) : i;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.id;
    }function o(t) {
      return t.parentId;
    }var i = e(122),
        c = e(121),
        u = "$",
        a = { depth: -1 },
        f = {};n.a = function () {
      function t(t) {
        var r,
            o,
            i,
            s,
            l,
            h,
            p,
            b = t.length,
            v = new Array(b),
            g = {};for (o = 0; o < b; ++o) {
          r = t[o], l = v[o] = new c.a(r), null != (h = n(r, o, t)) && (h += "") && (g[p = u + (l.id = h)] = p in g ? f : l);
        }for (o = 0; o < b; ++o) {
          if (l = v[o], null != (h = e(t[o], o, t)) && (h += "")) {
            if (!(s = g[u + h])) throw new Error("missing: " + h);if (s === f) throw new Error("ambiguous: " + h);s.children ? s.children.push(l) : s.children = [l], l.parent = s;
          } else {
            if (i) throw new Error("multiple roots");i = l;
          }
        }if (!i) throw new Error("no root");if (i.parent = a, i.eachBefore(function (t) {
          t.depth = t.parent.depth + 1, --b;
        }).eachBefore(c.b), i.parent = null, b > 0) throw new Error("cycle");return i;
      }var n = r,
          e = o;return t.id = function (e) {
        return arguments.length ? (n = Object(i.b)(e), t) : n;
      }, t.parentId = function (n) {
        return arguments.length ? (e = Object(i.b)(n), t) : e;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return t.parent === n.parent ? 1 : 2;
    }function o(t) {
      var n = t.children;return n ? n[0] : t.t;
    }function i(t) {
      var n = t.children;return n ? n[n.length - 1] : t.t;
    }function c(t, n, e) {
      var r = e / (n.i - t.i);n.c -= r, n.s += e, t.c += r, n.z += e, n.m += e;
    }function u(t, n, e) {
      return t.a.parent === n.parent ? t.a : e;
    }function a(t, n) {
      this._ = t, this.parent = null, this.children = null, this.A = null, this.a = this, this.z = 0, this.m = 0, this.c = 0, this.s = 0, this.t = null, this.i = n;
    }var f = e(121);a.prototype = Object.create(f.a.prototype), n.a = function () {
      function t(t) {
        var r = function (t) {
          for (var n, e, r, o, i, c = new a(t, 0), u = [c]; n = u.pop();) {
            if (r = n._.children) for (n.children = new Array(i = r.length), o = i - 1; o >= 0; --o) {
              u.push(e = n.children[o] = new a(r[o], o)), e.parent = n;
            }
          }return (c.parent = new a(null, 0)).children = [c], c;
        }(t);if (r.eachAfter(n), r.parent.m = -r.z, r.eachBefore(e), p) t.eachBefore(f);else {
          var o = t,
              i = t,
              c = t;t.eachBefore(function (t) {
            t.x < o.x && (o = t), t.x > i.x && (i = t), t.depth > c.depth && (c = t);
          });var u = o === i ? 1 : s(o, i) / 2,
              b = u - o.x,
              v = l / (i.x + u + b),
              g = h / (c.depth || 1);t.eachBefore(function (t) {
            t.x = (t.x + b) * v, t.y = t.depth * g;
          });
        }return t;
      }function n(t) {
        var n = t.children,
            e = t.parent.children,
            r = t.i ? e[t.i - 1] : null;if (n) {
          !function (t) {
            for (var n, e = 0, r = 0, o = t.children, i = o.length; --i >= 0;) {
              (n = o[i]).z += e, n.m += e, e += n.s + (r += n.c);
            }
          }(t);var a = (n[0].z + n[n.length - 1].z) / 2;r ? (t.z = r.z + s(t._, r._), t.m = t.z - a) : t.z = a;
        } else r && (t.z = r.z + s(t._, r._));t.parent.A = function (t, n, e) {
          if (n) {
            for (var r, a = t, f = t, l = n, h = a.parent.children[0], p = a.m, b = f.m, v = l.m, g = h.m; l = i(l), a = o(a), l && a;) {
              h = o(h), (f = i(f)).a = t, (r = l.z + v - a.z - p + s(l._, a._)) > 0 && (c(u(l, t, e), t, r), p += r, b += r), v += l.m, p += a.m, g += h.m, b += f.m;
            }l && !i(f) && (f.t = l, f.m += v - b), a && !o(h) && (h.t = a, h.m += p - g, e = t);
          }return e;
        }(t, r, t.parent.A || e[0]);
      }function e(t) {
        t._.x = t.z + t.parent.m, t.m += t.parent.m;
      }function f(t) {
        t.x *= l, t.y = t.depth * h;
      }var s = r,
          l = 1,
          h = 1,
          p = null;return t.separation = function (n) {
        return arguments.length ? (s = n, t) : s;
      }, t.size = function (n) {
        return arguments.length ? (p = !1, l = +n[0], h = +n[1], t) : p ? null : [l, h];
      }, t.nodeSize = function (n) {
        return arguments.length ? (p = !0, l = +n[0], h = +n[1], t) : p ? [l, h] : null;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(245),
        o = e(123),
        i = e(122),
        c = e(244);n.a = function () {
      function t(t) {
        return t.x0 = t.y0 = 0, t.x1 = a, t.y1 = f, t.eachBefore(n), s = [0], u && t.eachBefore(r.a), t;
      }function n(t) {
        var n = s[t.depth],
            r = t.x0 + n,
            o = t.y0 + n,
            i = t.x1 - n,
            c = t.y1 - n;i < r && (r = i = (r + i) / 2), c < o && (o = c = (o + c) / 2), t.x0 = r, t.y0 = o, t.x1 = i, t.y1 = c, t.children && (n = s[t.depth + 1] = l(t) / 2, r += v(t) - n, o += h(t) - n, i -= p(t) - n, c -= b(t) - n, i < r && (r = i = (r + i) / 2), c < o && (o = c = (o + c) / 2), e(t, r, o, i, c));
      }var e = o.a,
          u = !1,
          a = 1,
          f = 1,
          s = [0],
          l = c.a,
          h = c.a,
          p = c.a,
          b = c.a,
          v = c.a;return t.round = function (n) {
        return arguments.length ? (u = !!n, t) : u;
      }, t.size = function (n) {
        return arguments.length ? (a = +n[0], f = +n[1], t) : [a, f];
      }, t.tile = function (n) {
        return arguments.length ? (e = Object(i.b)(n), t) : e;
      }, t.padding = function (n) {
        return arguments.length ? t.paddingInner(n).paddingOuter(n) : t.paddingInner();
      }, t.paddingInner = function (n) {
        return arguments.length ? (l = "function" == typeof n ? n : Object(c.b)(+n), t) : l;
      }, t.paddingOuter = function (n) {
        return arguments.length ? t.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n) : t.paddingTop();
      }, t.paddingTop = function (n) {
        return arguments.length ? (h = "function" == typeof n ? n : Object(c.b)(+n), t) : h;
      }, t.paddingRight = function (n) {
        return arguments.length ? (p = "function" == typeof n ? n : Object(c.b)(+n), t) : p;
      }, t.paddingBottom = function (n) {
        return arguments.length ? (b = "function" == typeof n ? n : Object(c.b)(+n), t) : b;
      }, t.paddingLeft = function (n) {
        return arguments.length ? (v = "function" == typeof n ? n : Object(c.b)(+n), t) : v;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n, e, r, o) {
      function i(t, n, e, r, o, c, u) {
        if (t >= n - 1) {
          var f = a[t];return f.x0 = r, f.y0 = o, f.x1 = c, void (f.y1 = u);
        }for (var l = s[t], h = e / 2 + l, p = t + 1, b = n - 1; p < b;) {
          var v = p + b >>> 1;s[v] < h ? p = v + 1 : b = v;
        }h - s[p - 1] < s[p] - h && t + 1 < p && --p;var g = s[p] - l,
            d = e - g;if (c - r > u - o) {
          var j = (r * d + c * g) / e;i(t, p, g, r, o, j, u), i(p, n, d, j, o, c, u);
        } else {
          var O = (o * d + u * g) / e;i(t, p, g, r, o, c, O), i(p, n, d, r, O, c, u);
        }
      }var c,
          u,
          a = t.children,
          f = a.length,
          s = new Array(f + 1);for (s[0] = u = c = 0; c < f; ++c) {
        s[c + 1] = u += a[c].value;
      }i(0, f, t.value, n, e, r, o);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(49),
        o = e(73);n.a = function (t, n, e, i, c) {
      (1 & t.depth ? o.a : r.a)(t, n, e, i, c);
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(49),
        o = e(73),
        i = e(123);n.a = function t(n) {
      function e(t, e, c, u, a) {
        if ((f = t._squarify) && f.ratio === n) for (var f, s, l, h, p, b = -1, v = f.length, g = t.value; ++b < v;) {
          for (l = (s = f[b]).children, h = s.value = 0, p = l.length; h < p; ++h) {
            s.value += l[h].value;
          }s.dice ? Object(r.a)(s, e, c, u, c += (a - c) * s.value / g) : Object(o.a)(s, e, c, e += (u - e) * s.value / g, a), g -= s.value;
        } else t._squarify = f = Object(i.c)(n, t, e, c, u, a), f.ratio = n;
      }return e.ratio = function (n) {
        return t((n = +n) > 1 ? n : 1);
      }, e;
    }(i.b);
  }, function (t, n, e) {
    function r(t, n, e) {
      var r = n.object;if (!o(r)) throw new TypeError("Invalid object: must be a string!");var u = i(t, t.objects[r]);return c(u, n, e);
    }var o = e(7),
        i = e(614).feature,
        c = e(240),
        u = e(2).registerConnector;u("topojson", r), u("TopoJSON", r);
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(246);e.d(n, "bbox", function () {
      return r.a;
    });var o = e(125);e.d(n, "feature", function () {
      return o.a;
    });var i = e(616);e.d(n, "mesh", function () {
      return i.a;
    }), e.d(n, "meshArcs", function () {
      return i.b;
    });var c = e(617);e.d(n, "merge", function () {
      return c.a;
    }), e.d(n, "mergeArcs", function () {
      return c.b;
    });var u = e(618);e.d(n, "neighbors", function () {
      return u.a;
    });var a = e(620);e.d(n, "quantize", function () {
      return a.a;
    });var f = e(124);e.d(n, "transform", function () {
      return f.a;
    });var s = e(249);e.d(n, "untransform", function () {
      return s.a;
    });
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      for (var e, r = t.length, o = r - n; o < --r;) {
        e = t[o], t[o++] = t[r], t[r] = e;
      }
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n, e) {
      var r, o, c;if (arguments.length > 1) r = function (t, n, e) {
        function r(t) {
          var n = t < 0 ? ~t : t;(f[n] || (f[n] = [])).push({ i: t, g: u });
        }function o(t) {
          t.forEach(r);
        }function i(t) {
          t.forEach(o);
        }function c(t) {
          switch (u = t, t.type) {case "GeometryCollection":
              t.geometries.forEach(c);break;case "LineString":
              o(t.arcs);break;case "MultiLineString":case "Polygon":
              i(t.arcs);break;case "MultiPolygon":
              !function (t) {
                t.forEach(i);
              }(t.arcs);}
        }var u,
            a = [],
            f = [];return c(n), f.forEach(null == e ? function (t) {
          a.push(t[0].i);
        } : function (t) {
          e(t[0].g, t[t.length - 1].g) && a.push(t[0].i);
        }), a;
      }(0, n, e);else for (o = 0, r = new Array(c = t.arcs.length); o < c; ++o) {
        r[o] = o;
      }return { type: "MultiLineString", arcs: Object(i.a)(t, r) };
    }n.b = r;var o = e(125),
        i = e(248);n.a = function (t) {
      return Object(o.b)(t, r.apply(this, arguments));
    };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      function e(t) {
        switch (t.type) {case "GeometryCollection":
            t.geometries.forEach(e);break;case "Polygon":
            r(t.arcs);break;case "MultiPolygon":
            t.arcs.forEach(r);}
      }function r(t) {
        t.forEach(function (n) {
          n.forEach(function (n) {
            (u[n = n < 0 ? ~n : n] || (u[n] = [])).push(t);
          });
        }), a.push(t);
      }function c(n) {
        return function (t) {
          for (var n, e = -1, r = t.length, o = t[r - 1], i = 0; ++e < r;) {
            n = o, o = t[e], i += n[0] * o[1] - n[1] * o[0];
          }return Math.abs(i);
        }(Object(o.b)(t, { type: "Polygon", arcs: [n] }).coordinates[0]);
      }var u = {},
          a = [],
          f = [];return n.forEach(e), a.forEach(function (t) {
        if (!t._) {
          var n = [],
              e = [t];for (t._ = 1, f.push(n); t = e.pop();) {
            n.push(t), t.forEach(function (t) {
              t.forEach(function (t) {
                u[t < 0 ? ~t : t].forEach(function (t) {
                  t._ || (t._ = 1, e.push(t));
                });
              });
            });
          }
        }
      }), a.forEach(function (t) {
        delete t._;
      }), { type: "MultiPolygon", arcs: f.map(function (n) {
          var e,
              r = [];if (n.forEach(function (t) {
            t.forEach(function (t) {
              t.forEach(function (t) {
                u[t < 0 ? ~t : t].length < 2 && r.push(t);
              });
            });
          }), r = Object(i.a)(t, r), (e = r.length) > 1) for (var o, a, f = 1, s = c(r[0]); f < e; ++f) {
            (o = c(r[f])) > s && (a = r[0], r[0] = r[f], r[f] = a, s = o);
          }return r;
        }) };
    }n.b = r;var o = e(125),
        i = e(248);n.a = function (t) {
      return Object(o.b)(t, r.apply(this, arguments));
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(619);n.a = function (t) {
      function n(t, n) {
        t.forEach(function (t) {
          t < 0 && (t = ~t);var e = i[t];e ? e.push(n) : i[t] = [n];
        });
      }function e(t, e) {
        t.forEach(function (t) {
          n(t, e);
        });
      }function o(t, n) {
        "GeometryCollection" === t.type ? t.geometries.forEach(function (t) {
          o(t, n);
        }) : t.type in u && u[t.type](t.arcs, n);
      }var i = {},
          c = t.map(function () {
        return [];
      }),
          u = { LineString: n, MultiLineString: e, Polygon: e, MultiPolygon: function MultiPolygon(t, n) {
          t.forEach(function (t) {
            e(t, n);
          });
        } };t.forEach(o);for (var a in i) {
        for (var f = i[a], s = f.length, l = 0; l < s; ++l) {
          for (var h = l + 1; h < s; ++h) {
            var p,
                b = f[l],
                v = f[h];(p = c[b])[a = Object(r.a)(p, v)] !== v && p.splice(a, 0, v), (p = c[v])[a = Object(r.a)(p, b)] !== b && p.splice(a, 0, b);
          }
        }
      }return c;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      for (var e = 0, r = t.length; e < r;) {
        var o = e + r >>> 1;t[o] < n ? e = o + 1 : r = o;
      }return e;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(246),
        o = e(249);n.a = function (t, n) {
      function e(t) {
        return p(t);
      }function i(t) {
        var n;switch (t.type) {case "GeometryCollection":
            n = { type: "GeometryCollection", geometries: t.geometries.map(i) };break;case "Point":
            n = { type: "Point", coordinates: e(t.coordinates) };break;case "MultiPoint":
            n = { type: "MultiPoint", coordinates: t.coordinates.map(e) };break;default:
            return t;}return null != t.id && (n.id = t.id), null != t.bbox && (n.bbox = t.bbox), null != t.properties && (n.properties = t.properties), n;
      }if (t.transform) throw new Error("already quantized");if (n && n.scale) l = t.bbox;else {
        if (!((c = Math.floor(n)) >= 2)) throw new Error("n must be â‰¥2");var c,
            u = (l = t.bbox || Object(r.a)(t))[0],
            a = l[1],
            f = l[2],
            s = l[3];n = { scale: [f - u ? (f - u) / (c - 1) : 1, s - a ? (s - a) / (c - 1) : 1], translate: [u, a] };
      }var l,
          h,
          p = Object(o.a)(n),
          b = t.objects,
          v = {};for (h in b) {
        v[h] = i(b[h]);
      }return { type: "Topology", bbox: l, transform: n, objects: v, arcs: t.arcs.map(function (t) {
          var n,
              e = 0,
              r = 1,
              o = t.length,
              i = new Array(o);for (i[0] = p(t[0], 0); ++e < o;) {
            ((n = p(t[e], e))[0] || n[1]) && (i[r++] = n);
          }return 1 === r && (i[r++] = [0, 0]), i.length = r, i;
        }) };
    };
  }, function (t, n, e) {
    (0, e(2).registerTransform)("default", function (t) {
      return t;
    });
  }, function (t, n, e) {
    (0, e(2).registerTransform)("filter", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};t.rows = t.rows.filter(n.callback || function (t) {
        return !!t;
      });
    });
  }, function (t, n, e) {
    var r = e(5),
        o = e(624),
        i = e(70),
        c = e(2).registerTransform,
        u = e(6).getFields,
        a = { fields: [], key: "key", retains: [], value: "value" };c("fold", function (t, n) {
      var e = t.getColumnNames();n = r({}, a, n);var c = u(n);0 === c.length && (console.warn("warning: option fields is not specified, will fold all columns."), c = e);var f = n.key,
          s = n.value,
          l = n.retains;0 === l.length && (l = o(e, c));var h = [];t.rows.forEach(function (t) {
        c.forEach(function (n) {
          var e = i(t, l);e[f] = n, e[s] = t[n], h.push(e);
        });
      }), t.rows = h;
    });
  }, function (t, n, e) {
    var r = e(625),
        o = e(71),
        i = e(79),
        c = e(629),
        u = i(function (t, n) {
      return c(t) ? r(t, o(n, 1, c, !0)) : [];
    });t.exports = u;
  }, function (t, n, e) {
    var r = e(104),
        o = e(250),
        i = e(251),
        c = e(69),
        u = e(84),
        a = e(105),
        f = 200;t.exports = function (t, n, e, s) {
      var l = -1,
          h = o,
          p = !0,
          b = t.length,
          v = [],
          g = n.length;if (!b) return v;e && (n = c(n, u(e))), s ? (h = i, p = !1) : n.length >= f && (h = a, p = !1, n = new r(n));t: for (; ++l < b;) {
        var d = t[l],
            j = null == e ? d : e(d);if (d = s || 0 !== d ? d : 0, p && j == j) {
          for (var O = g; O--;) {
            if (n[O] === j) continue t;
          }v.push(d);
        } else h(n, j, s) || v.push(d);
      }return v;
    };
  }, function (t, n, e) {
    var r = e(202),
        o = e(627),
        i = e(628);t.exports = function (t, n, e) {
      return n == n ? i(t, n, e) : r(t, o, e);
    };
  }, function (t, n) {
    t.exports = function (t) {
      return t != t;
    };
  }, function (t, n) {
    t.exports = function (t, n, e) {
      for (var r = e - 1, o = t.length; ++r < o;) {
        if (t[r] === n) return r;
      }return -1;
    };
  }, function (t, n, e) {
    var r = e(20),
        o = e(15);t.exports = function (t) {
      return o(t) && r(t);
    };
  }, function (t, n, e) {
    (0, e(2).registerTransform)("map", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};t.rows = t.rows.map(n.callback || function (t) {
        return t;
      });
    });
  }, function (t, n, e) {
    function r(t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};n = o({}, a, n), t.rows = i(c(t.rows, n.groupBy, n.orderBy));
    }var o = e(5),
        i = e(114),
        c = e(18),
        u = e(2).registerTransform,
        a = { groupBy: [], orderBy: [] };u("partition", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};n = o({}, a, n), t.rows = c(t.rows, n.groupBy, n.orderBy);
    }), u("group", r), u("groups", r);
  }, function (t, n, e) {
    var r = e(5),
        o = e(11),
        i = e(7),
        c = e(30).sum,
        u = e(18),
        a = e(2).registerTransform,
        f = e(6).getField,
        s = { groupBy: [], as: "_percent" };a("percent", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};n = r({}, s, n);var e = f(n),
          a = n.dimension,
          l = n.groupBy,
          h = n.as;if (!i(a)) throw new TypeError("Invalid dimension: must be a string!");if (Array.isArray(h) && (console.warn("Invalid as: must be a string, will use the first element of the array specified."), h = h[0]), !i(h)) throw new TypeError("Invalid as: must be a string!");var p = t.rows,
          b = [],
          v = u(p, l);o(v, function (t) {
        var n = c(t.map(function (t) {
          return t[e];
        })),
            r = u(t, [a]);o(r, function (t) {
          var r = c(t.map(function (t) {
            return t[e];
          })),
              o = t[0],
              i = o[a];o[e] = r, o[a] = i, o[h] = r / n, b.push(o);
        });
      }), t.rows = b;
    });
  }, function (t, n, e) {
    var r = e(70),
        o = e(2).registerTransform,
        i = e(6).getFields;o("pick", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          e = i(n, t.getColumnNames());t.rows = t.rows.map(function (t) {
        return r(t, e);
      });
    });
  }, function (t, n, e) {
    var r = e(5),
        o = e(11),
        i = e(7),
        c = e(18),
        u = e(2).registerTransform,
        a = e(6).getField,
        f = { groupBy: [], as: "_proportion" };u("proportion", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};n = r({}, f, n);var e = a(n),
          u = n.dimension,
          s = n.groupBy,
          l = n.as;if (!i(u)) throw new TypeError("Invalid dimension: must be a string!");if (Array.isArray(l) && (console.warn("Invalid as: must be a string, will use the first element of the array specified."), l = l[0]), !i(l)) throw new TypeError("Invalid as: must be a string!");var h = t.rows,
          p = [],
          b = c(h, s);o(b, function (t) {
        var n = t.length,
            r = c(t, [u]);o(r, function (t) {
          var r = t.length,
              o = t[0],
              i = o[u];o[e] = r, o[u] = i, o[l] = r / n, p.push(o);
        });
      }), t.rows = p;
    });
  }, function (t, n, e) {
    function r(t) {
      var n = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).map || {},
          e = {};i(n) && o(n, function (t, n) {
        c(t) && c(n) && (e[n] = t);
      }), t.rows.forEach(function (t) {
        o(n, function (n, e) {
          var r = t[e];delete t[e], t[n] = r;
        });
      });
    }var o = e(11),
        i = e(636),
        c = e(7),
        u = e(2).registerTransform;u("rename", r), u("rename-fields", r);
  }, function (t, n, e) {
    var r = e(19),
        o = e(102),
        i = e(15),
        c = "[object Object]",
        u = Function.prototype,
        a = Object.prototype,
        f = u.toString,
        s = a.hasOwnProperty,
        l = f.call(Object);t.exports = function (t) {
      if (!i(t) || r(t) != c) return !1;var n = o(t);if (null === n) return !0;var e = s.call(n, "constructor") && n.constructor;return "function" == typeof e && e instanceof e && f.call(e) == l;
    };
  }, function (t, n, e) {
    var r = e(252);(0, e(2).registerTransform)("reverse", function (t) {
      t.rows = r(t.rows);
    });
  }, function (t, n, e) {
    (0, e(2).registerTransform)("sort", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          e = t.getColumnName(0);t.rows.sort(n.callback || function (t, n) {
        return t[e] - n[e];
      });
    });
  }, function (t, n, e) {
    function r(t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          e = u(n, [t.getColumnName(0)]);if (!Array.isArray(e)) throw new TypeError("Invalid fields: must be an array with strings!");t.rows = i(t.rows, e);var r = n.order;if (r && -1 === a.indexOf(r)) throw new TypeError("Invalid order: " + r + " must be one of " + a.join(", "));"DESC" === r && (t.rows = o(t.rows));
    }var o = e(252),
        i = e(640),
        c = e(2).registerTransform,
        u = e(6).getFields,
        a = ["ASC", "DESC"];c("sort-by", r), c("sortBy", r);
  }, function (t, n, e) {
    var r = e(71),
        o = e(641),
        i = e(79),
        c = e(141),
        u = i(function (t, n) {
      if (null == t) return [];var e = n.length;return e > 1 && c(t, n[0], n[1]) ? n = [] : e > 2 && c(n[0], n[1], n[2]) && (n = [n[0]]), o(t, r(n, 1), []);
    });t.exports = u;
  }, function (t, n, e) {
    var r = e(69),
        o = e(67),
        i = e(642),
        c = e(643),
        u = e(84),
        a = e(644),
        f = e(37);t.exports = function (t, n, e) {
      var s = -1;n = r(n.length ? n : [f], u(o));var l = i(t, function (t, e, o) {
        return { criteria: r(n, function (n) {
            return n(t);
          }), index: ++s, value: t };
      });return c(l, function (t, n) {
        return a(t, n, e);
      });
    };
  }, function (t, n, e) {
    var r = e(220),
        o = e(20);t.exports = function (t, n) {
      var e = -1,
          i = o(t) ? Array(t.length) : [];return r(t, function (t, r, o) {
        i[++e] = n(t, r, o);
      }), i;
    };
  }, function (t, n) {
    t.exports = function (t, n) {
      var e = t.length;for (t.sort(n); e--;) {
        t[e] = t[e].value;
      }return t;
    };
  }, function (t, n, e) {
    var r = e(645);t.exports = function (t, n, e) {
      for (var o = -1, i = t.criteria, c = n.criteria, u = i.length, a = e.length; ++o < u;) {
        var f = r(i[o], c[o]);if (f) return o >= a ? f : f * ("desc" == e[o] ? -1 : 1);
      }return t.index - n.index;
    };
  }, function (t, n, e) {
    var r = e(43);t.exports = function (t, n) {
      if (t !== n) {
        var e = void 0 !== t,
            o = null === t,
            i = t == t,
            c = r(t),
            u = void 0 !== n,
            a = null === n,
            f = n == n,
            s = r(n);if (!a && !s && !c && t > n || c && u && f && !a && !s || o && u && f || !e && f || !i) return 1;if (!o && !c && !s && t < n || s && e && i && !o && !c || a && e && i || !u && i || !f) return -1;
      }return 0;
    };
  }, function (t, n, e) {
    var r = e(2).registerTransform,
        o = e(6).getFields;r("subset", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          e = n.startRowIndex || 0,
          r = n.endRowIndex || t.rows.length - 1,
          i = o(n, t.getColumnNames());t.rows = t.getSubset(e, r, i);
    });
  }, function (t, n, e) {
    function r(t, n) {
      var e = t.map(function (t) {
        return t;
      });return n.forEach(function (t) {
        var n = e.indexOf(t);n > -1 && e.splice(n, 1);
      }), e;
    }function o(t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};n = i({}, f, n);var e = t.rows,
          o = n.groupBy,
          a = n.orderBy,
          s = u(e, o, a),
          l = 0,
          h = [];c(s, function (t) {
        t.length > l && (l = t.length, h = t);
      });var p = [],
          b = {};if (h.forEach(function (t) {
        var n = a.map(function (n) {
          return t[n];
        }).join("-");p.push(n), b[n] = t;
      }), "order" === n.fillBy) {
        var v = h[0],
            g = [],
            d = {};e.forEach(function (t) {
          var n = a.map(function (n) {
            return t[n];
          }).join("-");-1 === g.indexOf(n) && (g.push(n), d[n] = t);
        });r(g, p).forEach(function (t) {
          var n = {};o.forEach(function (t) {
            n[t] = v[t];
          }), a.forEach(function (e) {
            n[e] = d[t][e];
          }), e.push(n), h.push(n), p.push(t), b[t] = n;
        }), l = h.length;
      }c(s, function (t) {
        if (t !== h && t.length < l) {
          var n = t[0],
              i = [];t.forEach(function (t) {
            i.push(a.map(function (n) {
              return t[n];
            }).join("-"));
          });r(p, i).some(function (r, i) {
            if (i >= l - t.length) return !0;var c = b[r],
                u = {};return o.forEach(function (t) {
              u[t] = n[t];
            }), a.forEach(function (t) {
              u[t] = c[t];
            }), e.push(u), !1;
          });
        }
      });
    }var i = e(5),
        c = e(11),
        u = e(18),
        a = e(2).registerTransform,
        f = { fillBy: "group", groupBy: [], orderBy: [] };a("fill-rows", o), a("fillRows", o);
  }, function (t, n, e) {
    function r(t) {
      return t.filter(function (t) {
        return !a(t);
      });
    }var o = e(5),
        i = e(11),
        c = e(649),
        u = e(9),
        a = e(651),
        f = e(7),
        s = e(30),
        l = e(18),
        h = e(2).registerTransform,
        p = e(6).getField,
        b = { groupBy: [] },
        v = ["mean", "median", "max", "min"],
        g = {};v.forEach(function (t) {
      g[t] = function (n, e) {
        return s[t](e);
      };
    }), g.value = function (t, n, e) {
      return e;
    }, h("impute", function (t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          e = t.rows;n = o({}, b, n);var s = p(n),
          h = n.method,
          d = n.groupBy;if (!h) throw new TypeError("Invalid method!");if ("value" === h && !c(n, "value")) throw new TypeError("Invalid value: it is nil.");var j = r(t.getColumn(s)),
          O = l(e, d);i(O, function (t) {
        var e = r(t.map(function (t) {
          return t[s];
        }));0 === e.length && (e = j), t.forEach(function (r) {
          if (a(r[s])) if (u(h)) r[s] = h(r, e, n.value, t);else {
            if (!f(h)) throw new TypeError("Invalid method: must be a function or one of " + v.join(", "));r[s] = g[h](r, e, n.value);
          }
        });
      });
    });
  }, function (t, n, e) {
    var r = e(650),
        o = e(201);t.exports = function (t, n) {
      return null != t && o(t, n, r);
    };
  }, function (t, n) {
    var e = Object.prototype.hasOwnProperty;t.exports = function (t, n) {
      return null != t && e.call(t, n);
    };
  }, function (t, n) {
    t.exports = function (t) {
      return void 0 === t;
    };
  }, function (t, n, e) {
    function r(t, n) {
      n = o({}, g, n);var e = t.rows,
          r = n.groupBy,
          i = v(n);if (!Array.isArray(i)) throw new TypeError("Invalid fields: it must be an array with one or more strings!");var u = n.as || [];a(u) && (u = [u]);var f = n.operations;a(f) && (f = [f]);var s = [d];if (Array.isArray(f) && f.length || (console.warn('operations is not defined, will use [ "count" ] directly.'), u = f = s), 1 !== f.length || f[0] !== d) {
        if (f.length !== i.length) throw new TypeError("Invalid operations: it's length must be the same as fields!");if (u.length !== i.length) throw new TypeError("Invalid as: it's length must be the same as fields!");
      }var l = h(e, r),
          p = [];c(l, function (t) {
        var n = t[0];f.forEach(function (e, r) {
          var o = u[r],
              c = i[r];n[o] = j[e](t, c);
        }), p.push(n);
      }), t.rows = p;
    }var o = e(5),
        i = e(221),
        c = e(11),
        u = e(8),
        a = e(7),
        f = e(10),
        s = e(653),
        l = e(30),
        h = e(18),
        p = e(2).registerTransform,
        b = e(119).STATISTICS_METHODS,
        v = e(6).getFields,
        g = { as: [], fields: [], groupBy: [], operations: [] },
        d = "count",
        j = { count: function count(t) {
        return t.length;
      }, distinct: function distinct(t, n) {
        return s(t.map(function (t) {
          return t[n];
        })).length;
      } };b.forEach(function (t) {
      j[t] = function (n, e) {
        var r = n.map(function (t) {
          return t[e];
        });return u(r) && u(r[0]) && (r = i(r)), l[t](r);
      };
    }), j.average = j.mean, p("aggregate", r), p("summary", r), t.exports = { VALID_AGGREGATES: f(j) };
  }, function (t, n, e) {
    var r = e(654);t.exports = function (t) {
      return t && t.length ? r(t) : [];
    };
  }, function (t, n, e) {
    var r = e(104),
        o = e(250),
        i = e(251),
        c = e(105),
        u = e(655),
        a = e(66),
        f = 200;t.exports = function (t, n, e) {
      var s = -1,
          l = o,
          h = t.length,
          p = !0,
          b = [],
          v = b;if (e) p = !1, l = i;else if (h >= f) {
        var g = n ? null : u(t);if (g) return a(g);p = !1, l = c, v = new r();
      } else v = n ? [] : b;t: for (; ++s < h;) {
        var d = t[s],
            j = n ? n(d) : d;if (d = e || 0 !== d ? d : 0, p && j == j) {
          for (var O = v.length; O--;) {
            if (v[O] === j) continue t;
          }n && v.push(j), b.push(d);
        } else l(v, j, e) || (v !== b && v.push(j), b.push(d));
      }return b;
    };
  }, function (t, n, e) {
    var r = e(189),
        o = e(656),
        i = e(66),
        c = r && 1 / i(new r([, -0]))[1] == 1 / 0 ? function (t) {
      return new r(t);
    } : o;t.exports = c;
  }, function (t, n) {
    t.exports = function () {};
  }, function (t, n, e) {
    var r = e(5),
        o = e(126),
        i = e(658),
        c = e(127),
        u = e(2).registerTransform,
        a = e(6).getFields,
        f = e(128).silverman,
        s = { as: ["x", "y"], method: "linear", order: 2, precision: 2 },
        l = ["linear", "exponential", "logarithmic", "power", "polynomial"];u("regression", function (t, n) {
      n = r({}, s, n);var e = a(n);if (!Array.isArray(e) || 2 !== e.length) throw new TypeError("invalid fields: must be an array of 2 strings.");var u = e[0],
          h = e[1],
          p = n.method;if (-1 === l.indexOf(p)) throw new TypeError("invalid method: " + p + ". Must be one of " + l.join(", "));var b = t.rows.map(function (t) {
        return [t[u], t[h]];
      }),
          v = i[p](b, n),
          g = n.extent;Array.isArray(g) && 2 === g.length || (g = t.range(u));var d = n.bandwidth;(!o(d) || d <= 0) && (d = f(t.getColumn(u)));var j = c(g, d),
          O = [],
          y = n.as,
          m = y[0],
          x = y[1];j.forEach(function (t) {
        var n = {},
            e = v.predict(t),
            r = e[0],
            o = e[1];n[m] = r, n[x] = o, isFinite(o) && O.push(n);
      }), t.rows = O;
    }), t.exports = { REGRESSION_METHODS: l };
  }, function (t, n, e) {
    var r, o, i;!function (e, c) {
      o = [t], void 0 !== (i = "function" == typeof (r = c) ? r.apply(n, o) : r) && (t.exports = i);
    }(0, function (t) {
      "use strict";
      function n(t, n) {
        var e = [],
            r = [];t.forEach(function (t, o) {
          null !== t[1] && (r.push(t), e.push(n[o]));
        });var o = r.reduce(function (t, n) {
          return t + n[1];
        }, 0) / r.length,
            i = r.reduce(function (t, n) {
          var e = n[1] - o;return t + e * e;
        }, 0);return 1 - r.reduce(function (t, n, r) {
          var o = e[r],
              i = n[1] - o[1];return t + i * i;
        }, 0) / i;
      }function e(t, n) {
        var e = Math.pow(10, n);return Math.round(t * e) / e;
      }var r = Object.assign || function (t) {
        for (var n = 1; n < arguments.length; n++) {
          var e = arguments[n];for (var r in e) {
            Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);
          }
        }return t;
      },
          o = { order: 2, precision: 2, period: null },
          i = { linear: function linear(t, r) {
          for (var o = [0, 0, 0, 0, 0], i = 0, c = 0; c < t.length; c++) {
            null !== t[c][1] && (i++, o[0] += t[c][0], o[1] += t[c][1], o[2] += t[c][0] * t[c][0], o[3] += t[c][0] * t[c][1], o[4] += t[c][1] * t[c][1]);
          }var u = i * o[2] - o[0] * o[0],
              a = i * o[3] - o[0] * o[1],
              f = 0 === u ? 0 : e(a / u, r.precision),
              s = e(o[1] / i - f * o[0] / i, r.precision),
              l = function l(t) {
            return [e(t, r.precision), e(f * t + s, r.precision)];
          },
              h = t.map(function (t) {
            return l(t[0]);
          });return { points: h, predict: l, equation: [f, s], r2: e(n(t, h), r.precision), string: 0 === s ? "y = " + f + "x" : "y = " + f + "x + " + s };
        }, exponential: function exponential(t, r) {
          for (var o = [0, 0, 0, 0, 0, 0], i = 0; i < t.length; i++) {
            null !== t[i][1] && (o[0] += t[i][0], o[1] += t[i][1], o[2] += t[i][0] * t[i][0] * t[i][1], o[3] += t[i][1] * Math.log(t[i][1]), o[4] += t[i][0] * t[i][1] * Math.log(t[i][1]), o[5] += t[i][0] * t[i][1]);
          }var c = o[1] * o[2] - o[5] * o[5],
              u = Math.exp((o[2] * o[3] - o[5] * o[4]) / c),
              a = (o[1] * o[4] - o[5] * o[3]) / c,
              f = e(u, r.precision),
              s = e(a, r.precision),
              l = function l(t) {
            return [e(t, r.precision), e(f * Math.exp(s * t), r.precision)];
          },
              h = t.map(function (t) {
            return l(t[0]);
          });return { points: h, predict: l, equation: [f, s], string: "y = " + f + "e^(" + s + "x)", r2: e(n(t, h), r.precision) };
        }, logarithmic: function logarithmic(t, r) {
          for (var o = [0, 0, 0, 0], i = t.length, c = 0; c < i; c++) {
            null !== t[c][1] && (o[0] += Math.log(t[c][0]), o[1] += t[c][1] * Math.log(t[c][0]), o[2] += t[c][1], o[3] += Math.pow(Math.log(t[c][0]), 2));
          }var u = e((i * o[1] - o[2] * o[0]) / (i * o[3] - o[0] * o[0]), r.precision),
              a = e((o[2] - u * o[0]) / i, r.precision),
              f = function f(t) {
            return [e(t, r.precision), e(e(a + u * Math.log(t), r.precision), r.precision)];
          },
              s = t.map(function (t) {
            return f(t[0]);
          });return { points: s, predict: f, equation: [a, u], string: "y = " + a + " + " + u + " ln(x)", r2: e(n(t, s), r.precision) };
        }, power: function power(t, r) {
          for (var o = [0, 0, 0, 0, 0], i = t.length, c = 0; c < i; c++) {
            null !== t[c][1] && (o[0] += Math.log(t[c][0]), o[1] += Math.log(t[c][1]) * Math.log(t[c][0]), o[2] += Math.log(t[c][1]), o[3] += Math.pow(Math.log(t[c][0]), 2));
          }var u = (i * o[1] - o[0] * o[2]) / (i * o[3] - Math.pow(o[0], 2)),
              a = (o[2] - u * o[0]) / i,
              f = e(Math.exp(a), r.precision),
              s = e(u, r.precision),
              l = function l(t) {
            return [e(t, r.precision), e(e(f * Math.pow(t, s), r.precision), r.precision)];
          },
              h = t.map(function (t) {
            return l(t[0]);
          });return { points: h, predict: l, equation: [f, s], string: "y = " + f + "x^" + s, r2: e(n(t, h), r.precision) };
        }, polynomial: function polynomial(t, r) {
          for (var o = [], i = [], c = 0, u = 0, a = t.length, f = r.order + 1, s = 0; s < f; s++) {
            for (var l = 0; l < a; l++) {
              null !== t[l][1] && (c += Math.pow(t[l][0], s) * t[l][1]);
            }o.push(c), c = 0;for (var h = [], p = 0; p < f; p++) {
              for (var b = 0; b < a; b++) {
                null !== t[b][1] && (u += Math.pow(t[b][0], s + p));
              }h.push(u), u = 0;
            }i.push(h);
          }i.push(o);for (var v = function (t, n) {
            for (var e = t, r = t.length - 1, o = [n], i = 0; i < r; i++) {
              for (var c = i, u = i + 1; u < r; u++) {
                Math.abs(e[i][u]) > Math.abs(e[i][c]) && (c = u);
              }for (var a = i; a < r + 1; a++) {
                var f = e[a][i];e[a][i] = e[a][c], e[a][c] = f;
              }for (var s = i + 1; s < r; s++) {
                for (var l = r; l >= i; l--) {
                  e[l][s] -= e[l][i] * e[i][s] / e[i][i];
                }
              }
            }for (var h = r - 1; h >= 0; h--) {
              for (var p = 0, b = h + 1; b < r; b++) {
                p += e[b][h] * o[b];
              }o[h] = (e[r][h] - p) / e[h][h];
            }return o;
          }(i, f).map(function (t) {
            return e(t, r.precision);
          }), g = function g(t) {
            return [e(t, r.precision), e(v.reduce(function (n, e, r) {
              return n + e * Math.pow(t, r);
            }, 0), r.precision)];
          }, d = t.map(function (t) {
            return g(t[0]);
          }), j = "y = ", O = v.length - 1; O >= 0; O--) {
            j += O > 1 ? v[O] + "x^" + O + " + " : 1 === O ? v[O] + "x + " : v[O];
          }return { string: j, points: d, predict: g, equation: [].concat(function (t) {
              if (Array.isArray(t)) {
                for (var n = 0, e = Array(t.length); n < t.length; n++) {
                  e[n] = t[n];
                }return e;
              }return Array.from(t);
            }(v)).reverse(), r2: e(n(t, d), r.precision) };
        } };t.exports = Object.keys(i).reduce(function (t, n) {
        return r({ _round: e }, t, function (t, n, e) {
          return n in t ? Object.defineProperty(t, n, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : t[n] = e, t;
        }({}, n, function (t, e) {
          return i[n](t, r({}, o, e));
        }));
      }, {});
    });
  }, function (t, n, e) {
    function r(t, n, e, r) {
      return Math.sqrt((t - e) * (t - e) + (n - r) * (n - r));
    }function o(t, n, e) {
      var r = t - e;n /= 2;var o = Math.floor(r / n);return [n * (o + (1 === Math.abs(o % 2) ? 1 : 0)) + e, n * (o + (1 === Math.abs(o % 2) ? 0 : 1)) + e];
    }function i(t, n) {
      n = c({}, s, n);var e = f(n);if (!Array.isArray(e) || 2 !== e.length) throw new TypeError("Invalid fields: it must be an array with 2 strings!");var i = e[0],
          a = e[1],
          h = t.range(i),
          b = t.range(a),
          v = h[1] - h[0],
          g = b[1] - b[0],
          d = n.binWidth || [];if (2 !== d.length) {
        var j = n.bins,
            O = j[0],
            y = j[1];if (O <= 0 || y <= 0) throw new TypeError("Invalid bins: must be an array with two positive numbers (e.g. [ 30, 30 ])!");d = [v / O, g / y];
      }var m = n.offset,
          x = m[0],
          _ = m[1],
          w = 3 * d[0] / (l * d[1]),
          E = function (t) {
        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [1, 1],
            e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [0, 0],
            i = {},
            c = n[0],
            u = n[1],
            a = e[0],
            f = e[1];return t.forEach(function (t) {
          var n = t[0],
              e = t[1],
              s = o(n, c, a),
              l = s[0],
              h = s[1],
              p = o(e, u, f),
              b = p[0],
              v = p[1],
              g = void 0,
              d = void 0,
              j = void 0;r(n, e, l, b) < r(n, e, h, v) ? (g = "x" + l + "y" + b, d = l, j = b) : (g = "x" + h + "y" + v, d = h, j = v), i[g] = i[g] || { x: d, y: j, count: 0 }, i[g].count++;
        }), i;
      }(t.rows.map(function (t) {
        return [t[i], w * t[a]];
      }), [d[0], w * d[1]], [x, w * _]),
          M = n.as,
          S = M[0],
          T = M[1],
          P = M[2];if (!S || !T || !P) throw new TypeError('Invalid as: it must be an array with three elements (e.g. [ "x", "y", "count" ])!');var k = d[0] / l,
          A = p.map(function (t) {
        return [Math.sin(t) * k, -Math.cos(t) * k];
      }),
          C = [],
          B = 0;n.sizeByCount && u(E, function (t) {
        t.count > B && (B = t.count);
      }), u(E, function (t) {
        var e = t.x,
            r = t.y,
            o = t.count,
            i = {};i[P] = o, n.sizeByCount ? (i[S] = A.map(function (n) {
          return e + t.count / B * n[0];
        }), i[T] = A.map(function (n) {
          return (r + t.count / B * n[1]) / w;
        })) : (i[S] = A.map(function (t) {
          return e + t[0];
        }), i[T] = A.map(function (t) {
          return (r + t[1]) / w;
        })), C.push(i);
      }), t.rows = C;
    }var c = e(5),
        u = e(11),
        a = e(2).registerTransform,
        f = e(6).getFields,
        s = { as: ["x", "y", "count"], bins: [30, 30], offset: [0, 0], sizeByCount: !1 },
        l = Math.sqrt(3),
        h = Math.PI / 3,
        p = [0, h, 2 * h, 3 * h, 4 * h, 5 * h];a("bin.hexagon", i), a("bin.hex", i), a("hexbin", i);
  }, function (t, n, e) {
    function r(t, n) {
      n = o({}, s, n);var e = f(n),
          r = t.range(e),
          a = r[1] - r[0],
          l = n.binWidth;if (!l) {
        var h = n.bins;if (h <= 0) throw new TypeError("Invalid bins: it must be a positive number!");l = a / h;
      }var p = n.offset % l,
          b = [],
          v = n.groupBy,
          g = u(t.rows, v);i(g, function (t) {
        var r = {};t.map(function (t) {
          return t[e];
        }).forEach(function (t) {
          var n = function (t, n, e) {
            var r = t - e,
                o = Math.floor(r / n);return [o * n + e, (o + 1) * n + e];
          }(t, l, p),
              e = n[0],
              o = n[1],
              i = e + "-" + o;r[i] = r[i] || { x0: e, x1: o, count: 0 }, r[i].count++;
        });var u = n.as,
            a = u[0],
            f = u[1];if (!a || !f) throw new TypeError('Invalid as: it must be an array with 2 elements (e.g. [ "x", "count" ])!');var s = c(t[0], v);i(r, function (t) {
          var n = o({}, s);n[a] = [t.x0, t.x1], n[f] = t.count, b.push(n);
        });
      }), t.rows = b;
    }var o = e(5),
        i = e(11),
        c = e(70),
        u = e(18),
        a = e(2).registerTransform,
        f = e(6).getField,
        s = { as: ["x", "count"], bins: 30, offset: 0, groupBy: [] };a("bin.histogram", r), a("bin.dot", r);
  }, function (t, n, e) {
    var r = e(5),
        o = e(11),
        i = e(7),
        c = e(30).quantile,
        u = e(18),
        a = e(238),
        f = e(2).registerTransform,
        s = e(6).getField,
        l = { as: "_bin", groupBy: [], fraction: 4 };f("bin.quantile", function (t, n) {
      n = r({}, l, n);var e = s(n),
          f = n.as;if (!i(f)) throw new TypeError('Invalid as: it must be a string (e.g. "_bin")!');var h = n.p,
          p = n.fraction;Array.isArray(h) && 0 !== h.length || (h = a(p));var b = t.rows,
          v = n.groupBy,
          g = u(b, v),
          d = [];o(g, function (t) {
        var n = t[0],
            r = t.map(function (t) {
          return t[e];
        }),
            o = h.map(function (t) {
          return c(r, t);
        });n[f] = o, d.push(n);
      }), t.rows = d;
    });
  }, function (t, n, e) {
    function r(t, n, e) {
      var r = t - e,
          o = Math.floor(r / n);return [o * n + e, (o + 1) * n + e];
    }function o(t, n) {
      n = i({}, f, n);var e = a(n),
          o = e[0],
          u = e[1];if (!o || !u) throw new TypeError("Invalid fields: must be an array with 2 strings!");var s = t.range(o),
          l = t.range(u),
          h = s[1] - s[0],
          p = l[1] - l[0],
          b = n.binWidth || [];if (2 !== b.length) {
        var v = n.bins,
            g = v[0],
            d = v[1];if (g <= 0 || d <= 0) throw new TypeError("Invalid bins: must be an array with 2 positive numbers (e.g. [ 30, 30 ])!");b = [h / g, p / d];
      }var j = t.rows.map(function (t) {
        return [t[o], t[u]];
      }),
          O = {},
          y = n.offset,
          m = y[0],
          x = y[1];j.forEach(function (t) {
        var n = r(t[0], b[0], m),
            e = n[0],
            o = n[1],
            i = r(t[1], b[1], x),
            c = i[0],
            u = i[1],
            a = e + "-" + o + "-" + c + "-" + u;O[a] = O[a] || { x0: e, x1: o, y0: c, y1: u, count: 0 }, O[a].count++;
      });var _ = [],
          w = n.as,
          E = w[0],
          M = w[1],
          S = w[2];if (!E || !M || !S) throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ "x", "y", "count" ])!');if (n.sizeByCount) {
        var T = 0;c(O, function (t) {
          t.count > T && (T = t.count);
        }), c(O, function (t) {
          var n = t.x0,
              e = t.x1,
              r = t.y0,
              o = t.y1,
              i = t.count,
              c = i / T,
              u = (n + e) / 2,
              a = (r + o) / 2,
              f = (e - n) * c / 2,
              s = (o - r) * c / 2,
              l = u - f,
              h = u + f,
              p = a - s,
              b = a + s,
              v = {};v[E] = [l, h, h, l], v[M] = [p, p, b, b], v[S] = i, _.push(v);
        });
      } else c(O, function (t) {
        var n = {};n[E] = [t.x0, t.x1, t.x1, t.x0], n[M] = [t.y0, t.y0, t.y1, t.y1], n[S] = t.count, _.push(n);
      });t.rows = _;
    }var i = e(5),
        c = e(11),
        u = e(2).registerTransform,
        a = e(6).getFields,
        f = { as: ["x", "y", "count"], bins: [30, 30], offset: [0, 0], sizeByCount: !1 };u("bin.rectangle", o), u("bin.rect", o);
  }, function (t, n, e) {
    var r = e(5),
        o = e(7),
        i = e(2).registerTransform,
        c = e(6).getField,
        u = { as: ["_centroid_x", "_centroid_y"] };i("geo.centroid", function (t, n) {
      n = r({}, u, n);var e = c(n),
          i = n.geoView || n.geoDataView;if (o(i) && (i = t.dataSet.getView(i)), !i || "geo" !== i.dataType) throw new TypeError("Invalid geoView: must be a DataView of GEO dataType!");var a = n.as;if (!Array.isArray(a) || 2 !== a.length) throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "cX", "cY" ])!');var f = a[0],
          s = a[1];t.rows.forEach(function (t) {
        var n = i.geoFeatureByName(t[e]);n && (i._projectedAs ? (t[f] = n[i._projectedAs[2]], t[s] = n[i._projectedAs[3]]) : (t[f] = n.centroidX, t[s] = n.centroidY));
      });
    });
  }, function (t, n, e) {
    var r = e(5),
        o = e(0),
        i = e(241),
        c = e(2).registerTransform,
        u = e(204),
        a = o.geoPath,
        f = { as: ["_x", "_y", "_centroid_x", "_centroid_y"] };c("geo.projection", function (t, n) {
      if ("geo" !== t.dataType && "geo-graticule" !== t.dataType) throw new TypeError("Invalid dataView: this transform is for Geo data only!");var e = (n = r({}, f, n)).projection;if (!e) throw new TypeError("Invalid projection!");e = u(e);var o = a(e),
          c = n.as;if (!Array.isArray(c) || 4 !== c.length) throw new TypeError('Invalid as: it must be an array with 4 strings (e.g. [ "x", "y", "cX", "cY" ])!');t._projectedAs = c;var s = c[0],
          l = c[1],
          h = c[2],
          p = c[3];t.rows.forEach(function (t) {
        t[s] = [], t[l] = [];var n = o(t);if (n) {
          i(n)._path.forEach(function (n) {
            t[s].push(n[1]), t[l].push(n[2]);
          });var e = o.centroid(t);t[h] = e[0], t[p] = e[1];
        }
      }), t.rows = t.rows.filter(function (t) {
        return 0 !== t[s].length;
      });
    });
  }, function (t, n, e) {
    var r = e(5),
        o = e(7),
        i = e(2).registerTransform,
        c = e(6).getField,
        u = { as: ["_x", "_y"] };i("geo.region", function (t, n) {
      n = r({}, u, n);var e = c(n),
          i = n.geoView || n.geoDataView;if (o(i) && (i = t.dataSet.getView(i)), !i || "geo" !== i.dataType) throw new TypeError("Invalid geoView: must be a DataView of GEO dataType!");var a = n.as;if (!Array.isArray(a) || 2 !== a.length) throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');var f = a[0],
          s = a[1];t.rows.forEach(function (t) {
        var n = i.geoFeatureByName(t[e]);n && (i._projectedAs ? (t[f] = n[i._projectedAs[0]], t[s] = n[i._projectedAs[1]]) : (t[f] = n.longitude, t[s] = n.latitude));
      });
    });
  }, function (t, n, e) {
    function r(t, n) {
      n = o({}, f, n);var e = {},
          r = t.nodes,
          a = t.edges;Array.isArray(r) && 0 !== r.length || (r = function (t, n) {
        var e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};return t.forEach(function (t) {
          var r = n.edgeSource(t),
              o = n.edgeTarget(t);e[r] || (e[r] = { id: r }), e[o] || (e[o] = { id: o });
        }), c(e);
      }(a, n, e)), r.forEach(function (t) {
        var r = n.id(t);e[r] = t;
      }), function (t, n, e) {
        i(t, function (t, r) {
          t.inEdges = n.filter(function (t) {
            return "" + e.target(t) == "" + r;
          }), t.outEdges = n.filter(function (t) {
            return "" + e.source(t) == "" + r;
          }), t.edges = t.outEdges.concat(t.inEdges), t.frequency = t.edges.length, t.value = 0, t.inEdges.forEach(function (n) {
            t.value += e.targetWeight(n);
          }), t.outEdges.forEach(function (n) {
            t.value += e.sourceWeight(n);
          });
        });
      }(e, a, n), function (t, n) {
        var e = { weight: function weight(t, n) {
            return n.value - t.value;
          }, frequency: function frequency(t, n) {
            return n.frequency - t.frequency;
          }, id: function id(t, e) {
            return ("" + n.id(t)).localeCompare("" + n.id(e));
          } }[n.sortBy];!e && u(n.sortBy) && (e = n.sortBy), e && t.sort(e);
      }(r, n), function (t, n) {
        var e = t.length;if (!e) throw new TypeError("Invalid nodes: it's empty!");if (n.weight) {
          var r = n.marginRatio;if (r < 0 || r >= 1) throw new TypeError("Invalid marginRatio: it must be in range [0, 1)!");var o = r / (2 * e),
              i = n.thickness;if (i <= 0 || i >= 1) throw new TypeError("Invalid thickness: it must be in range (0, 1)!");var c = 0;t.forEach(function (t) {
            c += t.value;
          }), t.forEach(function (t) {
            t.weight = t.value / c, t.width = t.weight * (1 - r), t.height = i;
          }), t.forEach(function (e, r) {
            for (var c = 0, u = r - 1; u >= 0; u--) {
              c += t[u].width + 2 * o;
            }var a = e.minX = o + c,
                f = e.maxX = e.minX + e.width,
                s = e.minY = n.y - i / 2,
                l = e.maxY = s + i;e.x = [a, f, f, a], e.y = [s, s, l, l];
          });
        } else {
          var u = 1 / e;t.forEach(function (t, e) {
            t.x = (e + .5) * u, t.y = n.y;
          });
        }
      }(r, n), function (t, n, e) {
        if (e.weight) {
          var r = {};i(t, function (t, n) {
            r[n] = t.value;
          }), n.forEach(function (n) {
            var o = e.source(n),
                i = e.target(n),
                c = t[o],
                u = t[i];if (c && u) {
              var a = r[o],
                  f = e.sourceWeight(n),
                  s = c.minX + (c.value - a) / c.value * c.width,
                  l = s + f / c.value * c.width;r[o] -= f;var h = r[i],
                  p = e.targetWeight(n),
                  b = u.minX + (u.value - h) / u.value * u.width,
                  v = b + p / u.value * u.width;r[i] -= p;var g = e.y;n.x = [s, l, b, v], n.y = [g, g, g, g];
            }
          });
        } else n.forEach(function (n) {
          var r = t[e.source(n)],
              o = t[e.target(n)];r && o && (n.x = [r.x, o.x], n.y = [r.y, o.y]);
        });
      }(e, a, n), t.nodes = r, t.edges = a;
    }var o = e(5),
        i = e(11),
        c = e(114),
        u = e(9),
        a = e(2).registerTransform,
        f = { y: 0, thickness: .05, weight: !1, marginRatio: .1, id: function id(t) {
        return t.id;
      }, source: function source(t) {
        return t.source;
      }, target: function target(t) {
        return t.target;
      }, sourceWeight: function sourceWeight(t) {
        return t.value || 1;
      }, targetWeight: function targetWeight(t) {
        return t.value || 1;
      }, sortBy: null };a("diagram.arc", r), a("arc", r);
  }, function (t, n, e) {
    function r(t, n) {
      n = o({}, v, n);var e = null;i(n.nodeAlign) ? e = b[n.nodeAlign] : c(n.nodeAlign) && (e = n.nodeAlign);var r = a().links(function (t) {
        return t.edges;
      }).nodeWidth(n.nodeWidth).nodePadding(n.nodePadding).extent([[0, 0], [1, 1]]);c(n.nodeId) && r.nodeId(n.nodeId), e && r.nodeAlign(e), r(t), t.nodes.forEach(function (t) {
        var n = t.x0,
            e = t.x1,
            r = t.y0,
            o = t.y1;t.x = [n, e, e, n], t.y = [r, r, o, o];
      }), t.edges.forEach(function (t) {
        var n = t.source,
            e = t.target,
            r = n.x1,
            o = e.x0;t.x = [r, r, o, o];var i = t.width / 2;t.y = [t.y0 + i, t.y0 - i, t.y1 + i, t.y1 - i];
      });
    }var o = e(5),
        i = e(7),
        c = e(9),
        u = e(668),
        a = u.sankey,
        f = u.sankeyLeft,
        s = u.sankeyRight,
        l = u.sankeyCenter,
        h = u.sankeyJustify,
        p = e(2).registerTransform,
        b = { sankeyLeft: f, sankeyRight: s, sankeyCenter: l, sankeyJustify: h },
        v = { value: function value(t) {
        return t.value;
      }, source: function source(t) {
        return t.source;
      }, target: function target(t) {
        return t.target;
      }, nodeAlign: "sankeyJustify", nodeWidth: .02, nodePadding: .02 };p("diagram.sankey", r), p("sankey", r);
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(669);e.d(n, "sankey", function () {
      return r.a;
    });var o = e(253);e.d(n, "sankeyCenter", function () {
      return o.a;
    }), e.d(n, "sankeyLeft", function () {
      return o.c;
    }), e.d(n, "sankeyRight", function () {
      return o.d;
    }), e.d(n, "sankeyJustify", function () {
      return o.b;
    });var i = e(677);e.d(n, "sankeyLinkHorizontal", function () {
      return i.a;
    });
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      return i(t.source, n.source) || t.index - n.index;
    }function o(t, n) {
      return i(t.target, n.target) || t.index - n.index;
    }function i(t, n) {
      return t.y0 - n.y0;
    }function c(t) {
      return t.value;
    }function u(t) {
      return (t.y0 + t.y1) / 2;
    }function a(t) {
      return u(t.source) * t.value;
    }function f(t) {
      return u(t.target) * t.value;
    }function s(t) {
      return t.index;
    }function l(t) {
      return t.nodes;
    }function h(t) {
      return t.links;
    }function p(t, n) {
      var e = t.get(n);if (!e) throw new Error("missing: " + n);return e;
    }var b = e(14),
        v = e(670),
        g = e(253),
        d = e(676),
        j = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };n.a = function () {
      function t() {
        var t = { nodes: M.apply(null, arguments), links: S.apply(null, arguments) };return function (t) {
          t.nodes.forEach(function (t, n) {
            t.index = n, t.sourceLinks = [], t.targetLinks = [];
          });var n = Object(v.a)(t.nodes, w);t.links.forEach(function (t, e) {
            t.index = e;var r = t.source,
                o = t.target;"object" !== (void 0 === r ? "undefined" : j(r)) && (r = t.source = p(n, r)), "object" !== (void 0 === o ? "undefined" : j(o)) && (o = t.target = p(n, o)), r.sourceLinks.push(t), o.targetLinks.push(t);
          });
        }(t), function (t) {
          t.nodes.forEach(function (t) {
            t.value = Math.max(Object(b.e)(t.sourceLinks, c), Object(b.e)(t.targetLinks, c));
          });
        }(t), function (t) {
          var n, r, o;for (n = t.nodes, r = [], o = 0; n.length; ++o, n = r, r = []) {
            n.forEach(function (t) {
              t.depth = o, t.sourceLinks.forEach(function (t) {
                r.indexOf(t.target) < 0 && r.push(t.target);
              });
            });
          }for (n = t.nodes, r = [], o = 0; n.length; ++o, n = r, r = []) {
            n.forEach(function (t) {
              t.height = o, t.targetLinks.forEach(function (t) {
                r.indexOf(t.source) < 0 && r.push(t.source);
              });
            });
          }var i = (y - e - x) / (o - 1);t.nodes.forEach(function (t) {
            t.x1 = (t.x0 = e + Math.max(0, Math.min(o - 1, Math.floor(E.call(null, t, o)))) * i) + x;
          });
        }(t), function (t) {
          function n() {
            e.forEach(function (t) {
              var n,
                  e,
                  r,
                  o = O,
                  c = t.length;for (t.sort(i), r = 0; r < c; ++r) {
                n = t[r], (e = o - n.y0) > 0 && (n.y0 += e, n.y1 += e), o = n.y1 + _;
              }if ((e = o - _ - m) > 0) for (o = n.y0 -= e, n.y1 -= e, r = c - 2; r >= 0; --r) {
                n = t[r], (e = n.y1 + _ - o) > 0 && (n.y0 -= e, n.y1 -= e), o = n.y0;
              }
            });
          }var e = Object(v.b)().key(function (t) {
            return t.x0;
          }).sortKeys(b.a).entries(t.nodes).map(function (t) {
            return t.values;
          });(function () {
            var n = Object(b.c)(e, function (t) {
              return (m - O - (t.length - 1) * _) / Object(b.e)(t, c);
            });e.forEach(function (t) {
              t.forEach(function (t, e) {
                t.y1 = (t.y0 = e) + t.value * n;
              });
            }), t.links.forEach(function (t) {
              t.width = t.value * n;
            });
          })(), n();for (var r = 1, o = T; o > 0; --o) {
            !function (t) {
              e.slice().reverse().forEach(function (n) {
                n.forEach(function (n) {
                  if (n.sourceLinks.length) {
                    var e = (Object(b.e)(n.sourceLinks, f) / Object(b.e)(n.sourceLinks, c) - u(n)) * t;n.y0 += e, n.y1 += e;
                  }
                });
              });
            }(r *= .99), n(), function (t) {
              e.forEach(function (n) {
                n.forEach(function (n) {
                  if (n.targetLinks.length) {
                    var e = (Object(b.e)(n.targetLinks, a) / Object(b.e)(n.targetLinks, c) - u(n)) * t;n.y0 += e, n.y1 += e;
                  }
                });
              });
            }(r), n();
          }
        }(t), n(t), t;
      }function n(t) {
        t.nodes.forEach(function (t) {
          t.sourceLinks.sort(o), t.targetLinks.sort(r);
        }), t.nodes.forEach(function (t) {
          var n = t.y0,
              e = n;t.sourceLinks.forEach(function (t) {
            t.y0 = n + t.width / 2, n += t.width;
          }), t.targetLinks.forEach(function (t) {
            t.y1 = e + t.width / 2, e += t.width;
          });
        });
      }var e = 0,
          O = 0,
          y = 1,
          m = 1,
          x = 24,
          _ = 8,
          w = s,
          E = g.b,
          M = l,
          S = h,
          T = 32;return t.update = function (t) {
        return n(t), t;
      }, t.nodeId = function (n) {
        return arguments.length ? (w = "function" == typeof n ? n : Object(d.a)(n), t) : w;
      }, t.nodeAlign = function (n) {
        return arguments.length ? (E = "function" == typeof n ? n : Object(d.a)(n), t) : E;
      }, t.nodeWidth = function (n) {
        return arguments.length ? (x = +n, t) : x;
      }, t.nodePadding = function (n) {
        return arguments.length ? (_ = +n, t) : _;
      }, t.nodes = function (n) {
        return arguments.length ? (M = "function" == typeof n ? n : Object(d.a)(n), t) : M;
      }, t.links = function (n) {
        return arguments.length ? (S = "function" == typeof n ? n : Object(d.a)(n), t) : S;
      }, t.size = function (n) {
        return arguments.length ? (e = O = 0, y = +n[0], m = +n[1], t) : [y - e, m - O];
      }, t.extent = function (n) {
        return arguments.length ? (e = +n[0][0], y = +n[1][0], O = +n[0][1], m = +n[1][1], t) : [[e, O], [y, m]];
      }, t.iterations = function (n) {
        return arguments.length ? (T = +n, t) : T;
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    var r = e(671);e.d(n, "b", function () {
      return r.a;
    });e(672);var o = e(129);e.d(n, "a", function () {
      return o.a;
    });e(673), e(674), e(675);
  }, function (t, n, e) {
    "use strict";
    function r() {
      return {};
    }function o(t, n, e) {
      t[n] = e;
    }function i() {
      return Object(u.a)();
    }function c(t, n, e) {
      t.set(n, e);
    }var u = e(129);n.a = function () {
      function t(n, r, o, i) {
        if (r >= s.length) return null != e && n.sort(e), null != a ? a(n) : n;for (var c, f, l, h = -1, p = n.length, b = s[r++], v = Object(u.a)(), g = o(); ++h < p;) {
          (l = v.get(c = b(f = n[h]) + "")) ? l.push(f) : v.set(c, [f]);
        }return v.each(function (n, e) {
          i(g, e, t(n, r, o, i));
        }), g;
      }function n(t, e) {
        if (++e > s.length) return t;var r,
            o = l[e - 1];return null != a && e >= s.length ? r = t.entries() : (r = [], t.each(function (t, o) {
          r.push({ key: o, values: n(t, e) });
        })), null != o ? r.sort(function (t, n) {
          return o(t.key, n.key);
        }) : r;
      }var e,
          a,
          f,
          s = [],
          l = [];return f = { object: function object(n) {
          return t(n, 0, r, o);
        }, map: function map(n) {
          return t(n, 0, i, c);
        }, entries: function entries(e) {
          return n(t(e, 0, i, c), 0);
        }, key: function key(t) {
          return s.push(t), f;
        }, sortKeys: function sortKeys(t) {
          return l[s.length - 1] = t, f;
        }, sortValues: function sortValues(t) {
          return e = t, f;
        }, rollup: function rollup(t) {
          return a = t, f;
        } };
    };
  }, function (t, n, e) {
    "use strict";
    function r() {}function o(t, n) {
      var e = new r();if (t instanceof r) t.each(function (t) {
        e.add(t);
      });else if (t) {
        var o = -1,
            i = t.length;if (null == n) for (; ++o < i;) {
          e.add(t[o]);
        } else for (; ++o < i;) {
          e.add(n(t[o], o, t));
        }
      }return e;
    }var i = e(129),
        c = i.a.prototype;r.prototype = o.prototype = { constructor: r, has: c.has, add: function add(t) {
        return t += "", this[i.b + t] = t, this;
      }, remove: c.remove, clear: c.clear, values: c.keys, size: c.size, empty: c.empty, each: c.each };
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return [t.source.x1, t.y0];
    }function o(t) {
      return [t.target.x0, t.y1];
    }var i = e(678);n.a = function () {
      return Object(i.a)().source(r).target(o);
    };
  }, function (t, n, e) {
    "use strict";
    e(679), e(254), e(130), e(680), e(683), e(256), e(257);var r = e(684);e.d(n, "a", function () {
      return r.a;
    });e(685), e(259), e(260), e(261), e(263), e(262), e(264), e(265), e(686), e(687), e(76), e(688), e(266), e(267), e(77), e(689), e(690), e(132), e(691), e(74), e(692), e(693), e(694), e(695), e(696), e(697), e(51), e(698), e(699), e(133), e(700), e(701), e(52), e(702);
  }, function (t, n, e) {
    "use strict";
    e(29), e(31), e(50);
  }, function (t, n, e) {
    "use strict";
    e(31), e(681), e(682), e(50);
  }, function (t, n, e) {
    "use strict";
    n.a = function (t, n) {
      return n < t ? -1 : n > t ? 1 : n >= t ? 0 : NaN;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t;
    };
  }, function (t, n, e) {
    "use strict";
    e(255), e(254), e(256);
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t.source;
    }function o(t) {
      return t.target;
    }function i(t) {
      function n() {
        var n,
            r = a.a.call(arguments),
            o = e.apply(this, r),
            f = i.apply(this, r);if (h || (h = n = Object(u.path)()), t(h, +c.apply(this, (r[0] = o, r)), +l.apply(this, r), +c.apply(this, (r[0] = f, r)), +l.apply(this, r)), n) return h = null, n + "" || null;
      }var e = r,
          i = o,
          c = s.a,
          l = s.b,
          h = null;return n.source = function (t) {
        return arguments.length ? (e = t, n) : e;
      }, n.target = function (t) {
        return arguments.length ? (i = t, n) : i;
      }, n.x = function (t) {
        return arguments.length ? (c = "function" == typeof t ? t : Object(f.a)(+t), n) : c;
      }, n.y = function (t) {
        return arguments.length ? (l = "function" == typeof t ? t : Object(f.a)(+t), n) : l;
      }, n.context = function (t) {
        return arguments.length ? (h = null == t ? null : t, n) : h;
      }, n;
    }function c(t, n, e, r, o) {
      t.moveTo(n, e), t.bezierCurveTo(n = (n + r) / 2, e, n, o, r, o);
    }n.a = function () {
      return i(c);
    };var u = e(29),
        a = e(258),
        f = e(31),
        s = e(131);e(257);
  }, function (t, n, e) {
    "use strict";
    e(29);var r = e(259),
        o = e(260),
        i = e(261),
        c = e(262),
        u = e(263),
        a = e(264),
        f = e(265);e(31), r.a, o.a, i.a, u.a, c.a, a.a, f.a;
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }var o = e(75),
        i = e(76);r.prototype = { areaStart: o.a, areaEnd: o.a, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 1:
            this._context.moveTo(this._x2, this._y2), this._context.closePath();break;case 2:
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3), this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3), this._context.closePath();break;case 3:
            this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);}
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1, this._x2 = t, this._y2 = n;break;case 1:
            this._point = 2, this._x3 = t, this._y3 = n;break;case 2:
            this._point = 3, this._x4 = t, this._y4 = n, this._context.moveTo((this._x0 + 4 * this._x1 + t) / 6, (this._y0 + 4 * this._y1 + n) / 6);break;default:
            Object(i.b)(this, t, n);}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }var o = e(76);r.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1;break;case 1:
            this._point = 2;break;case 2:
            this._point = 3;var e = (this._x0 + 4 * this._x1 + t) / 6,
                r = (this._y0 + 4 * this._y1 + n) / 6;this._line ? this._context.lineTo(e, r) : this._context.moveTo(e, r);break;case 3:
            this._point = 4;default:
            Object(o.b)(this, t, n);}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      this._basis = new o.a(t), this._beta = n;
    }var o = e(76);r.prototype = { lineStart: function lineStart() {
        this._x = [], this._y = [], this._basis.lineStart();
      }, lineEnd: function lineEnd() {
        var t = this._x,
            n = this._y,
            e = t.length - 1;if (e > 0) for (var r, o = t[0], i = n[0], c = t[e] - o, u = n[e] - i, a = -1; ++a <= e;) {
          r = a / e, this._basis.point(this._beta * t[a] + (1 - this._beta) * (o + r * c), this._beta * n[a] + (1 - this._beta) * (i + r * u));
        }this._x = this._y = null, this._basis.lineEnd();
      }, point: function point(t, n) {
        this._x.push(+t), this._y.push(+n);
      } };(function t(n) {
      function e(t) {
        return 1 === n ? new o.a(t) : new r(t, n);
      }return e.beta = function (n) {
        return t(+n);
      }, e;
    })(.85);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      this._context = t, this._alpha = n;
    }var o = e(266),
        i = e(75),
        c = e(132);r.prototype = { areaStart: i.a, areaEnd: i.a, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 1:
            this._context.moveTo(this._x3, this._y3), this._context.closePath();break;case 2:
            this._context.lineTo(this._x3, this._y3), this._context.closePath();break;case 3:
            this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);}
      }, point: function point(t, n) {
        if (t = +t, n = +n, this._point) {
          var e = this._x2 - t,
              r = this._y2 - n;this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));
        }switch (this._point) {case 0:
            this._point = 1, this._x3 = t, this._y3 = n;break;case 1:
            this._point = 2, this._context.moveTo(this._x4 = t, this._y4 = n);break;case 2:
            this._point = 3, this._x5 = t, this._y5 = n;break;default:
            Object(c.a)(this, t, n);}this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
      } };(function t(n) {
      function e(t) {
        return n ? new r(t, n) : new o.a(t, 0);
      }return e.alpha = function (n) {
        return t(+n);
      }, e;
    })(.5);
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      this._context = t, this._alpha = n;
    }var o = e(267),
        i = e(132);r.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      }, lineEnd: function lineEnd() {
        (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        if (t = +t, n = +n, this._point) {
          var e = this._x2 - t,
              r = this._y2 - n;this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));
        }switch (this._point) {case 0:
            this._point = 1;break;case 1:
            this._point = 2;break;case 2:
            this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;case 3:
            this._point = 4;default:
            Object(i.a)(this, t, n);}this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
      } };(function t(n) {
      function e(t) {
        return n ? new r(t, n) : new o.a(t, 0);
      }return e.alpha = function (n) {
        return t(+n);
      }, e;
    })(.5);
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }var o = e(75);r.prototype = { areaStart: o.a, areaEnd: o.a, lineStart: function lineStart() {
        this._point = 0;
      }, lineEnd: function lineEnd() {
        this._point && this._context.closePath();
      }, point: function point(t, n) {
        t = +t, n = +n, this._point ? this._context.lineTo(t, n) : (this._point = 1, this._context.moveTo(t, n));
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      return t < 0 ? -1 : 1;
    }function o(t, n, e) {
      var o = t._x1 - t._x0,
          i = n - t._x1,
          c = (t._y1 - t._y0) / (o || i < 0 && -0),
          u = (e - t._y1) / (i || o < 0 && -0),
          a = (c * i + u * o) / (o + i);return (r(c) + r(u)) * Math.min(Math.abs(c), Math.abs(u), .5 * Math.abs(a)) || 0;
    }function i(t, n) {
      var e = t._x1 - t._x0;return e ? (3 * (t._y1 - t._y0) / e - n) / 2 : n;
    }function c(t, n, e) {
      var r = t._x0,
          o = t._y0,
          i = t._x1,
          c = t._y1,
          u = (i - r) / 3;t._context.bezierCurveTo(r + u, o + u * n, i - u, c - u * e, i, c);
    }function u(t) {
      this._context = t;
    }function a(t) {
      this._context = new f(t);
    }function f(t) {
      this._context = t;
    }u.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        switch (this._point) {case 2:
            this._context.lineTo(this._x1, this._y1);break;case 3:
            c(this, this._t0, i(this, this._t0));}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function point(t, n) {
        var e = NaN;if (t = +t, n = +n, t !== this._x1 || n !== this._y1) {
          switch (this._point) {case 0:
              this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
              this._point = 2;break;case 2:
              this._point = 3, c(this, i(this, e = o(this, t, n)), e);break;default:
              c(this, this._t0, e = o(this, t, n));}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n, this._t0 = e;
        }
      } }, (a.prototype = Object.create(u.prototype)).point = function (t, n) {
      u.prototype.point.call(this, n, t);
    }, f.prototype = { moveTo: function moveTo(t, n) {
        this._context.moveTo(n, t);
      }, closePath: function closePath() {
        this._context.closePath();
      }, lineTo: function lineTo(t, n) {
        this._context.lineTo(n, t);
      }, bezierCurveTo: function bezierCurveTo(t, n, e, r, o, i) {
        this._context.bezierCurveTo(n, t, r, e, i, o);
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      this._context = t;
    }function o(t) {
      var n,
          e,
          r = t.length - 1,
          o = new Array(r),
          i = new Array(r),
          c = new Array(r);for (o[0] = 0, i[0] = 2, c[0] = t[0] + 2 * t[1], n = 1; n < r - 1; ++n) {
        o[n] = 1, i[n] = 4, c[n] = 4 * t[n] + 2 * t[n + 1];
      }for (o[r - 1] = 2, i[r - 1] = 7, c[r - 1] = 8 * t[r - 1] + t[r], n = 1; n < r; ++n) {
        e = o[n] / i[n - 1], i[n] -= e, c[n] -= e * c[n - 1];
      }for (o[r - 1] = c[r - 1] / i[r - 1], n = r - 2; n >= 0; --n) {
        o[n] = (c[n] - o[n + 1]) / i[n];
      }for (i[r - 1] = (t[r] + o[r - 1]) / 2, n = 0; n < r - 1; ++n) {
        i[n] = 2 * t[n + 1] - o[n + 1];
      }return [o, i];
    }r.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x = [], this._y = [];
      }, lineEnd: function lineEnd() {
        var t = this._x,
            n = this._y,
            e = t.length;if (e) if (this._line ? this._context.lineTo(t[0], n[0]) : this._context.moveTo(t[0], n[0]), 2 === e) this._context.lineTo(t[1], n[1]);else for (var r = o(t), i = o(n), c = 0, u = 1; u < e; ++c, ++u) {
          this._context.bezierCurveTo(r[0][c], i[0][c], r[1][c], i[1][c], t[u], n[u]);
        }(this._line || 0 !== this._line && 1 === e) && this._context.closePath(), this._line = 1 - this._line, this._x = this._y = null;
      }, point: function point(t, n) {
        this._x.push(+t), this._y.push(+n);
      } };
  }, function (t, n, e) {
    "use strict";
    function r(t, n) {
      this._context = t, this._t = n;
    }r.prototype = { areaStart: function areaStart() {
        this._line = 0;
      }, areaEnd: function areaEnd() {
        this._line = NaN;
      }, lineStart: function lineStart() {
        this._x = this._y = NaN, this._point = 0;
      }, lineEnd: function lineEnd() {
        0 < this._t && this._t < 1 && 2 === this._point && this._context.lineTo(this._x, this._y), (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line >= 0 && (this._t = 1 - this._t, this._line = 1 - this._line);
      }, point: function point(t, n) {
        switch (t = +t, n = +n, this._point) {case 0:
            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
            this._point = 2;default:
            if (this._t <= 0) this._context.lineTo(this._x, n), this._context.lineTo(t, n);else {
              var e = this._x * (1 - this._t) + t * this._t;this._context.lineTo(e, this._y), this._context.lineTo(e, n);
            }}this._x = t, this._y = n;
      } };
  }, function (t, n, e) {
    "use strict";
    e(258), e(31), e(51), e(52);
  }, function (t, n, e) {
    "use strict";
    e(51);
  }, function (t, n, e) {
    "use strict";
  }, function (t, n, e) {
    "use strict";
    e(51);
  }, function (t, n, e) {
    "use strict";
    e(51);
  }, function (t, n, e) {
    "use strict";
    e(133);
  }, function (t, n, e) {
    "use strict";
    e(52), e(133);
  }, function (t, n, e) {
    "use strict";
    e(52);
  }, function (t, n, e) {
    function r(t, n) {
      var e = (n = o({}, a, n)).as;if (!Array.isArray(e) || 2 !== e.length) throw new TypeError("Invalid as: must be an array with two strings!");var r = e[0],
          c = e[1],
          f = u(n);if (!Array.isArray(f) && 2 !== f.length) throw new TypeError("Invalid fields: must be an array with two strings!");var s = f[0],
          l = f[1],
          h = t.rows,
          p = h.map(function (t) {
        return [t[s], t[l]];
      }),
          b = i.voronoi();n.extend && b.extent(n.extend), n.size && b.size(n.size);var v = b(p).polygons();h.forEach(function (t, n) {
        var e = v[n].filter(function (t) {
          return !!t;
        });t[r] = e.map(function (t) {
          return t[0];
        }), t[c] = e.map(function (t) {
          return t[1];
        });
      });
    }var o = e(5),
        i = e(704),
        c = e(2).registerTransform,
        u = e(6).getFields,
        a = { as: ["_x", "_y"] };c("diagram.voronoi", r), c("voronoi", r);
  }, function (t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", { value: !0 });var r = e(705);e.d(n, "voronoi", function () {
      return r.a;
    });
  }, function (t, n, e) {
    "use strict";
    var r = e(706),
        o = e(707),
        i = e(53);n.a = function () {
      function t(t) {
        return new i.d(t.map(function (r, o) {
          var c = [Math.round(n(r, o, t) / i.f) * i.f, Math.round(e(r, o, t) / i.f) * i.f];return c.index = o, c.data = r, c;
        }), c);
      }var n = o.a,
          e = o.b,
          c = null;return t.polygons = function (n) {
        return t(n).polygons();
      }, t.links = function (n) {
        return t(n).links();
      }, t.triangles = function (n) {
        return t(n).triangles();
      }, t.x = function (e) {
        return arguments.length ? (n = "function" == typeof e ? e : Object(r.a)(+e), t) : n;
      }, t.y = function (n) {
        return arguments.length ? (e = "function" == typeof n ? n : Object(r.a)(+n), t) : e;
      }, t.extent = function (n) {
        return arguments.length ? (c = null == n ? null : [[+n[0][0], +n[0][1]], [+n[1][0], +n[1][1]]], t) : c && [[c[0][0], c[0][1]], [c[1][0], c[1][1]]];
      }, t.size = function (n) {
        return arguments.length ? (c = null == n ? null : [[0, 0], [+n[0], +n[1]]], t) : c && [c[1][0] - c[0][0], c[1][1] - c[0][1]];
      }, t;
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return function () {
        return t;
      };
    };
  }, function (t, n, e) {
    "use strict";
    n.a = function (t) {
      return t[0];
    }, n.b = function (t) {
      return t[1];
    };
  }, function (t, n, e) {
    "use strict";
    function r(t) {
      var n = l.pop() || new function () {
        Object(c.a)(this), this.edge = this.site = this.circle = null;
      }();return n.site = t, n;
    }function o(t) {
      Object(a.b)(t), s.a.remove(t), l.push(t), Object(c.a)(t);
    }function i(t, n) {
      var e = t.site,
          r = e[0],
          o = e[1],
          i = o - n;if (!i) return r;var c = t.P;if (!c) return -1 / 0;var u = (e = c.site)[0],
          a = e[1],
          f = a - n;if (!f) return u;var s = u - r,
          l = 1 / i - 1 / f,
          h = s / f;return l ? (-h + Math.sqrt(h * h - 2 * l * (s * s / (-2 * f) - a + f / 2 + o - i / 2))) / l + r : (r + u) / 2;
    }n.b = function (t) {
      var n = t.circle,
          e = n.x,
          r = n.cy,
          i = [e, r],
          c = t.P,
          u = t.N,
          l = [t];o(t);for (var h = c; h.circle && Math.abs(e - h.circle.x) < s.f && Math.abs(r - h.circle.cy) < s.f;) {
        c = h.P, l.unshift(h), o(h), h = c;
      }l.unshift(h), Object(a.b)(h);for (var p = u; p.circle && Math.abs(e - p.circle.x) < s.f && Math.abs(r - p.circle.cy) < s.f;) {
        u = p.N, l.push(p), o(p), p = u;
      }l.push(p), Object(a.b)(p);var b,
          v = l.length;for (b = 1; b < v; ++b) {
        p = l[b], h = l[b - 1], Object(f.d)(p.edge, h.site, p.site, i);
      }h = l[0], (p = l[v - 1]).edge = Object(f.c)(h.site, p.site, null, i), Object(a.a)(h), Object(a.a)(p);
    }, n.a = function (t) {
      for (var n, e, o, c, l = t[0], h = t[1], p = s.a._; p;) {
        if ((o = i(p, h) - l) > s.f) p = p.L;else {
          if (!((c = l - function (t, n) {
            var e = t.N;if (e) return i(e, n);var r = t.site;return r[1] === n ? r[0] : 1 / 0;
          }(p, h)) > s.f)) {
            o > -s.f ? (n = p.P, e = p) : c > -s.f ? (n = p, e = p.N) : n = e = p;break;
          }if (!p.R) {
            n = p;break;
          }p = p.R;
        }
      }Object(u.c)(t);var b = r(t);if (s.a.insert(n, b), n || e) {
        if (n === e) return Object(a.b)(n), e = r(n.site), s.a.insert(b, e), b.edge = e.edge = Object(f.c)(n.site, b.site), Object(a.a)(n), void Object(a.a)(e);if (e) {
          Object(a.b)(n), Object(a.b)(e);var v = n.site,
              g = v[0],
              d = v[1],
              j = t[0] - g,
              O = t[1] - d,
              y = e.site,
              m = y[0] - g,
              x = y[1] - d,
              _ = 2 * (j * x - O * m),
              w = j * j + O * O,
              E = m * m + x * x,
              M = [(x * w - O * E) / _ + g, (j * E - m * w) / _ + d];Object(f.d)(e.edge, v, y, M), b.edge = Object(f.c)(v, t, null, M), e.edge = Object(f.c)(t, y, null, M), Object(a.a)(n), Object(a.a)(e);
        } else b.edge = Object(f.c)(n.site, b.site);
      }
    };var c = e(134),
        u = e(268),
        a = e(269),
        f = e(135),
        s = e(53),
        l = [];
  }, function (t, n, e) {
    function r(t, n) {
      if (t.dataType !== u) throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e = t.root,
          r = (n = o({}, s, n)).as;if (!Array.isArray(r) || 2 !== r.length) throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');var c = void 0;try {
        c = f(n);
      } catch (t) {
        console.warn(t);
      }c && e.sum(function (t) {
        return t[c];
      });var a = i.cluster();a.size(n.size), n.nodeSize && a.nodeSize(n.nodeSize), n.separation && a.separation(n.separation), a(e);var l = r[0],
          h = r[1];e.each(function (t) {
        t[l] = t.x, t[h] = t.y;
      });
    }var o = e(5),
        i = e(48),
        c = e(2),
        u = c.HIERARCHY,
        a = c.registerTransform,
        f = e(6).getField,
        s = { field: "value", size: [1, 1], nodeSize: null, separation: null, as: ["x", "y"] };a("hierarchy.cluster", r), a("dendrogram", r);
  }, function (t, n, e) {
    function r(t, n) {
      if (t.dataType !== u) throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e = t.root,
          r = (n = o({}, s, n)).as;if (!Array.isArray(r) || 2 !== r.length) throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');var c = void 0;try {
        c = f(n);
      } catch (t) {
        console.warn(t);
      }c && e.sum(function (t) {
        return t[c];
      });var a = i.tree();a.size(n.size), n.nodeSize && a.nodeSize(n.nodeSize), n.separation && a.separation(n.separation), a(e);var l = r[0],
          h = r[1];e.each(function (t) {
        t[l] = t.x, t[h] = t.y;
      });
    }var o = e(5),
        i = e(48),
        c = e(2),
        u = c.HIERARCHY,
        a = c.registerTransform,
        f = e(6).getField,
        s = { field: "value", size: [1, 1], nodeSize: null, separation: null, as: ["x", "y"] };a("hierarchy.tree", r), a("tree", r);
  }, function (t, n, e) {
    function r(t, n) {
      if (t.dataType !== u) throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e = t.root,
          r = (n = o({}, s, n)).as;if (!Array.isArray(r) || 2 !== r.length) throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');var c = void 0;try {
        c = f(n);
      } catch (t) {
        console.warn(t);
      }c && e.sum(function (t) {
        return t[c];
      });var a = i.treemap();a.tile(i[n.tile]).size(n.size).round(n.round).padding(n.padding).paddingInner(n.paddingInner).paddingOuter(n.paddingOuter).paddingTop(n.paddingTop).paddingRight(n.paddingRight).paddingBottom(n.paddingBottom).paddingLeft(n.paddingLeft), a(e);var l = r[0],
          h = r[1];e.each(function (t) {
        t[l] = [t.x0, t.x1, t.x1, t.x0], t[h] = [t.y1, t.y1, t.y0, t.y0], ["x0", "x1", "y0", "y1"].forEach(function (n) {
          -1 === r.indexOf(n) && delete t[n];
        });
      });
    }var o = e(5),
        i = e(48),
        c = e(2),
        u = c.HIERARCHY,
        a = c.registerTransform,
        f = e(6).getField,
        s = { field: "value", tile: "treemapSquarify", size: [1, 1], round: !1, padding: 0, paddingInner: 0, paddingOuter: 0, paddingTop: 0, paddingRight: 0, paddingBottom: 0, paddingLeft: 0, as: ["x", "y"] };a("hierarchy.treemap", r), a("treemap", r);
  }, function (t, n, e) {
    function r(t, n) {
      if (t.dataType !== u) throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e = t.root,
          r = (n = o({}, s, n)).as;if (!Array.isArray(r) || 2 !== r.length) throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');var c = void 0;try {
        c = f(n);
      } catch (t) {
        console.warn(t);
      }c && e.sum(function (t) {
        return t[c];
      });var a = i.partition();a.size(n.size).round(n.round).padding(n.padding), a(e);var l = r[0],
          h = r[1];e.each(function (t) {
        t[l] = [t.x0, t.x1, t.x1, t.x0], t[h] = [t.y1, t.y1, t.y0, t.y0], ["x0", "x1", "y0", "y1"].forEach(function (n) {
          -1 === r.indexOf(n) && delete t[n];
        });
      });
    }var o = e(5),
        i = e(48),
        c = e(2),
        u = c.HIERARCHY,
        a = c.registerTransform,
        f = e(6).getField,
        s = { field: "value", size: [1, 1], round: !1, padding: 0, sort: !0, as: ["x", "y"] };a("hierarchy.partition", r), a("adjacency", r);
  }, function (t, n, e) {
    function r(t, n) {
      n = o({}, f, n);var e = u();["font", "fontSize", "padding", "rotate", "size", "spiral", "timeInterval"].forEach(function (t) {
        n[t] && e[t](n[t]);
      });var r = a(n),
          c = r[0],
          s = r[1];if (!i(c) || !i(s)) throw new TypeError('Invalid fields: must be an array with 2 strings (e.g. [ "text", "value" ])!');var l = t.rows.map(function (t) {
        return t.text = t[c], t.value = t[s], t;
      });e.words(l), n.imageMask && e.createMask(n.imageMask);var h = e.start(),
          p = h._tags,
          b = h._bounds;p.forEach(function (t) {
        t.x += n.size[0] / 2, t.y += n.size[1] / 2;
      });var v = n.size,
          g = v[0],
          d = v[1],
          j = h.hasImage;p.push({ text: "", value: 0, x: j ? 0 : b[0].x, y: j ? 0 : b[0].y, opacity: 0 }), p.push({ text: "", value: 0, x: j ? g : b[1].x, y: j ? d : b[1].y, opacity: 0 }), t.rows = p, t._tagCloud = h;
    }var o = e(5),
        i = e(7),
        c = e(2).registerTransform,
        u = e(714),
        a = e(6).getFields,
        f = { fields: ["text", "value"], font: function font() {
        return "serif";
      }, padding: 1, size: [500, 500], spiral: "archimedean", timeInterval: 500 };c("tag-cloud", r), c("word-cloud", r);
  }, function (t, n) {
    function e(t) {
      return t.text;
    }function r() {
      return "serif";
    }function o() {
      return "normal";
    }function i(t) {
      return t.value;
    }function c() {
      return 90 * ~~(2 * Math.random());
    }function u() {
      return 1;
    }function a(t, n, e, r) {
      if (!n.sprite) {
        var o = t.context,
            i = t.ratio;o.clearRect(0, 0, (d << 5) / i, j / i);var c = 0,
            u = 0,
            a = 0,
            f = e.length;for (--r; ++r < f;) {
          n = e[r], o.save(), o.font = n.style + " " + n.weight + " " + ~~((n.size + 1) / i) + "px " + n.font;var s = o.measureText(n.text + "m").width * i,
              l = n.size << 1;if (n.rotate) {
            var h = Math.sin(n.rotate * g),
                p = Math.cos(n.rotate * g),
                b = s * p,
                v = s * h,
                O = l * p,
                y = l * h;s = Math.max(Math.abs(b + y), Math.abs(b - y)) + 31 >> 5 << 5, l = ~~Math.max(Math.abs(v + O), Math.abs(v - O));
          } else s = s + 31 >> 5 << 5;if (l > a && (a = l), c + s >= d << 5 && (c = 0, u += a, a = 0), u + l >= j) break;o.translate((c + (s >> 1)) / i, (u + (l >> 1)) / i), n.rotate && o.rotate(n.rotate * g), o.fillText(n.text, 0, 0), n.padding && (o.lineWidth = 2 * n.padding, o.strokeText(n.text, 0, 0)), o.restore(), n.width = s, n.height = l, n.xoff = c, n.yoff = u, n.x1 = s >> 1, n.y1 = l >> 1, n.x0 = -n.x1, n.y0 = -n.y1, n.hasText = !0, c += s;
        }for (var m = o.getImageData(0, 0, (d << 5) / i, j / i).data, x = []; --r >= 0;) {
          if ((n = e[r]).hasText) {
            for (var _ = n.width, w = _ >> 5, E = n.y1 - n.y0, M = 0; M < E * w; M++) {
              x[M] = 0;
            }if (null == (c = n.xoff)) return;u = n.yoff;for (var S = 0, T = -1, P = 0; P < E; P++) {
              for (var k = 0; k < _; k++) {
                var A = w * P + (k >> 5),
                    C = m[(u + P) * (d << 5) + (c + k) << 2] ? 1 << 31 - k % 32 : 0;x[A] |= C, S |= C;
              }S ? T = P : (n.y0++, E--, P--, u++);
            }n.y1 = n.y0 + T, n.sprite = x.slice(0, (n.y1 - n.y0) * w);
          }
        }
      }
    }function f(t, n, e) {
      e >>= 5;for (var r = t.sprite, o = t.width >> 5, i = t.x - (o << 4), c = 127 & i, u = 32 - c, a = t.y1 - t.y0, f = (t.y + t.y0) * e + (i >> 5), s = void 0, l = 0; l < a; l++) {
        s = 0;for (var h = 0; h <= o; h++) {
          if ((s << u | (h < o ? (s = r[l * o + h]) >>> c : 0)) & n[f + h]) return !0;
        }f += e;
      }return !1;
    }function s(t, n) {
      var e = t[0],
          r = t[1];n.x + n.x0 < e.x && (e.x = n.x + n.x0), n.y + n.y0 < e.y && (e.y = n.y + n.y0), n.x + n.x1 > r.x && (r.x = n.x + n.x1), n.y + n.y1 > r.y && (r.y = n.y + n.y1);
    }function l(t, n) {
      return t.x + t.x1 > n[0].x && t.x + t.x0 < n[1].x && t.y + t.y1 > n[0].y && t.y + t.y0 < n[1].y;
    }function h(t) {
      var n = t[0] / t[1];return function (t) {
        return [n * (t *= .1) * Math.cos(t), t * Math.sin(t)];
      };
    }function p(t) {
      for (var n = [], e = -1; ++e < t;) {
        n[e] = 0;
      }return n;
    }function b() {
      return document.createElement("canvas");
    }function v(t) {
      return "function" == typeof t ? t : function () {
        return t;
      };
    }var g = Math.PI / 180,
        d = 64,
        j = 2048,
        O = { archimedean: h, rectangular: function rectangular(t) {
        var n = 4 * t[0] / t[1],
            e = 0,
            r = 0;return function (t) {
          var o = t < 0 ? -1 : 1;switch (Math.sqrt(1 + 4 * o * t) - o & 3) {case 0:
              e += n;break;case 1:
              r += 4;break;case 2:
              e -= n;break;default:
              r -= 4;}return [e, r];
        };
      } };t.exports = function () {
      var t = [256, 256],
          n = e,
          g = r,
          y = i,
          m = o,
          x = o,
          _ = c,
          w = u,
          E = h,
          M = [],
          S = 1 / 0,
          T = Math.random,
          P = b,
          k = {};return k.canvas = function (t) {
        return arguments.length ? (P = v(t), k) : P;
      }, k.start = function () {
        var e = t,
            r = e[0],
            o = e[1],
            i = function (t) {
          t.width = t.height = 1;var n = Math.sqrt(t.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);t.width = (d << 5) / n, t.height = j / n;var e = t.getContext("2d");return e.fillStyle = e.strokeStyle = "red", e.textAlign = "center", { context: e, ratio: n };
        }(P()),
            c = k.board ? k.board : p((t[0] >> 5) * t[1]),
            u = M.length,
            h = [],
            b = M.map(function (t, e) {
          return t.text = n.call(this, t, e), t.font = g.call(this, t, e), t.style = m.call(this, t, e), t.weight = x.call(this, t, e), t.rotate = _.call(this, t, e), t.size = ~~y.call(this, t, e), t.padding = w.call(this, t, e), t;
        }).sort(function (t, n) {
          return n.size - t.size;
        }),
            v = -1,
            O = k.board ? [{ x: 0, y: 0 }, { x: r, y: o }] : null;return function () {
          for (var n = Date.now(); Date.now() - n < S && ++v < u;) {
            var e = b[v];e.x = r * (T() + .5) >> 1, e.y = o * (T() + .5) >> 1, a(i, e, b, v), e.hasText && function (n, e, r) {
              for (var o = e.x, i = e.y, c = Math.sqrt(t[0] * t[0] + t[1] * t[1]), u = E(t), a = T() < .5 ? 1 : -1, s = void 0, h = -a, p = void 0, b = void 0; (s = u(h += a)) && (p = ~~s[0], b = ~~s[1], !(Math.min(Math.abs(p), Math.abs(b)) >= c));) {
                if (e.x = o + p, e.y = i + b, !(e.x + e.x0 < 0 || e.y + e.y0 < 0 || e.x + e.x1 > t[0] || e.y + e.y1 > t[1]) && (!r || !f(e, n, t[0])) && (!r || l(e, r))) {
                  for (var v = e.sprite, g = e.width >> 5, d = t[0] >> 5, j = e.x - (g << 4), O = 127 & j, y = 32 - O, m = e.y1 - e.y0, x = void 0, _ = (e.y + e.y0) * d + (j >> 5), w = 0; w < m; w++) {
                    x = 0;for (var M = 0; M <= g; M++) {
                      n[_ + M] |= x << y | (M < g ? (x = v[w * g + M]) >>> O : 0);
                    }_ += d;
                  }return delete e.sprite, !0;
                }
              }return !1;
            }(c, e, O) && (h.push(e), O ? k.hasImage || s(O, e) : O = [{ x: e.x + e.x0, y: e.y + e.y0 }, { x: e.x + e.x1, y: e.y + e.y1 }], e.x -= t[0] >> 1, e.y -= t[1] >> 1);
          }k._tags = h, k._bounds = O;
        }(), k;
      }, k.createMask = function (n) {
        var e = document.createElement("canvas"),
            r = t,
            o = r[0],
            i = r[1],
            c = o >> 5,
            u = p((o >> 5) * i);e.width = o, e.height = i;var a = e.getContext("2d");a.drawImage(n, 0, 0, n.width, n.height, 0, 0, o, i);for (var f = a.getImageData(0, 0, o, i).data, s = 0; s < i; s++) {
          for (var l = 0; l < o; l++) {
            var h = c * s + (l >> 5),
                b = s * o + l << 2,
                v = f[b] >= 250 && f[b + 1] >= 250 && f[b + 2] >= 250 ? 1 << 31 - l % 32 : 0;u[h] |= v;
          }
        }k.board = u, k.hasImage = !0;
      }, k.timeInterval = function (t) {
        return arguments.length ? (S = null == t ? 1 / 0 : t, k) : S;
      }, k.words = function (t) {
        return arguments.length ? (M = t, k) : M;
      }, k.size = function (n) {
        return arguments.length ? (t = [+n[0], +n[1]], k) : t;
      }, k.font = function (t) {
        return arguments.length ? (g = v(t), k) : g;
      }, k.fontStyle = function (t) {
        return arguments.length ? (m = v(t), k) : m;
      }, k.fontWeight = function (t) {
        return arguments.length ? (x = v(t), k) : x;
      }, k.rotate = function (t) {
        return arguments.length ? (_ = v(t), k) : _;
      }, k.text = function (t) {
        return arguments.length ? (n = v(t), k) : n;
      }, k.spiral = function (t) {
        return arguments.length ? (E = O[t] || t, k) : E;
      }, k.fontSize = function (t) {
        return arguments.length ? (y = v(t), k) : y;
      }, k.padding = function (t) {
        return arguments.length ? (w = v(t), k) : w;
      }, k.random = function (t) {
        return arguments.length ? (T = t, k) : T;
      }, k;
    };
  }, function (t, n, e) {
    function r(t, n) {
      n = o({}, v, n);var e = h(n);if (!b(e) || 2 !== e.length) throw new TypeError("invalid fields: must be an array of 2 strings!");var r = n.as,
          a = r[0],
          l = r[1],
          d = r[2];if (!u(a) || !u(l) || !u(d)) throw new TypeError("invalid as: must be an array of 3 strings!");var j = n.method;if (u(j)) {
        if (-1 === g.indexOf(j)) throw new TypeError("invalid method: " + j + ". Must be one of " + g.join(", "));j = s[j];
      }if (!i(j)) throw new TypeError("invalid method: kernel method must be a function!");var O = e[0],
          y = e[1],
          m = n.extent,
          x = m[0],
          _ = m[1];b(x) && b(_) || (x = t.range(O), _ = t.range(y));var w = n.bandwidth,
          E = w[0],
          M = w[1];(!c(E) || E <= 0 || !c(M) || M <= 0) && (E = p(t.getColumn(O)), M = p(t.getColumn(y)));for (var S = f(x, E), T = f(_, M), P = t.rows.length, k = [], A = 0; A < S.length; A++) {
        for (var C = 0; C < T.length; C++) {
          for (var B = 0, R = S[A], N = T[C], q = 0; q < P; q++) {
            B += j((R - t.rows[q][O]) / E) * j((N - t.rows[q][y]) / M);
          }var z = 1 / (P * E * M) * B,
              L = {};L[a] = R, L[l] = N, L[d] = z, k.push(L);
        }
      }t.rows = k;
    }var o = e(5),
        i = e(9),
        c = e(126),
        u = e(7),
        a = e(10),
        f = e(127),
        s = e(270),
        l = e(2).registerTransform,
        h = e(6).getFields,
        p = e(128).silverman,
        b = Array.isArray,
        v = { as: ["x", "y", "z"], method: "gaussian", extent: [], bandwidth: [] },
        g = a(s);l("kernel-smooth.density", r), l("kernel.density", r), t.exports = { KERNEL_METHODS: g };
  }, function (t, n, e) {
    function r(t) {
      return function (n) {
        return d(n) ? n.map(function (n) {
          return t(n);
        }) : t(n);
      };
    }function o(t, n) {
      n = i({}, j, n);var e = v(n);if (!d(e) || 1 !== e.length && 2 !== e.length) throw new TypeError("invalid fields: must be an array of 1 or 2 strings!");var o = n.as,
          s = o[0],
          b = o[1];if (!f(s) || !f(b)) throw new TypeError("invalid as: must be an array of 2 strings!");var y = n.method;if (f(y)) {
        if (-1 === O.indexOf(y)) throw new TypeError("invalid method: " + y + ". Must be one of " + O.join(", "));y = p[y];
      }if (!c(y)) throw new TypeError("invalid method: kernel method must be a function!");var m = e[0],
          x = e[1],
          _ = t.getColumn(m),
          w = n.extent;d(w) || (w = t.range(m));var E = n.bandwidth;(!a(E) || E <= 0) && (E = g(_));var M = h(w, E),
          S = _.length,
          T = function (t, n, e, r) {
        return t((r - e) / n);
      }.bind(null, y, E),
          P = void 0;if (u(x)) P = r(function (t) {
        var n = _.map(function (n) {
          return T(t, n);
        }),
            e = l(n),
            r = S * E;return e && r ? e / r : 0;
      });else {
        var k = t.getColumn(x);P = r(function (t) {
          var n = _.map(function (n) {
            return T(t, n);
          }),
              e = l(n.map(function (t, n) {
            return t * k[n];
          })),
              r = l(n);return e && r ? e / r : 0;
        });
      }var A = M.map(function (t) {
        var n = {};return n[s] = t, n[b] = P(t), n;
      });t.rows = A;
    }var i = e(5),
        c = e(9),
        u = e(239),
        a = e(126),
        f = e(7),
        s = e(10),
        l = e(30).sum,
        h = e(127),
        p = e(270),
        b = e(2).registerTransform,
        v = e(6).getFields,
        g = e(128).silverman,
        d = Array.isArray,
        j = { as: ["x", "y"], method: "gaussian" },
        O = s(p);b("kernel-smooth.regression", o), b("kernel.regression", o), t.exports = { KERNEL_METHODS: O };
  }]);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ "../node_modules/webpack/buildin/module.js")(module)))

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,